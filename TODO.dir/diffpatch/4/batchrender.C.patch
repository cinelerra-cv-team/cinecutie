--- cinecutie/batchrender.C	2008-10-11 17:46:25.000000000 +0200
+++ /home/user/cinecutie/cinecutie/batchrender.C	2010-02-19 22:19:11.858573208 +0100
@@ -32,6 +32,7 @@
 #include "keys.h"
 #include "language.h"
 #include "mainsession.h"
+#include "mutex.h"
 #include "mwindow.h"
 #include "mwindowgui.h"
 #include "packagedispatcher.h"
@@ -46,12 +47,12 @@
 
 
 
-static const char *list_titles[] = 
+static char *list_titles[] = 
 {
-	"Enabled", 
-	"Output",
-	"EDL",
-	"Elapsed"
+	N_("Enabled"), 
+	N_("Output"),
+	N_("EDL"),
+	N_("Elapsed")
 };
 
 static int list_widths[] =
@@ -220,14 +221,21 @@
 void BatchRenderThread::handle_close_event(int result)
 {
 // Save settings
-
+TRACE("BatchRenderThread::handle_close_event 1");
 	char path[BCTEXTLEN];
+TRACE("BatchRenderThread::handle_close_event 1");
 	path[0] = 0;
+TRACE("BatchRenderThread::handle_close_event 1");
 	save_jobs(path);
+TRACE("BatchRenderThread::handle_close_event 1");
 	save_defaults(mwindow->defaults);
+TRACE("BatchRenderThread::handle_close_event 1");
 	delete default_job;
+TRACE("BatchRenderThread::handle_close_event 1");
 	default_job = 0;
+TRACE("BatchRenderThread::handle_close_event 1");
 	jobs.remove_all_objects();
+TRACE("BatchRenderThread::handle_close_event 100");
 }
 
 BC_Window* BatchRenderThread::new_gui()
@@ -460,7 +468,7 @@
 				LOAD_ALL);
 			command->change_type = CHANGE_ALL;
 			command->set_playback_range();
-			command->adjust_playback_range();
+			command->playback_range_adjust_inout();
 
 // Create test packages
 			packages->create_packages(mwindow,
@@ -473,11 +481,7 @@
 				0);
 
 // Append output paths allocated to total
-			for(int j = 0; j < packages->get_total_packages(); j++)
-			{
-				RenderPackage *package = packages->get_package(j);
-				paths->append(strdup(package->path));
-			}
+			packages->get_package_paths(paths);
 
 // Delete package harness
 			delete packages;
@@ -518,6 +522,8 @@
 		plugindb);
 
 	int result = ConfirmSave::test_files(0, &paths);
+	paths.remove_all_objects();
+
 // Abort on any existing file because it's so hard to set this up.
 	if(result) return;
 
@@ -656,15 +662,12 @@
 
 BatchRenderGUI::~BatchRenderGUI()
 {
-	lock_window("BatchRenderGUI::~BatchRenderGUI");
 	delete format_tools;
-	unlock_window();
 }
 
 
 void BatchRenderGUI::create_objects()
 {
-	lock_window("BatchRenderGUI::create_objects");
 	mwindow->theme->get_batchrender_sizes(this, get_w(), get_h());
 	create_list(0);
 
@@ -682,7 +685,6 @@
 	format_tools = new BatchFormat(mwindow,
 					this, 
 					thread->get_current_asset());
-	format_tools->set_w(get_w() / 2);
 	format_tools->create_objects(x, 
 						y, 
 						1, 
@@ -728,7 +730,7 @@
 
 	x = x1;
 
-	y += 30;
+	y += 45;
 	add_subwindow(new_batch = new BatchRenderNew(thread, 
 		x, 
 		y));
@@ -739,6 +741,17 @@
 		y));
 	x += delete_batch->get_w() + 10;
 
+	add_subwindow(savelist_batch = new BatchRenderSaveList(thread, 
+		x, 
+		y));
+	x += savelist_batch->get_w() + 10;
+
+	add_subwindow(loadlist_batch = new BatchRenderLoadList(thread, 
+		x, 
+		y));
+	x += loadlist_batch->get_w() + 10;
+
+
 	x = x2;
 	y = y2;
 	add_subwindow(list_title = new BC_Title(x, y, _("Batches to render:")));
@@ -766,7 +779,6 @@
 		y));
 
 	show_window();
-	unlock_window();
 }
 
 int BatchRenderGUI::resize_event(int w, int h)
@@ -1010,8 +1022,176 @@
 
 
 
+BatchRenderSaveList::BatchRenderSaveList(BatchRenderThread *thread, 
+	int x, 
+	int y)
+ : BC_GenericButton(x, y, _("Save List"))
+{
+	this->thread = thread;
+	set_tooltip(_("Save a Batch Render List"));
+	gui = 0;
+	startup_lock = new Mutex("BatchRenderSaveList::startup_lock");
+}
+
+BatchRenderSaveList::~BatchRenderSaveList()
+{
+	startup_lock->lock("BatchRenderSaveList::~BrowseButton");
+	if(gui)
+	{
+		gui->lock_window();
+		gui->set_done(1);
+		gui->unlock_window();
+	}
+	startup_lock->unlock();
+	Thread::join();
+	delete startup_lock;
+}
+
+int BatchRenderSaveList::handle_event()
+{
+	if(Thread::running())
+	{
+		if(gui)
+		{
+			gui->lock_window();
+			gui->raise_window();
+			gui->unlock_window();
+		}
+		return 1;
+	}
+	startup_lock->lock("BatchRenderSaveList::handle_event 1");
+	Thread::start();
+	startup_lock->lock("BatchRenderSaveList::handle_event 2");
+	startup_lock->unlock();
+	return 1;
+}
+
+void BatchRenderSaveList::run()
+{
+	char default_path[BCTEXTLEN];
+	sprintf(default_path, "~");
+	BC_FileBox filewindow(100,
+			      100,
+			      this->thread->mwindow->defaults->get("DEFAULT_BATCHLOADPATH", default_path),
+			      _("Save Batch Render List"),
+			      _("Enter a Batch Render filename to save as:"),
+			      0,
+			      0,
+			      0,
+			      0);
+
+	gui = &filewindow;
+
+	startup_lock->unlock();
+	filewindow.create_objects();
+
+	int result2 = filewindow.run_window();
+
+	if(!result2)
+	{
+		this->thread->save_jobs(filewindow.get_submitted_path());
+		this->thread->mwindow->defaults->update("DEFAULT_BATCHLOADPATH", filewindow.get_submitted_path());
+	}
+
+	this->thread->gui->flush();
+	startup_lock->lock("BatchRenderLoadList::run");
+	gui = 0;
+	startup_lock->unlock();
+}
+
+int BatchRenderSaveList::keypress_event() {
+	if (get_keypress() == 's' || 
+	    get_keypress() == 'S') return handle_event();
+	return 0;
+}
+
+
+
+
+BatchRenderLoadList::BatchRenderLoadList(BatchRenderThread *thread, 
+	int x, 
+	int y)
+  : BC_GenericButton(x, y, _("Load List")),
+    Thread()
+{
+	this->thread = thread;
+	set_tooltip(_("Load a previously saved Batch Render List"));
+	gui = 0;
+	startup_lock = new Mutex("BatchRenderLoadList::startup_lock");
+}
+
+BatchRenderLoadList::~BatchRenderLoadList()
+{
+	startup_lock->lock("BatchRenderLoadList::~BrowseButton");
+	if(gui)
+	{
+		gui->lock_window();
+		gui->set_done(1);
+		gui->unlock_window();
+	}
+	startup_lock->unlock();
+	Thread::join();
+	delete startup_lock;
+}
+
+int BatchRenderLoadList::handle_event()
+{
+	if(Thread::running())
+	{
+		if(gui)
+		{
+			gui->lock_window();
+			gui->raise_window();
+			gui->unlock_window();
+		}
+		return 1;
+	}
+	startup_lock->lock("BatchRenderLoadList::handle_event 1");
+	Thread::start();
+	startup_lock->lock("BatchRenderLoadList::handle_event 2");
+	startup_lock->unlock();
+	return 1;
+}
+
+void BatchRenderLoadList::run()
+{
+	char default_path[BCTEXTLEN];
+	sprintf(default_path, "~");
+	BC_FileBox filewindow(100,
+			      100,
+			      this->thread->mwindow->defaults->get("DEFAULT_BATCHLOADPATH", default_path),
+			      _("Load Batch Render List"),
+			      _("Enter a Batch Render filename to load from:"),
+			      0,
+			      0,
+			      0,
+			      0);
+
+	gui = &filewindow;
+
+	startup_lock->unlock();
+	filewindow.create_objects();
+
+	int result2 = filewindow.run_window();
 
+	if(!result2)
+	{
+		this->thread->load_jobs(filewindow.get_submitted_path(),this->thread->mwindow->preferences);
+		this->thread->gui->create_list(1);
+		this->thread->mwindow->defaults->update("DEFAULT_BATCHLOADPATH", filewindow.get_submitted_path());
+	}
 
+	this->thread->gui->flush();
+	startup_lock->lock("BatchRenderLoadList::run");
+	gui = 0;
+	startup_lock->unlock();
+}
+
+int BatchRenderLoadList::keypress_event() {
+	if (get_keypress() == 'o' || 
+	    get_keypress() == 'O') return handle_event();
+	return 0;
+}
 
 BatchRenderList::BatchRenderList(BatchRenderThread *thread, 
 	int x, 
