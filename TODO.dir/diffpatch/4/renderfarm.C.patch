--- cinecutie/renderfarm.C	2008-07-21 21:14:01.000000000 +0200
+++ /home/user/cinecutie/cinecutie/renderfarm.C	2010-02-19 22:19:11.998570756 +0100
@@ -20,7 +20,6 @@
  */
 
 #include "asset.h"
-#include "bcsignals.h"
 #include "brender.h"
 #include "clip.h"
 #include "condition.h"
@@ -158,7 +157,7 @@
 }
 
 
-int RenderFarmServerThread::open_client(const char *hostname, int port)
+int RenderFarmServerThread::open_client(char *hostname, int port)
 {
 	int socket_fd = -1;
 	int result = 0;
@@ -324,7 +323,6 @@
 {
 	int bytes_read = 0;
 	int offset = 0;
-//printf("RenderFarmServerThread::read_socket 1\n");
 	watchdog->begin_request();
 	while(len > 0 && bytes_read >= 0)
 	{
@@ -341,18 +339,13 @@
 			break;
 	}
 	watchdog->end_request();
-//printf("RenderFarmServerThread::read_socket 10\n");
 
 	return offset;
 }
 
 int RenderFarmServerThread::write_socket(char *data, int len)
 {
-//printf("RenderFarmServerThread::write_socket 1\n");
-	int result = write(socket_fd, data, len);
-//printf("RenderFarmServerThread::write_socket 10\n");
-
-	return result;
+	return write(socket_fd, data, len);
 }
 
 void RenderFarmServerThread::reallocate_buffer(int size)
@@ -384,6 +377,7 @@
 //	fs_server->initialize();
 
 
+
 // Send command to run package renderer.
 	write_int64(RENDERFARM_PACKAGES);
 
@@ -413,7 +407,6 @@
 
 // Get accompanying buffer
 		bytes_read = read_socket((char*)buffer, request_size);
-
 //printf("RenderFarmServerThread::run 2 %d %lld %d\n", request_id, request_size, bytes_read);
 		if(bytes_read != request_size)
 		{
@@ -599,6 +592,8 @@
 		STORE_INT32(package->video_end);
 		int use_brender = (server->brender ? 1 : 0);
 		STORE_INT32(use_brender);
+		STORE_INT32(package->audio_do);
+		STORE_INT32(package->video_do);
 
 		int len = i;
 		i = 0;
@@ -710,19 +705,19 @@
 
 		int result = request_complete->timed_lock(RENDERFARM_TIMEOUT * 1000000, 
 			"RenderFarmWatchdog::run");
-//printf("RenderFarmWatchdog::run 1 %d\n", result);
 
 		if(result)
 		{
 			if(client)
 			{
-				printf("RenderFarmWatchdog::run 1 killing client pid %d\n", client->pid);
+				printf("RenderFarmWatchdog::run 1 killing pid %d\n", client->pid);
+//				client->cancel();
 				kill(client->pid, SIGKILL);
 			}
 			else
 			if(server)
 			{
-				printf("RenderFarmWatchdog::run 1 killing server thread %p\n", server);
+				printf("RenderFarmWatchdog::run 1 killing thread %p\n", server);
 				server->cancel();
 				unsigned char buffer[4];
 				buffer[0] = 1;
