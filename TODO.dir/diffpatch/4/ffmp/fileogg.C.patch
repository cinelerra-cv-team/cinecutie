--- cinecutie/fileogg.C	2008-10-11 17:46:25.000000000 +0200
+++ /home/user/cinecutie/cinecutie/fileogg.C	2010-02-19 22:19:11.958569362 +0100
@@ -23,7 +23,6 @@
 #include "bcsignals.h"
 #include "byteorder.h"
 #include "clip.h"
-#include "cmodel_permutation.h"
 #include "edit.h"
 #include "file.h"
 #include "fileogg.h"
@@ -34,6 +33,9 @@
 #include "quicktime.h"
 #include "vframe.h"
 #include "videodevice.inc"
+#include "cmodel_permutation.h"
+#include "interlacemodes.h"
+#include "mainerror.h"
 
 #include <sys/types.h>
 #include <sys/stat.h>
@@ -42,6 +44,10 @@
 #include <string.h>
 #include <errno.h>
 
+// Needed for packaging engine
+#include "preferences.h"
+#include "render.h"
+
 #define READ_SIZE 66000
 
 /* This code was aspired by ffmpeg2theora */
@@ -55,6 +61,7 @@
 		asset->format = FILE_OGG;
 	asset->byte_order = 0;
 	reset_parameters();
+	final_write = 1;
 }
 
 FileOGG::~FileOGG()
@@ -76,6 +83,10 @@
 			vorbis_info_clear(&tf->vi);
 			vorbis_comment_clear(&tf->vc);
 		}
+		if (tf->vpage)
+			free(tf->vpage);
+		if (tf->apage)
+			free(tf->apage);
 		delete tf;
 	}
 	if (temp_frame) delete temp_frame;
@@ -166,15 +177,16 @@
 		}
 		else if (ret < 0)
 		{
-			printf("FileOGG: Taking page out on nonsynced stream!\n");
+			eprintf("FileOGG: Taking page out on nonsynced stream!\n");
 			return ret;
 			
 		} else
 		{
 			// need more data for page
-			if ((ret = read_buffer(in, sw, READ_SIZE)) == 0) 
+			if (read_buffer(in, sw, READ_SIZE) == 0) 
 			{
-				printf("FileOGG: There is no more data in the file we are reading from\n");
+// FIXME We should report that just in some situations... sometimes we go to the end
+//				printf("FileOGG: There is no more data in the file we are reading from\n");
 				return 0;  // No more data
 			}
 		}
@@ -212,8 +224,7 @@
 	if (!tf)
 	{
 		tf = new theoraframes_info_t;
-		tf->audiosync = 0;
-		tf->videosync = 0;
+		memset(tf, 0, sizeof(*tf));
 	}
 
 
@@ -223,7 +234,7 @@
 
 		if((stream = fopen(asset->path, "w+b")) == 0)
 		{
-			perror(_("FileOGG::open_file rdwr"));
+			eprintf("Error while opening \"%s\" for writing. %m\n", asset->path);
 			return 1;
 		}
 
@@ -238,8 +249,8 @@
 		tf->vpage_buffer_length = 0;
 		tf->apage = NULL;
 		tf->vpage = NULL;
-	    tf->v_pkg=0;
-    	tf->a_pkg=0;
+		tf->v_pkg=0;
+		tf->a_pkg=0;
 
 
 		/* yayness.  Set up Ogg output stream */
@@ -257,7 +268,9 @@
 			tf->ti.width = ((asset->width + 15) >>4)<<4; // round up to the nearest multiple of 16 
 			tf->ti.height = ((asset->height + 15) >>4)<<4; // round up to the nearest multiple of 16
 			if (tf->ti.width != tf->ti.frame_width || tf->ti.height != tf->ti.frame_height)
-				printf("FileOGG: WARNING: Encoding theora when width or height are not dividable by 16 is suboptimal\n");
+			{
+				eprintf("WARNING: Encoding theora when width or height are not dividable by 16 is suboptimal\n");
+			}
 			
 			tf->ti.offset_x = 0;
 			tf->ti.offset_y = tf->ti.height - tf->ti.frame_height;
@@ -305,7 +318,7 @@
 					
 			if (theora_encode_init (&tf->td, &tf->ti))
 			{
-				printf("FileOGG: initialization of theora codec failed\n");
+				eprintf("(FileOGG:file_open) initialization of theora codec failed\n");
 			}
 		}
 		/* init theora done */
@@ -340,14 +353,16 @@
 
 			if (ret)
 			{
-				fprintf (stderr,
-					"The Vorbis encoder could not set up a mode according to\n"
-					"the requested quality or bitrate.\n\n");
+				eprintf("The Vorbis encoder could not set up a mode according to\n"
+							"the requested quality or bitrate.\n\n");
+
+				fclose (stream);
+				stream = 0;
 				return 1;
 			}
 
 			vorbis_comment_init (&tf->vc); // comment is cleared lateron 
-			vorbis_comment_add_tag (&tf->vc, (char*)"ENCODER", (char*)PACKAGE_STRING);
+			vorbis_comment_add_tag (&tf->vc, "ENCODER", PACKAGE_STRING);
 			/* set up the analysis state and auxiliary encoding storage */
 			vorbis_analysis_init (&tf->vd, &tf->vi);
 			vorbis_block_init (&tf->vd, &tf->vb);
@@ -364,7 +379,7 @@
 			ogg_stream_packetin (&tf->to, &tf->op);
 			if (ogg_stream_pageout (&tf->to, &tf->og) != 1)
 			{
-				fprintf (stderr, "Internal Ogg library error.\n");
+				eprintf("Internal Ogg library error.\n");
 				return 1;
 			}
 			fwrite (tf->og.header, 1, tf->og.header_len, stream);
@@ -372,7 +387,7 @@
 
 			/* create the remaining theora headers */
 			theora_comment_init (&tf->tc);
-			theora_comment_add_tag (&tf->tc, (char*)"ENCODER", (char*)PACKAGE_STRING);
+			theora_comment_add_tag (&tf->tc, "ENCODER", PACKAGE_STRING);
 			theora_encode_comment (&tf->tc, &tf->op);
 			ogg_stream_packetin (&tf->to, &tf->op);
 			theora_comment_clear(&tf->tc);
@@ -391,7 +406,7 @@
 			vorbis_comment_clear(&tf->vc);
 			if (ogg_stream_pageout (&tf->vo, &tf->og) != 1)
 			{
-				fprintf (stderr, "Internal Ogg library error.\n");
+				eprintf("Internal Ogg library error.\n");
 				return 1;
 			}
 			fwrite (tf->og.header, 1, tf->og.header_len, stream);
@@ -411,7 +426,7 @@
 			if (result < 0)
 			{
 				/* can't get here */
-				fprintf (stderr, "Internal Ogg library error.\n");
+				eprintf("Internal Ogg library error.\n");
 				return 1;
 			}
 			if (result == 0)
@@ -425,7 +440,7 @@
 			if (result < 0)
 			{
 				/* can't get here */
-				fprintf (stderr, "Internal Ogg library error.\n");
+				eprintf("Internal Ogg library error.\n");
 				return 1;
 			}
 			if (result == 0)
@@ -441,7 +456,7 @@
 
 		if((stream = fopen(asset->path, "rb")) == 0)
 		{
-			perror(_("FileOGG::open_file rdwr"));
+			eprintf("Error while opening %s for reading. %m\n", asset->path);
 			return 1;
 		}
 
@@ -528,7 +543,7 @@
 		/* fall through to non-bos page parsing */
 		}
 
-
+		
 		/* we're expecting more header packets. */
 		while((theora_p && theora_p < 3) || (vorbis_p && vorbis_p < 3))
 		{
@@ -539,12 +554,12 @@
 			{
 				if(ret < 0)
 				{
-					fprintf(stderr,"FileOGG: Error parsing Theora stream headers; corrupt stream?\n");
+					eprintf("Error parsing Theora stream headers; corrupt stream?\n");
 					return 1;
 				}
 				if(theora_decode_header(&tf->ti, &tf->tc, &tf->op))
 				{
-					printf("FileOGG: Error parsing Theora stream headers; corrupt stream?\n");
+					eprintf("Error parsing Theora stream headers; corrupt stream?\n");
 					return 1;
 				}
 				theora_p++;
@@ -557,12 +572,12 @@
 			{
 				if(ret<0)
 				{
-					fprintf(stderr,"FileOGG: Error parsing Vorbis stream headers; corrupt stream?\n");
+					eprintf("Error parsing Vorbis stream headers; corrupt stream?\n");
 					return 1;
 				}
 				if (vorbis_synthesis_headerin(&tf->vi, &tf->vc, &tf->op))
 				{
-					fprintf(stderr,"FileOGG: Error parsing Vorbis stream headers; corrupt stream?\n");
+					eprintf("Error parsing Vorbis stream headers; corrupt stream?\n");
 					return 1;
 				}
 				vorbis_p++;
@@ -570,7 +585,7 @@
 					break;
 			}
 
-			if (vorbis_p == 3 && theora_p == 3) 
+			if ((!vorbis_p || vorbis_p == 3) && (!theora_p || theora_p == 3)) 
 				break;
 			/* The header pages/packets will arrive before anything else we
 			    care about, or the stream is not obeying spec */
@@ -583,7 +598,7 @@
 
 			} else
 			{
-				fprintf(stderr,"FileOGG: End of file while searching for codec headers.\n");
+				eprintf("End of file while searching for codec headers.\n");
 				return 1;
 			}
 		}
@@ -624,9 +639,10 @@
 			theora_cmodel = BC_YUV420P;
 			
 			if(tf->ti.width!=tf->ti.frame_width || tf->ti.height!=tf->ti.frame_height)
-				printf("FileOGG::  Frame content is %dx%d with offset (%d,%d), We do not support this yet.\n",
-				tf->ti.frame_width, tf->ti.frame_height, tf->ti.offset_x, tf->ti.offset_y);
-
+			{
+				eprintf("Frame content is %dx%d with offset (%d,%d), We do not support this yet. You will get black border.\n",
+							tf->ti.frame_width, tf->ti.frame_height, tf->ti.offset_x, tf->ti.offset_y);
+			}
 			tf->videosync = new sync_window_t;
 			ogg_sync_init(&tf->videosync->sync);
 			tf->videosync->wlen = 0;
@@ -643,7 +659,7 @@
 				{
 					if (!ogg_get_next_page(tf->videosync, tf->to.serialno, &tf->videopage))
 					{
-						printf("FileOGG: Cannot find next page while looking for first non-header packet\n");
+						eprintf("Cannot find next page while looking for first non-header packet\n");
 						return 1;
 					}
 					ogg_stream_pagein(&tf->to, &tf->videopage);
@@ -657,7 +673,7 @@
 			{
 				if (ogg_page_granulepos(&tf->videopage) != -1)
 				{
-					printf("FileOGG: Broken ogg file - broken page: ogg_page_packets == 0 and granulepos != -1\n");
+					eprintf("Broken ogg file - broken page: ogg_page_packets == 0 and granulepos != -1\n");
 					return 1;
 				}
 				ogg_get_next_page(tf->videosync, tf->to.serialno, &tf->videopage);
@@ -678,6 +694,9 @@
 // Don't want a user configured frame rate to get destroyed
 			if(!asset->frame_rate)
 				asset->frame_rate = fps;
+// All theora material is noninterlaced by definition
+			if(!asset->interlace_mode)
+				asset->interlace_mode = BC_ILACE_MODE_NOTINTERLACED;
 
 	/*		ogg_get_page_of_frame(tf->videosync, tf->to.serialno, &og, 0 +start_frame);
 			ogg_get_page_of_frame(tf->videosync, tf->to.serialno, &og, 1 +start_frame);
@@ -945,6 +964,15 @@
 	return (ogg_get_next_page(sw, serialno, og));
 }
 
+int FileOGG::ogg_seek_to_databegin(sync_window_t *sw, long serialno)
+{
+	
+//	printf("FileOGG:: Seeking to first page at %lli\n", filedata_begin);
+	read_buffer_at(stream, sw, READ_SIZE, filedata_begin);
+// we don't even need to sync since we _know_ it is right
+	return (0);
+}
+
 int FileOGG::ogg_get_next_page(sync_window_t *sw, long serialno, ogg_page *og)
 {
 	while (take_page_out_autoadvance(stream, sw, og) > 0)
@@ -990,7 +1018,7 @@
 // First make an educated guess about position
 	if (sample >= asset->audio_length + start_sample)
 	{
-		printf("FileOGG: Illegal seek beyond end of samples\n");
+		eprintf("Illegal seek beyond end of samples\n");
 		return 0;
 	}
 	off_t educated_guess = filedata_begin + (file_length - filedata_begin) * (sample - start_sample) / asset->audio_length - READ_SIZE;
@@ -1038,7 +1066,7 @@
 }
 
 // seeks, so next sample returned will be the correct one
-// sample here is still the vorbis sample number (= cinelerra sample number + start_sample)
+// sample here is still the vorbis sample number (= cinecutie sample number + start_sample)
 // reinits the decoding engine
 
 int FileOGG::ogg_seek_to_sample(sync_window_t *sw, long serialno, int64_t sample)
@@ -1050,7 +1078,8 @@
 //	printf("Calling get page of sample\n");
 	if (!ogg_get_page_of_sample(sw, serialno, &og, sample))
 	{
-		printf("FileOGG: Seeking to sample's page failed\n");
+		eprintf("Seeking to sample's page failed\n");
+
 		return 0;
 	}
 //	printf("Pagepos: %lli\n", sw->file_pagepos);
@@ -1069,7 +1098,7 @@
 		{
 			if (!ogg_get_next_page(sw, serialno, &og))
 			{
-				printf("FileOGG: Cannot find next page while seeking\n");
+				eprintf("Cannot find next page while seeking\n");
 				return 0;
 			}
 			ogg_stream_pagein(&tf->vo, &og);
@@ -1085,6 +1114,10 @@
 				current_comming_sample += vorbis_synthesis_pcmout(&tf->vd, NULL);
 				if (current_comming_sample > sample)
 				{
+					if (previous_comming_sample > sample)
+					{
+						eprintf("Ogg decoding error while seeking sample\n");
+					}
 					vorbis_synthesis_read(&tf->vd, (sample - previous_comming_sample));
 //					printf("WE GOT IT, samples already decoded: %li\n", vorbis_synthesis_pcmout(&tf->vd,NULL));
 					return 1; // YAY next sample read is going to be ours, sexy!
@@ -1105,7 +1138,7 @@
 				vorbis_synthesis_blockin(&tf->vd, &tf->vb);
 				if (vorbis_synthesis_pcmout(&tf->vd, NULL) != 0)
 				{
-					printf("FileOGG: Something wrong while trying to seek\n");
+					eprintf("Something wrong while trying to seek\n");
 					return 0;
 				}
 			
@@ -1122,7 +1155,7 @@
 {
 	if (frame >= asset->video_length + start_frame)
 	{
-		printf("FileOGG: Illegal seek beyond end of frames\n");
+		eprintf("Illegal seek beyond end of frames\n");
 		return 0;
 	}
 //	printf("frame: %lli start frame: %lli\n", frame, start_frame);
@@ -1211,7 +1244,7 @@
 //	printf("Searching for the proper position to start decoding frame %lli\n", frame);
 	if (!ogg_get_page_of_frame(sw, serialno, &og, frame))
 	{
-		printf("FileOGG: Seeking to frame failed\n");
+		eprintf("Seeking to frame failed\n");
 		return 0;
 	}
 	// TODO: if the frame we are looking for continoues on the next page, we don't need to do this
@@ -1248,7 +1281,7 @@
 		// get the page where keyframe starts
 		if (!ogg_get_page_of_frame(sw, serialno, &og, iframe))
 		{
-			printf("FileOGG: Seeking to keyframe failed\n");
+			eprintf("Seeking to frame failed\n");
 			return 0;
 		}
 	}		
@@ -1268,7 +1301,7 @@
 		{
 			if (!ogg_get_next_page(sw, serialno, &og))
 			{
-				printf("FileOGG: Cannot find next page while seeking\n");
+				eprintf("Cannot find next page while seeking\n");
 				return 0;
 			}
 			ogg_stream_pagein(&tf->to, &og);
@@ -1299,7 +1332,7 @@
 	{
 
 		fclose(fd);
-		printf("Yay, we have an ogg file\n");
+//		printf("Yay, we have an ogg file\n");
 
 		return 1;
 	}
@@ -1315,11 +1348,13 @@
 
 	if (wr)
 	{
-		if (asset->audio_data)
-			write_samples_vorbis(0, 0, 1); // set eos
-		if (asset->video_data)
-			write_frames_theora(0, 1, 1); // set eos
-
+		if (final_write)
+		{
+			if (asset->audio_data)
+				write_samples_vorbis(0, 0, 1); // set eos
+			if (asset->video_data)
+				write_frames_theora(0, 1, 1); // set eos
+		}
 		flush_ogg(1); // flush all
 	
 		if (asset->audio_data)
@@ -1427,7 +1462,7 @@
 	{
 		if (!ogg_seek_to_keyframe(tf->videosync, tf->to.serialno, next_frame_position, &ogg_frame_position))
 		{
-			printf("FileOGG:: Error while seeking to frame's keyframe (frame: %lli, keyframe: %lli)\n", next_frame_position, ogg_frame_position);
+			eprintf("Error while seeking to frame's keyframe (frame: %lli, keyframe: %lli)\n", next_frame_position, ogg_frame_position);
 			return 1;
 		}
 //		printf("For frame: %lli, keyframe is: %lli\n", next_frame_position,ogg_frame_position);
@@ -1436,7 +1471,7 @@
 		ogg_frame_position --; // ogg_frame_position is at last decoded frame, so it will point right 
 		if (decode_frames <= 0) 
 		{
-			printf("FileOGG:: Error while seeking to keyframe, wrong keyframe number (frame: %lli, keyframe: %lli)\n", next_frame_position, ogg_frame_position);
+			eprintf("Error while seeking to keyframe, wrong keyframe number (frame: %lli, keyframe: %lli)\n", next_frame_position, ogg_frame_position);
 			return 1;
 			
 		}
@@ -1454,7 +1489,7 @@
 		{
 			if (!ogg_get_next_page(tf->videosync, tf->to.serialno, &og))
 			{
-				printf("FileOGG: Cannot find next page while seeking\n");
+				eprintf("Cannot find next page while seeking\n");
 				return 1;
 			}
 			ogg_stream_pagein(&tf->to, &og);
@@ -1462,7 +1497,7 @@
 		ogg_stream_packetout(&tf->to, &op);
 		if (expect_keyframe && !theora_packet_iskeyframe(&op))
 		{
-				printf("FileOGG: Expecting keyframe, but didn't get it\n");
+				eprintf("Expecting a keyframe, but didn't get it\n");
 			//	return 1; this is generally not a fatal error
 		}
 		expect_keyframe = 0;
@@ -1478,7 +1513,7 @@
 		int ret = theora_decode_YUVout (&tf->td, &yuv);
 		if (ret)
 		{
-			printf("FileOGG: theora_decode_YUVout failed with code %i\n", ret);
+			eprintf("theora_decode_YUVout() failed with code %i\n", ret);
 		}
 
 // Dirty magic 
@@ -1539,7 +1574,7 @@
 		{
 			if (!ogg_get_next_page(sw, serialno, &og))
 			{
-				printf("FileOGG: Cannot find next page while trying to decode more samples\n");
+				eprintf("Cannot find next page while trying to decode more samples\n");
 				return 0;
 			}
 			ogg_stream_pagein(&tf->vo, &og);
@@ -1579,7 +1614,7 @@
 
 	if(len > HISTORY_MAX)
 	{
-		printf("FileOGG::read_samples max samples=%d\n", HISTORY_MAX);
+		eprintf("max samples=%d\n", HISTORY_MAX);
 		return 1;
 	}
 
@@ -1640,7 +1675,7 @@
 	{
 		if (hole_start < 0 || hole_len <= 0 || hole_absstart < 0)
 		{
-			printf("FileOGG: Error at finding out what to read from file\n");
+			eprintf("Error at finding out which range to read from file\n");
 			return 1;
 		}
 		
@@ -1662,7 +1697,7 @@
 			ogg_sample_position = hole_absstart;
 			if (!ogg_seek_to_sample(tf->audiosync, tf->vo.serialno, ogg_sample_position))
 			{
-				printf("FileOGG:: Error while seeking to sample\n");
+				eprintf("Error while seeking to sample\n");
 				return 1;
 			}
 		}
@@ -1679,21 +1714,17 @@
 
 			int i, j;
 //			printf("takeout samples: %lli, samples_read: %lli\n", takeout_samples, samples_read);
-
-			if(waiting_samples)
+			for(int i = 0; i < asset->channels; i++)
 			{
-				for(int i = 0; i < asset->channels; i++)
+				float *input = vorbis_buffer[i];
+				float *output = pcm_history[i] + hole_start;
+				// TODO: use memcpy
+				for(int j = 0; j < takeout_samples ; j++)
 				{
-					float *input = vorbis_buffer[i];
-					float *output = pcm_history[i] + hole_start;
-					// TODO: use memcpy
-					for(int j = 0; j < takeout_samples ; j++)
-					{
-						output[j] = input[j];
-					}
-				}                                                                   
-			}
-
+					output[j] = input[j];
+				}
+			}                                                                   
+			
 			vorbis_synthesis_read(&tf->vd, takeout_samples);
 			samples_read += takeout_samples;
 			ogg_sample_position += takeout_samples;
@@ -1713,10 +1744,7 @@
 	// now we can be sure our history is correct, just copy it out
 	if (next_sample_position < history_start || next_sample_position + len > history_start + history_size)
 	{
-		printf("FileOGG:: History not aligned properly \n");
-		printf("\tnext_sample_position: %lli, length: %i\n", next_sample_position, len);
-		printf("\thistory_start: %lli, length: %i\n", history_start, history_size);
-		
+		eprintf("History not aligned properly \n\tnext_sample_position: %lli, length: %i\n\thistory_start: %lli, length: %i\n", next_sample_position, len, history_start, history_size);
 		return 1;
 	}
 	float *input = pcm_history[file->current_channel] + next_sample_position - history_start;
@@ -1730,28 +1758,30 @@
 
 int FileOGG::write_audio_page()
 {
-  int ret;
+	int ret;
 
-  ret = fwrite(tf->apage, 1, tf->apage_len, stream);
-  if(ret < tf->apage_len) {
-    fprintf(stderr,"error writing audio page\n"); 
-  }
-  tf->apage_valid = 0;
-  tf->a_pkg -= ogg_page_packets((ogg_page *)&tf->apage);
-  return ret;
+	ret = fwrite(tf->apage, 1, tf->apage_len, stream);
+	if(ret < tf->apage_len) 
+	{
+		eprintf("error writing audio page\n");
+	}
+	tf->apage_valid = 0;
+	tf->a_pkg -= ogg_page_packets((ogg_page *)&tf->apage);
+	return ret;
 }
 
 int FileOGG::write_video_page()
 {
-  int ret;
+	int ret;
 
-  ret = fwrite(tf->vpage, 1, tf->vpage_len, stream);
-  if(ret < tf->vpage_len) {
-    fprintf(stderr,"error writing video page\n");
-  }
-  tf->vpage_valid = 0;
-  tf->v_pkg -= ogg_page_packets((ogg_page *)&tf->vpage);
-  return ret;
+	ret = fwrite(tf->vpage, 1, tf->vpage_len, stream);
+	if(ret < tf->vpage_len) 
+	{
+		eprintf("error writing video page\n");
+	}
+	tf->vpage_valid = 0;
+	tf->v_pkg -= ogg_page_packets((ogg_page *)&tf->vpage);
+	return ret;
 }
 
 void FileOGG::flush_ogg (int e_o_s)
@@ -1925,8 +1955,8 @@
 			int ret = theora_encode_YUVin (&tf->td, &yuv);
 			if (ret)
 			{
-				printf("FileOGG: theora_encode_YUVin failed with code %i\n", ret);
-				printf("yuv_buffer: y_width: %i, y_height: %i, y_stride: %i, uv_width: %i, uv_height: %i, uv_stride: %i\n",
+				eprintf("theora_encode_YUVin() failed with code %i\nyuv_buffer: y_width: %i, y_height: %i, y_stride: %i, uv_width: %i, uv_height: %i, uv_stride: %i\n", 
+					ret,
 					yuv.y_width,
 					yuv.y_height,
 					yuv.y_stride,
@@ -1934,6 +1964,7 @@
 					yuv.uv_height,
 					yuv.uv_stride);
 			}
+			
 			while(theora_encode_packetout (&tf->td, e_o_s, &tf->op)) {
 				flush_lock->lock();
 				ogg_stream_packetin (&tf->to, &tf->op);
@@ -2015,7 +2046,7 @@
 
 }
 
-void OGGConfigAudio::create_objects()
+int OGGConfigAudio::create_objects()
 {
 //	add_tool(new BC_Title(10, 10, _("There are no audio options for this format")));
 
@@ -2023,7 +2054,6 @@
 	int x1 = 150;
 	char string[BCTEXTLEN];
 
-	lock_window("OGGConfigAudio::create_objects");
 	add_tool(fixed_bitrate = new OGGVorbisFixedBitrate(x, y, this));
 	add_tool(variable_bitrate = new OGGVorbisVariableBitrate(x1, y, this));
 
@@ -2046,7 +2076,10 @@
 	add_subwindow(new BC_OKButton(this));
 	show_window();
 	flush();
-	unlock_window();
+	return 0;
+
+
+
 }
 
 int OGGConfigAudio::close_event()
@@ -2143,14 +2176,13 @@
 
 }
 
-void OGGConfigVideo::create_objects()
+int OGGConfigVideo::create_objects()
 {
 //	add_tool(new BC_Title(10, 10, _("There are no video options for this format")));
 	int x = 10, y = 10;
 	int x1 = x + 150;
 	int x2 = x + 300;
 
-	lock_window("OGGConfigVideo::create_objects");
 	add_subwindow(new BC_Title(x, y + 5, _("Bitrate:")));
 	add_subwindow(new OGGTheoraBitrate(x1, y, this));
 	add_subwindow(fixed_bitrate = new OGGTheoraFixedBitrate(x2, y, this));
@@ -2193,7 +2225,7 @@
 	
 
 	add_subwindow(new BC_OKButton(this));
-	unlock_window();
+	return 0;
 }
 
 
@@ -2306,3 +2338,358 @@
 }
 
 
+PackagingEngineOGG::PackagingEngineOGG()
+{
+	packages = 0;
+	default_asset = 0;
+}
+
+PackagingEngineOGG::~PackagingEngineOGG()
+{
+	if(packages)
+	{
+		for(int i = 0; i < total_packages; i++)
+			delete packages[i];
+		delete [] packages;
+	}
+	if (default_asset)
+		delete default_asset;
+}
+
+
+
+int PackagingEngineOGG::create_packages_single_farm(
+		EDL *edl,
+		Preferences *preferences,
+		Asset *default_asset, 
+		double total_start, 
+		double total_end)
+{
+	this->total_start = total_start;
+	this->total_end = total_end;
+	this->edl = edl;
+
+	this->preferences = preferences;
+
+// We make A COPY of the asset, because we set audio_data = 0 on local asset which is the same copy as default_asset... 
+// Should be taken care of somewhere else actually
+	this->default_asset = new Asset(*default_asset);
+
+	audio_start = Units::to_int64(total_start * default_asset->sample_rate);
+	video_start = Units::to_int64(total_start * default_asset->frame_rate);
+	audio_position = audio_start;
+	video_position = video_start;
+	audio_end = Units::to_int64(total_end * default_asset->sample_rate);
+	video_end = Units::to_int64(total_end * default_asset->frame_rate);
+	current_package = 0;
+
+	double total_len = total_end - total_start;
+//printf("PackageDispatcher::create_packages: %f / %d = %f\n", total_len, total_packages, package_len);
+
+	total_packages = 0;
+	if (default_asset->audio_data)
+		total_packages++;
+	if (default_asset->video_data)
+		total_packages += preferences->renderfarm_job_count;
+
+	packages = new RenderPackage*[total_packages];
+
+	int local_current_package = 0;
+	if (default_asset->audio_data)
+	{
+		packages[local_current_package] = new RenderPackage;
+		sprintf(packages[current_package]->path, "%s.audio", default_asset->path);
+		local_current_package++;
+	}
+	
+	if (default_asset->video_data)
+	{
+		video_package_len = (total_len) / preferences->renderfarm_job_count;
+		int current_number;    // The number being injected into the filename.
+		int number_start;      // Character in the filename path at which the number begins
+		int total_digits;      // Total number of digits including padding the user specified.
+
+		Render::get_starting_number(default_asset->path, 
+			current_number,
+			number_start, 
+			total_digits,
+			3);
+
+		for(int i = 0; i < preferences->renderfarm_job_count; i++)
+		{
+			RenderPackage *package = packages[local_current_package] = new RenderPackage;
+			Render::create_filename(package->path, 
+				default_asset->path, 
+				current_number,
+				total_digits,
+				number_start);
+			current_number++;
+			local_current_package++;
+		}
+	}
+}
+
+RenderPackage* PackagingEngineOGG::get_package_single_farm(double frames_per_second, 
+		int client_number,
+		int use_local_rate)
+{
+
+//printf("PackageDispatcher::get_package %ld %ld %ld %ld\n", audio_position, video_position, audio_end, video_end);
+	if (current_package == total_packages)
+		return 0;
+
+	RenderPackage *result = 0;
+	if (current_package == 0 && default_asset->audio_data)
+	{
+		result = packages[0];
+		result->audio_start = audio_start;
+		result->video_start = video_start;
+		result->audio_end = audio_end;
+		result->video_end = video_end;
+		result->audio_do = 1;
+		result->video_do = 0;
+	} else if (default_asset->video_data)
+	{
+		// Do not do any scaling according to node speed, so we know we can get evenly distributed 'forced' keyframes
+		result = packages[current_package];
+		result->audio_do = 0;
+		result->video_do = 1;
+
+		result->audio_start = audio_position;
+		result->video_start = video_position;
+		result->audio_end = audio_position + 
+			Units::round(video_package_len * default_asset->sample_rate);
+		result->video_end = video_position + 
+			Units::round(video_package_len * default_asset->frame_rate);
+
+// Last package... take it all!
+		if (current_package == total_packages -1 ) 
+		{
+			result->audio_end = audio_end;
+			result->video_end = video_end;
+		}
+
+		audio_position = result->audio_end;
+		video_position = result->video_end;
+
+	}
+	
+	current_package ++;
+	return result;
+
+}
+
+void PackagingEngineOGG::get_package_paths(ArrayList<char*> *path_list)
+{
+	for(int i = 0; i < total_packages; i++)
+	{
+		path_list->append(strdup(packages[i]->path));
+	}
+// We will mux to the the final file at the end!
+	path_list->append(strdup(default_asset->path));
+	path_list->set_free();
+}
+
+int64_t PackagingEngineOGG::get_progress_max()
+{
+	return Units::to_int64(default_asset->sample_rate * 
+			(total_end - total_start)) * 2+
+		Units::to_int64(preferences->render_preroll * 
+			total_packages *
+			default_asset->sample_rate);
+}
+
+int PackagingEngineOGG::packages_are_done()
+{
+
+
+// Mux audio and video into one file	
+
+// First fix our asset... have to workaround the bug of corruption of local asset
+//	Render::check_asset(edl, *default_asset);
+
+	Asset *video_asset, *audio_asset;
+	File *audio_file_gen, *video_file_gen;
+	FileOGG *video_file, *audio_file;
+	ogg_stream_state audio_in_stream, video_in_stream;
+	
+	int local_current_package = 0;
+	if (default_asset->audio_data)
+	{
+		audio_asset = new Asset(packages[local_current_package]->path);
+		local_current_package++;
+
+		audio_file_gen = new File();
+		audio_file_gen->open_file(preferences, 
+			audio_asset, 
+			1, //rd 
+			0, //wr
+			0, //base sample rate
+			0); // base_frame rate
+		audio_file = (FileOGG*) audio_file_gen->file;
+		ogg_stream_init(&audio_in_stream, audio_file->tf->vo.serialno);
+		audio_file->ogg_seek_to_databegin(audio_file->tf->audiosync, audio_file->tf->vo.serialno);
+	}
+
+	if (default_asset->video_data)
+	{
+		video_asset = new Asset(packages[local_current_package]->path);
+		local_current_package++;
+
+		video_file_gen = new File();
+		video_file_gen->open_file(preferences, 
+			video_asset, 
+			1, //rd 
+			0, //wr
+			0, //base sample rate
+			0); // base_frame rate
+		video_file = (FileOGG*) video_file_gen->file;
+		ogg_stream_init(&video_in_stream, video_file->tf->to.serialno);
+		video_file->ogg_seek_to_databegin(video_file->tf->videosync, video_file->tf->to.serialno);
+	}
+
+// Output file
+	File *output_file_gen = new File();
+	output_file_gen->open_file(preferences,
+		default_asset,
+		0,
+		1,
+		default_asset->sample_rate, 
+		default_asset->frame_rate);
+	FileOGG *output_file = (FileOGG*) output_file_gen->file;
+
+	ogg_page og;    /* one Ogg bitstream page.  Vorbis packets are inside */
+	ogg_packet op;  /* one raw packet of data for decode */
+
+
+	int audio_ready = default_asset->audio_data;
+	int video_ready = default_asset->video_data;
+	int64_t video_packetno = 1;
+	int64_t audio_packetno = 1;
+	int64_t frame_offset = 0;
+	int64_t current_frame = 0;
+	while ((default_asset->audio_data && audio_ready) || (default_asset->video_data && video_ready))
+	{
+		if (video_ready)
+		{
+			while (ogg_stream_packetpeek(&video_in_stream, NULL) != 1) // get as many pages as needed for one package
+			{
+				if (!video_file->ogg_get_next_page(video_file->tf->videosync, video_file->tf->to.serialno, &video_file->tf->videopage))
+				{
+					// We are at the end of our file, see if it is more and open more if there is
+					if (local_current_package < total_packages)
+					{
+						frame_offset = current_frame +1;
+						ogg_stream_clear(&video_in_stream);
+						video_file_gen->close_file();
+						delete video_file_gen;
+						delete video_asset;
+						video_asset = new Asset(packages[local_current_package]->path);
+						local_current_package++;
+
+						video_file_gen = new File();
+						video_file_gen->open_file(preferences, 
+							video_asset, 
+							1, //rd 
+							0, //wr
+							0, //base sample rate
+							0); // base_frame rate
+						video_file = (FileOGG*) video_file_gen->file;
+						ogg_stream_init(&video_in_stream, video_file->tf->to.serialno);
+						int64_t fp   = 0;
+						video_file->ogg_seek_to_databegin(video_file->tf->videosync, video_file->tf->to.serialno);
+
+					} else
+						video_ready = 0;
+					break;
+				}
+				ogg_stream_pagein(&video_in_stream, &video_file->tf->videopage);
+			}
+			while (ogg_stream_packetpeek(&video_in_stream, NULL) == 1) // get all packets out of the page
+			{
+				ogg_stream_packetout(&video_in_stream, &op);
+				if (local_current_package != total_packages) // keep it from closing the stream
+					op.e_o_s = 0;
+				if (video_packetno != 1)		     // if this is not the first video package do not start with b_o_s
+					op.b_o_s = 0;
+				else
+					op.b_o_s = 1;
+				op.packetno = video_packetno;
+				video_packetno ++;
+				int64_t granulepos = op.granulepos;
+				if (granulepos != -1)
+				{
+				// Fix granulepos!	
+					int64_t rel_iframe = granulepos >> video_file->theora_keyframe_granule_shift;
+					int64_t rel_pframe = granulepos - (rel_iframe << video_file->theora_keyframe_granule_shift);
+					int64_t rel_current_frame = rel_iframe + rel_pframe;
+					current_frame = frame_offset + rel_current_frame;
+					int64_t abs_iframe = current_frame - rel_pframe;
+					
+					op.granulepos = (abs_iframe << video_file->theora_keyframe_granule_shift) + rel_pframe;
+					
+//					printf("iframe: %i, pframe: %i, granulepos: %i, op.packetno %lli, abs_iframe: %i\n", rel_iframe, rel_pframe, granulepos, op.packetno, abs_iframe);				
+				
+				}
+				ogg_stream_packetin (&output_file->tf->to, &op);
+				output_file->tf->v_pkg++; 
+			}
+		}
+		if (audio_ready)
+		{
+			while (ogg_stream_packetpeek(&audio_in_stream, NULL) != 1) // get as many pages as needed for one package
+			{
+				if (!audio_file->ogg_get_next_page(audio_file->tf->audiosync, audio_file->tf->vo.serialno, &audio_file->tf->audiopage))
+				{
+					audio_ready = 0;
+					break;
+				}
+				ogg_stream_pagein(&audio_in_stream, &audio_file->tf->audiopage);
+			}
+			while (ogg_stream_packetpeek(&audio_in_stream, NULL) == 1) // get all packets out of the page
+			{
+				ogg_stream_packetout(&audio_in_stream, &op);
+				ogg_stream_packetin (&output_file->tf->vo, &op);
+				audio_packetno++;
+				output_file->tf->a_pkg++; 
+			}
+		}
+		
+		output_file->flush_ogg(0);
+		
+	
+	}
+	
+// flush_ogg(1) is called on file closing time...	
+//	output_file->flush_ogg(1);
+
+// Just prevent thet write_samples and write_frames are called
+	output_file->final_write = 0;
+		
+	if (default_asset->audio_data)
+	{
+		ogg_stream_clear(&audio_in_stream);
+		audio_file_gen->close_file();
+		delete audio_file_gen;
+		delete audio_asset;
+	}
+	if (default_asset->video_data)
+	{
+		ogg_stream_clear(&video_in_stream);
+		video_file_gen->close_file();
+		delete video_file_gen;
+		delete video_asset;
+	}
+
+	output_file_gen->close_file();
+	delete output_file_gen;
+
+// Now delete the temp files
+	for(int i = 0; i < total_packages; i++)
+		unlink(packages[i]->path);
+
+	return 0;
+}
+
+
+
