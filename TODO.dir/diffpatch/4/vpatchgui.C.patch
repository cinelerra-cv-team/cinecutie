--- cinecutie/vpatchgui.C	2008-07-21 21:14:01.000000000 +0200
+++ /home/user/cinecutie/cinecutie/vpatchgui.C	2010-02-19 22:19:12.018571035 +0100
@@ -61,9 +61,9 @@
 	if(mode) delete mode;
 }
 
-void VPatchGUI::create_objects()
+int VPatchGUI::create_objects()
 {
-	update(x, y);
+	return update(x, y);
 }
 
 int VPatchGUI::reposition(int x, int y)
@@ -112,7 +112,10 @@
 				PLAY_FORWARD, 
 				previous, 
 				next);
-			fade->update(value);
+			fade->update(fade->get_w(),
+				     value, 
+				     mwindow->edl->local_session->automation_mins[AUTOGROUPTYPE_VIDEO_FADE],
+				     mwindow->edl->local_session->automation_maxs[AUTOGROUPTYPE_VIDEO_FADE]);
 //			fade->update((int)fade->get_keyframe(mwindow, this)->value);
 		}
 	}
@@ -185,8 +188,8 @@
 			0,
 			w, 
 			w, 
-			0, 
-			MAX_VIDEO_FADE, 
+			mwindow->edl->local_session->automation_mins[AUTOGROUPTYPE_VIDEO_FADE],
+			mwindow->edl->local_session->automation_maxs[AUTOGROUPTYPE_VIDEO_FADE], 
 			(int64_t)get_keyframe(mwindow, patch)->value)
 {
 	this->mwindow = mwindow;
@@ -200,14 +203,13 @@
 	Autos *fade_autos = patch->vtrack->automation->autos[AUTOMATION_FADE];
 	int need_undo = !fade_autos->auto_exists_for_editing(position);
 
-	mwindow->undo->update_undo_before(_("fade"), need_undo ? 0 : this);
 
 	current = (FloatAuto*)fade_autos->get_auto_for_editing(position);
 
 	float result = get_value() - current->value;
 	current->value = get_value();
 
-	mwindow->undo->update_undo_after(_("fade"), LOAD_AUTOMATION);
+	mwindow->undo->update_undo(_("fade"), LOAD_AUTOMATION, need_undo ? 0 : this);
 
 	return result;
 }
@@ -224,7 +226,7 @@
 
 	float change = update_edl();
 
-	if(patch->track->gang && patch->track->record) 
+	if(patch->track->gang) 
 		patch->patchbay->synchronize_faders(change, TRACK_VIDEO, patch->track);
 
 	patch->change_source = 0;
@@ -293,12 +295,11 @@
 	Autos *mode_autos = patch->vtrack->automation->autos[AUTOMATION_MODE];
 	int need_undo = !mode_autos->auto_exists_for_editing(position);
 
-	mwindow->undo->update_undo_before(_("mode"), need_undo ? 0 : this);
 
 	current = (IntAuto*)mode_autos->get_auto_for_editing(position);
 	current->value = mode;
 
-	mwindow->undo->update_undo_after(_("mode"), LOAD_AUTOMATION);
+	mwindow->undo->update_undo(_("mode"), LOAD_AUTOMATION, need_undo ? 0 : this);
 
 	mwindow->sync_parameters(CHANGE_PARAMS);
 
@@ -325,7 +326,7 @@
 }
 
 
-void VModePatch::create_objects()
+int VModePatch::create_objects()
 {
 	add_item(new VModePatchItem(this, mode_to_text(TRANSFER_NORMAL), TRANSFER_NORMAL));
 	add_item(new VModePatchItem(this, mode_to_text(TRANSFER_ADDITION), TRANSFER_ADDITION));
@@ -334,6 +335,7 @@
 	add_item(new VModePatchItem(this, mode_to_text(TRANSFER_DIVIDE), TRANSFER_DIVIDE));
 	add_item(new VModePatchItem(this, mode_to_text(TRANSFER_REPLACE), TRANSFER_REPLACE));
 	add_item(new VModePatchItem(this, mode_to_text(TRANSFER_MAX), TRANSFER_MAX));
+	return 0;
 }
 
 void VModePatch::update(int mode)
@@ -347,7 +349,7 @@
 }
 
 
-const char* VModePatch::mode_to_text(int mode)
+char* VModePatch::mode_to_text(int mode)
 {
 	switch(mode)
 	{
@@ -391,7 +393,7 @@
 
 
 
-VModePatchItem::VModePatchItem(VModePatch *popup, const char *text, int mode)
+VModePatchItem::VModePatchItem(VModePatch *popup, char *text, int mode)
  : BC_MenuItem(text)
 {
 	this->popup = popup;
