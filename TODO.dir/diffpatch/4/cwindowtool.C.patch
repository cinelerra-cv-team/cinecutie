--- cinecutie/cwindowtool.C	2008-10-11 17:46:25.000000000 +0200
+++ /home/user/cinecutie/cinecutie/cwindowtool.C	2010-02-19 22:19:11.878577328 +0100
@@ -35,7 +35,6 @@
 #include "language.h"
 #include "localsession.h"
 #include "mainsession.h"
-#include "mainundo.h"
 #include "maskauto.h"
 #include "maskautos.h"
 #include "mutex.h"
@@ -46,7 +45,6 @@
 #include "trackcanvas.h"
 #include "transportque.h"
 
-#define SQR(x) ((x) * (x))
 
 CWindowTool::CWindowTool(MWindow *mwindow, CWindowGUI *gui)
  : Thread()
@@ -99,9 +97,6 @@
 			case CWINDOW_MASK:
 				new_gui = new CWindowMaskGUI(mwindow, this);
 				break;
-			case CWINDOW_RULER:
-				new_gui = new CWindowRulerGUI(mwindow, this);
-				break;
 			default:
 				result = 1;
 				stop_tool();
@@ -121,9 +116,7 @@
 			
 			if(mwindow->edl->session->tool_window &&
 				mwindow->session->show_cwindow) tool_gui->show_window();
-			tool_gui->lock_window("CWindowTool::start_tool 1");
 			tool_gui->flush();
-			tool_gui->unlock_window();
 			
 			
 // Signal thread to run next tool GUI
@@ -211,18 +204,6 @@
 	}
 }
 
-void CWindowTool::raise_window()
-{
-	if(tool_gui)
-	{
-		gui->unlock_window();
-		tool_gui->lock_window("CWindowTool::raise_window");
-		tool_gui->raise_window();
-		tool_gui->unlock_window();
-		gui->lock_window("CWindowTool::raise_window");
-	}
-}
-
 void CWindowTool::update_values()
 {
 	tool_gui_lock->lock("CWindowTool::update_values");
@@ -244,7 +225,7 @@
 
 CWindowToolGUI::CWindowToolGUI(MWindow *mwindow, 
 	CWindowTool *thread, 
-	const char *title,
+	char *title,
 	int w, 
 	int h)
  : BC_Window(title,
@@ -283,7 +264,7 @@
 
 	lock_window("CWindowToolGUI::close_event");
 	return 1;
-;}
+}
 
 int CWindowToolGUI::keypress_event()
 {
@@ -304,7 +285,7 @@
 
 
 
-CWindowCoord::CWindowCoord(CWindowToolGUI *gui, int x, int y, float value)
+CWindowCoord::CWindowCoord(CWindowToolGUI *gui, int x, int y, float value, int log_increment = 0)
  : BC_TumbleTextBox(gui, 
 		(float)value,
 		(float)-65536,
@@ -314,6 +295,7 @@
 		100)
 {
 	this->gui = gui;
+	set_log_floatincrement(log_increment);
 }
 
 CWindowCoord::CWindowCoord(CWindowToolGUI *gui, int x, int y, int value)
@@ -384,7 +366,6 @@
 	BC_TumbleTextBox *textbox;
 	BC_Title *title;
 
-	lock_window("CWindowCropGUI::create_objects");
 	int column1 = 0;
 	int pad = MAX(BC_TextBox::calculate_h(this, MEDIUMFONT, 1, 1), 
 		BC_Title::calculate_h(this, "X")) + 5;
@@ -430,7 +411,6 @@
 		mwindow->edl->session->crop_y2 - 
 			mwindow->edl->session->crop_y1);
 	height->create_objects();
-	unlock_window();
 }
 
 void CWindowCropGUI::handle_event()
@@ -495,7 +475,6 @@
 	int x = 10;
 	int y = 10;
 	int x2 = 70;
-	lock_window("CWindowEyedropGUI::create_objects");
 	BC_Title *title1, *title2, *title3;
 	add_subwindow(title1 = new BC_Title(x, y, "Red:"));
 	y += title1->get_h() + 5;
@@ -510,8 +489,7 @@
 
 	y = blue->get_y() + blue->get_h() + 5;
 	add_subwindow(sample = new BC_SubWindow(x, y, 50, 50));
-	update();
-	unlock_window();
+	update();	
 }
 
 void CWindowEyedropGUI::update()
@@ -560,7 +538,6 @@
 	BC_Title *title;
 	BC_Button *button;
 
-	lock_window("CWindowCameraGUI::create_objects");
 	if(track)
 	{
 		mwindow->cwindow->calculate_affected_autos(&x_auto,
@@ -596,8 +573,10 @@
 	this->z = new CWindowCoord(this, 
 		x, 
 		y, 
-		z_auto ? z_auto->value : (float)1);
+		z_auto ? z_auto->value : (float)1,
+		1);
 	this->z->create_objects();
+	this->z->set_boundaries((float).0001, (float)256.0);
 
 	y += 30;
 	x1 = 10;
@@ -614,7 +593,7 @@
 	add_subwindow(button = new CWindowCameraMiddle(mwindow, this, x1, y));
 	x1 += button->get_w();
 	add_subwindow(button = new CWindowCameraBottom(mwindow, this, x1, y));
-	unlock_window();
+
 }
 
 void CWindowCameraGUI::update_preview()
@@ -640,7 +619,6 @@
 	Track *track = mwindow->cwindow->calculate_affected_track();
 	if(track)
 	{
-		mwindow->undo->update_undo_before(_("camera"), this);
 		if(event_caller == x)
 		{
 			x_auto = (FloatAuto*)mwindow->cwindow->calculate_affected_auto(
@@ -688,8 +666,6 @@
 				update_preview();
 			}
 		}
-
-		mwindow->undo->update_undo_after(_("camera"), LOAD_ALL);
 	}
 }
 
@@ -766,11 +742,9 @@
 
 		if(w && h)
 		{
-			mwindow->undo->update_undo_before(_("camera"), 0);
 			x_auto->value = 
 				(double)track->track_w / z_auto->value / 2 - 
 				(double)w / 2;
-			mwindow->undo->update_undo_after(_("camera"), LOAD_ALL);
 			gui->update();
 			gui->update_preview();
 		}
@@ -798,11 +772,9 @@
 
 	if(x_auto)
 	{
-		mwindow->undo->update_undo_before(_("camera"), 0);
 		x_auto->value = 0;
 		gui->update();
 		gui->update_preview();
-		mwindow->undo->update_undo_after(_("camera"), LOAD_ALL);
 	}
 
 	return 1;
@@ -843,12 +815,10 @@
 
 		if(w && h)
 		{
-			mwindow->undo->update_undo_before(_("camera"), 0);
 			x_auto->value = -((double)track->track_w / z_auto->value / 2 - 
 				(double)w / 2);
 			gui->update();
 			gui->update_preview();
-			mwindow->undo->update_undo_after(_("camera"), LOAD_ALL);
 		}
 	}
 
@@ -890,12 +860,10 @@
 
 		if(w && h)
 		{
-			mwindow->undo->update_undo_before(_("camera"), 0);
 			y_auto->value = (double)track->track_h / z_auto->value / 2 - 
 				(double)h / 2;
 			gui->update();
 			gui->update_preview();
-			mwindow->undo->update_undo_after(_("camera"), LOAD_ALL);
 		}
 	}
 
@@ -920,11 +888,9 @@
 
 	if(y_auto)
 	{
-		mwindow->undo->update_undo_before(_("camera"), 0);
 		y_auto->value = 0;
 		gui->update();
 		gui->update_preview();
-		mwindow->undo->update_undo_after(_("camera"), LOAD_ALL);
 	}
 
 	return 1;
@@ -965,12 +931,10 @@
 
 		if(w && h)
 		{
-			mwindow->undo->update_undo_before(_("camera"), 0);
 			y_auto->value = -((double)track->track_h / z_auto->value / 2 - 
 				(double)h / 2);
 			gui->update();
 			gui->update_preview();
-			mwindow->undo->update_undo_after(_("camera"), LOAD_ALL);
 		}
 	}
 
@@ -1014,7 +978,6 @@
 	BC_Title *title;
 	BC_Button *button;
 
-	lock_window("CWindowProjectorGUI::create_objects");
 	if(track)
 	{
 		mwindow->cwindow->calculate_affected_autos(&x_auto,
@@ -1050,8 +1013,10 @@
 	this->z = new CWindowCoord(this, 
 		x, 
 		y, 
-		z_auto ? z_auto->value : (float)1);
+		z_auto ? z_auto->value : (float)1,
+		1);
 	this->z->create_objects();
+	this->z->set_boundaries((float).0001, (float)256.0);
 
 	y += 30;
 	x1 = 10;
@@ -1068,7 +1033,7 @@
 	add_subwindow(button = new CWindowProjectorMiddle(mwindow, this, x1, y));
 	x1 += button->get_w();
 	add_subwindow(button = new CWindowProjectorBottom(mwindow, this, x1, y));
-	unlock_window();
+
 }
 
 void CWindowProjectorGUI::update_preview()
@@ -1093,7 +1058,6 @@
 
 	if(track)
 	{
-		mwindow->undo->update_undo_before(_("projector"), this);
 		if(event_caller == x)
 		{
 			x_auto = (FloatAuto*)mwindow->cwindow->calculate_affected_auto(
@@ -1141,7 +1105,6 @@
 				update_preview();
 			}
 		}
-		mwindow->undo->update_undo_after(_("projector"), LOAD_ALL);
 	}
 }
 
@@ -1244,12 +1207,10 @@
 	}
 	if(x_auto && z_auto)
 	{
-		mwindow->undo->update_undo_before(_("projector"), 0);
 		x_auto->value = (double)track->track_w * z_auto->value / 2 - 
 			(double)mwindow->edl->session->output_w / 2;
 		gui->update();
 		gui->update_preview();
-		mwindow->undo->update_undo_after(_("projector"), LOAD_ALL);
 	}
 
 	return 1;
@@ -1274,11 +1235,9 @@
 
 	if(x_auto)
 	{
-		mwindow->undo->update_undo_before(_("projector"), 0);
 		x_auto->value = 0;
 		gui->update();
 		gui->update_preview();
-		mwindow->undo->update_undo_after(_("projector"), LOAD_ALL);
 	}
 
 	return 1;
@@ -1311,12 +1270,10 @@
 
 	if(x_auto && z_auto)
 	{
-		mwindow->undo->update_undo_before(_("projector"), 0);
 		x_auto->value = -((double)track->track_w * z_auto->value / 2 - 
 			(double)mwindow->edl->session->output_w / 2);
 		gui->update();
 		gui->update_preview();
-		mwindow->undo->update_undo_after(_("projector"), LOAD_ALL);
 	}
 
 	return 1;
@@ -1349,12 +1306,10 @@
 
 	if(y_auto && z_auto)
 	{
-		mwindow->undo->update_undo_before(_("projector"), 0);
 		y_auto->value = (double)track->track_h * z_auto->value / 2 - 
 			(double)mwindow->edl->session->output_h / 2;
 		gui->update();
 		gui->update_preview();
-		mwindow->undo->update_undo_after(_("projector"), LOAD_ALL);
 	}
 
 	return 1;
@@ -1378,11 +1333,9 @@
 
 	if(y_auto)
 	{
-		mwindow->undo->update_undo_before(_("projector"), 0);
 		y_auto->value = 0;
 		gui->update();
 		gui->update_preview();
-		mwindow->undo->update_undo_after(_("projector"), LOAD_ALL);
 	}
 
 	return 1;
@@ -1415,12 +1368,10 @@
 
 	if(y_auto && z_auto)
 	{
-		mwindow->undo->update_undo_before(_("projector"), 0);
 		y_auto->value = -((double)track->track_h * z_auto->value / 2 - 
 			(double)mwindow->edl->session->output_h / 2);
 		gui->update();
 		gui->update_preview();
-		mwindow->undo->update_undo_after(_("projector"), LOAD_ALL);
 	}
 
 	return 1;
@@ -1437,7 +1388,7 @@
 	CWindowToolGUI *gui, 
 	int x, 
 	int y,
-	const char *text)
+	char *text)
  : BC_PopupMenu(x,
  	y,
 	200,
@@ -1483,34 +1434,20 @@
 
 int CWindowMaskMode::handle_event()
 {
-	MaskAutos *autos;
 	MaskAuto *keyframe;
 	Track *track;
 	MaskPoint *point;
 	SubMask *mask;
-// Get existing keyframe
 	((CWindowMaskGUI*)gui)->get_keyframe(track, 
-		autos,
 		keyframe, 
 		mask,
 		point,
 		0);
+
 	if(track)
 	{
-		mwindow->undo->update_undo_before(_("mask mode"), 0);
-#ifdef USE_KEYFRAME_SPANNING
-// Create temp keyframe
-		MaskAuto temp_keyframe(mwindow->edl, autos);
-		temp_keyframe.copy_data(keyframe);
-// Update parameter
-		temp_keyframe.mode = text_to_mode(get_text());
-// Commit change to span of keyframes
-		autos->update_parameter(&temp_keyframe);
-#else
-		((MaskAuto*)autos->default_auto)->mode = 
+		((MaskAuto*)track->automation->autos[AUTOMATION_MASK]->default_auto)->mode = 
 			text_to_mode(get_text());
-#endif
-		mwindow->undo->update_undo_after(_("mask mode"), LOAD_AUTOMATION);
 	}
 
 //printf("CWindowMaskMode::handle_event 1\n");
@@ -1537,46 +1474,16 @@
 
 int CWindowMaskDelete::handle_event()
 {
-	MaskAutos *autos;
 	MaskAuto *keyframe;
-	Track *track;
+	Track *track = mwindow->cwindow->calculate_affected_track();
 	MaskPoint *point;
 	SubMask *mask;
 
-// Get existing keyframe
-	((CWindowMaskGUI*)gui)->get_keyframe(track, 
-		autos,
-		keyframe, 
-		mask,
-		point,
-		0);
 
 	if(track)
 	{
-		mwindow->undo->update_undo_before(_("mask delete"), 0);
-
-#ifdef USE_KEYFRAME_SPANNING
-// Create temp keyframe
-		MaskAuto temp_keyframe(mwindow->edl, autos);
-		temp_keyframe.copy_data(keyframe);
-// Update parameter
-		SubMask *submask = temp_keyframe.get_submask(mwindow->edl->session->cwindow_mask);
-		for(int i = mwindow->cwindow->gui->affected_point;
-			i < submask->points.total - 1;
-			i++)
-		{
-			*submask->points.values[i] = *submask->points.values[i + 1];
-		}
-
-		if(submask->points.total)
-		{
-			submask->points.remove_object(
-				submask->points.values[submask->points.total - 1]);
-		}
-// Commit change to span of keyframes
-		((MaskAutos*)track->automation->autos[AUTOMATION_MASK])->update_parameter(&temp_keyframe);
-#else
-		for(MaskAuto *current = (MaskAuto*)autos->default_auto;
+		MaskAutos *mask_autos = (MaskAutos*)track->automation->autos[AUTOMATION_MASK];
+		for(MaskAuto *current = (MaskAuto*)mask_autos->default_auto;
 			current; )
 		{
 			SubMask *submask = current->get_submask(mwindow->edl->session->cwindow_mask);
@@ -1597,112 +1504,135 @@
 			}
 
 
-			if(current == (MaskAuto*)autos->default_auto)
-				current = (MaskAuto*)autos->first;
+			if(current == (MaskAuto*)mask_autos->default_auto)
+				current = (MaskAuto*)mask_autos->first;
 			else
 				current = (MaskAuto*)NEXT;
 		}
-#endif
-
 		gui->update();
 		gui->update_preview();
-		mwindow->undo->update_undo_after(_("mask delete"), LOAD_AUTOMATION);
 	}
 
 
-	return 1;
-}
-
-int CWindowMaskDelete::keypress_event()
-{
-	if(get_keypress() == BACKSPACE ||
-		get_keypress() == DELETE) 
-		return handle_event();
-	return 0;
-}
-
-
-// CWindowMaskCycleNext::CWindowMaskCycleNext(MWindow *mwindow, CWindowToolGUI *gui, int x, int y)
-//  : BC_GenericButton(x, y, _("Cycle next"))
-// {
-// 	this->mwindow = mwindow;
-// 	this->gui = gui;
-// }
-// int CWindowMaskCycleNext::handle_event()
-// {
-// 	MaskAuto *keyframe;
-// 	Track *track;
-// 	MaskPoint *point;
-// 	SubMask *mask;
 // 	((CWindowMaskGUI*)gui)->get_keyframe(track, 
-// 		keyframe,
-// 		mask,  
+// 		keyframe, 
+// 		mask, 
 // 		point,
 // 		0);
-// 
-// 	MaskPoint *temp;
-// 
-// // Should apply to all keyframes
-// 	if(keyframe && mask->points.total)
+
+// Need to apply to every keyframe
+	
+// 	if(keyframe)
 // 	{
-// 		temp = mask->points.values[0];
-// 
-// 		for(int i = 0; i < mask->points.total - 1; i++)
+// 		for(int i = mwindow->cwindow->gui->affected_point;
+// 			i < mask->points.total - 1;
+// 			i++)
 // 		{
-// 			mask->points.values[i] = mask->points.values[i + 1];
+// 			*mask->points.values[i] = *mask->points.values[i + 1];
 // 		}
-// 		mask->points.values[mask->points.total - 1] = temp;
-// 
-// 		mwindow->cwindow->gui->affected_point--;
-// 		if(mwindow->cwindow->gui->affected_point < 0)
-// 			mwindow->cwindow->gui->affected_point = mask->points.total - 1;
-// 
-// 		gui->update();
-// 		gui->update_preview();
-// 	}
-// 	
-// 	return 1;
-// }
-// 
-// CWindowMaskCyclePrev::CWindowMaskCyclePrev(MWindow *mwindow, CWindowToolGUI *gui, int x, int y)
-//  : BC_GenericButton(x, y, _("Cycle prev"))
-// {
-// 	this->mwindow = mwindow;
-// 	this->gui = gui;
-// }
-// int CWindowMaskCyclePrev::handle_event()
-// {
-// 	MaskAuto *keyframe;
-// 	Track *track;
-// 	MaskPoint *point;
-// 	SubMask *mask;
-// 	((CWindowMaskGUI*)gui)->get_keyframe(track, 
-// 		keyframe,
-// 		mask, 
-// 		point,
-// 		0);
-// 
-// // Should apply to all keyframes
-// 	MaskPoint *temp;
-// 	if(keyframe && mask->points.total)
-// 	{
-// 		temp = mask->points.values[mask->points.total - 1];
-// 
-// 		for(int i = mask->points.total - 1; i > 0; i--)
+// 		
+// 		if(mask->points.total)
 // 		{
-// 			mask->points.values[i] = mask->points.values[i - 1];
+// 			mask->points.remove_object(mask->points.values[mask->points.total - 1]);
 // 		}
-// 		mask->points.values[0] = temp;
-// 
-// 		mwindow->cwindow->gui->affected_point++;
-// 		if(mwindow->cwindow->gui->affected_point >= mask->points.total)
-// 			mwindow->cwindow->gui->affected_point = 0;
 // 
 // 		gui->update();
 // 		gui->update_preview();
 // 	}
-// 	return 1;
-// }
+
+	return 1;
+}
+
+int CWindowMaskDelete::keypress_event()
+{
+	if(get_keypress() == BACKSPACE ||
+		get_keypress() == DELETE) 
+		return handle_event();
+	return 0;
+}
+
+
+CWindowMaskCycleNext::CWindowMaskCycleNext(MWindow *mwindow, CWindowToolGUI *gui, int x, int y)
+ : BC_GenericButton(x, y, _("Cycle next"))
+{
+	this->mwindow = mwindow;
+	this->gui = gui;
+}
+int CWindowMaskCycleNext::handle_event()
+{
+	MaskAuto *keyframe;
+	Track *track;
+	MaskPoint *point;
+	SubMask *mask;
+	((CWindowMaskGUI*)gui)->get_keyframe(track, 
+		keyframe,
+		mask,  
+		point,
+		0);
+
+	MaskPoint *temp;
+
+// Should apply to all keyframes
+	if(keyframe && mask->points.total)
+	{
+		temp = mask->points.values[0];
+
+		for(int i = 0; i < mask->points.total - 1; i++)
+		{
+			mask->points.values[i] = mask->points.values[i + 1];
+		}
+		mask->points.values[mask->points.total - 1] = temp;
+
+		mwindow->cwindow->gui->affected_point--;
+		if(mwindow->cwindow->gui->affected_point < 0)
+			mwindow->cwindow->gui->affected_point = mask->points.total - 1;
+
+		gui->update();
+		gui->update_preview();
+	}
+	
+	return 1;
+}
+
+CWindowMaskCyclePrev::CWindowMaskCyclePrev(MWindow *mwindow, CWindowToolGUI *gui, int x, int y)
+ : BC_GenericButton(x, y, _("Cycle prev"))
+{
+	this->mwindow = mwindow;
+	this->gui = gui;
+}
+int CWindowMaskCyclePrev::handle_event()
+{
+	MaskAuto *keyframe;
+	Track *track;
+	MaskPoint *point;
+	SubMask *mask;
+	((CWindowMaskGUI*)gui)->get_keyframe(track, 
+		keyframe,
+		mask, 
+		point,
+		0);
+
+// Should apply to all keyframes
+	MaskPoint *temp;
+	if(keyframe && mask->points.total)
+	{
+		temp = mask->points.values[mask->points.total - 1];
+
+		for(int i = mask->points.total - 1; i > 0; i--)
+		{
+			mask->points.values[i] = mask->points.values[i - 1];
+		}
+		mask->points.values[0] = temp;
+
+		mwindow->cwindow->gui->affected_point++;
+		if(mwindow->cwindow->gui->affected_point >= mask->points.total)
+			mwindow->cwindow->gui->affected_point = 0;
+
+		gui->update();
+		gui->update_preview();
+	}
+	return 1;
+}
 
 
 CWindowMaskNumber::CWindowMaskNumber(MWindow *mwindow, 
@@ -1754,44 +1684,18 @@
 }
 int CWindowMaskFeather::handle_event()
 {
-	MaskAutos *autos;
 	MaskAuto *keyframe;
 	Track *track;
 	MaskPoint *point;
 	SubMask *mask;
-
-	mwindow->undo->update_undo_before(_("mask feather"), this);
-
-// Get existing keyframe
 	((CWindowMaskGUI*)gui)->get_keyframe(track, 
-		autos,
 		keyframe,
 		mask, 
 		point,
-#ifdef USE_KEYFRAME_SPANNING
-		0);
-#else
 		1);
-#endif
-
-	if(track)
-	{	
-#ifdef USE_KEYFRAME_SPANNING
-// Create temp keyframe
-		MaskAuto temp_keyframe(mwindow->edl, autos);
-		temp_keyframe.copy_data(keyframe);
-// Update parameter
-		temp_keyframe.feather = atof(get_text());
-// Commit change to span of keyframes
-		autos->update_parameter(&temp_keyframe);
-#else
-		keyframe->feather = atof(get_text());
-#endif
-
-		gui->update_preview();
-	}
 
-	mwindow->undo->update_undo_after(_("mask feather"), LOAD_AUTOMATION);
+	keyframe->feather = atof(get_text());
+	gui->update_preview();
 	return 1;
 }
 
@@ -1815,46 +1719,50 @@
 
 int CWindowMaskValue::handle_event()
 {
-	MaskAutos *autos;
 	MaskAuto *keyframe;
 	Track *track;
 	MaskPoint *point;
 	SubMask *mask;
-	
-	mwindow->undo->update_undo_before(_("mask value"), this);
 	((CWindowMaskGUI*)gui)->get_keyframe(track, 
-		autos,
 		keyframe,
 		mask, 
 		point,
-#ifdef USE_KEYFRAME_SPANNING
-		0);
-#else
 		1);
-#endif
-
-	if(track)
-	{
-#ifdef USE_KEYFRAME_SPANNING
-// Create temp keyframe
-		MaskAuto temp_keyframe(mwindow->edl, autos);
-		temp_keyframe.copy_data(keyframe);
-// Update parameter
-		temp_keyframe.value = get_value();
-// Commit change to span of keyframes
-		autos->update_parameter(&temp_keyframe);
-#else
-		keyframe->value = get_value();
-#endif
-	}
 
+	keyframe->value = get_value();
 	gui->update_preview();
-	mwindow->undo->update_undo_after(_("mask value"), LOAD_AUTOMATION);
 	return 1;
 }
 
 
 
+CWindowMaskBeforePlugins::CWindowMaskBeforePlugins(CWindowToolGUI *gui, int x, int y)
+ : BC_CheckBox(x, 
+ 	y, 
+	1, 
+	_("Apply mask before plugins"))
+{
+	this->gui = gui;
+}
+
+int CWindowMaskBeforePlugins::handle_event()
+{
+	MaskAuto *keyframe;
+	Track *track;
+	MaskPoint *point;
+	SubMask *mask;
+	((CWindowMaskGUI*)gui)->get_keyframe(track, 
+		keyframe,
+		mask, 
+		point,
+		1);
+
+	if (keyframe) {
+		keyframe->apply_before_plugins = get_value();
+		gui->update_preview();
+	}
+	return 1;
+}
 
 
 
@@ -1875,10 +1783,8 @@
 }
 CWindowMaskGUI::~CWindowMaskGUI()
 {
-	lock_window("CWindowMaskGUI::~CWindowMaskGUI");
 	delete number;
 	delete feather;
-	unlock_window();
 }
 
 void CWindowMaskGUI::create_objects()
@@ -1889,7 +1795,6 @@
 	if(track)
 		keyframe = (MaskAuto*)mwindow->cwindow->calculate_affected_auto(track->automation->autos[AUTOMATION_MASK], 0);
 
-	lock_window("CWindowMaskGUI::create_objects");
 	BC_Title *title;
 	add_subwindow(title = new BC_Title(x, y, _("Mode:")));
 	add_subwindow(mode = new CWindowMaskMode(mwindow, 
@@ -1934,28 +1839,30 @@
 		(float)0.0);
 	this->y->create_objects();
 
+	y += 30;
+//	add_subwindow(title = new BC_Title(x, y, _("Apply mask before plugins:")));
+	
+	add_subwindow(this->apply_before_plugins = new CWindowMaskBeforePlugins(this, 
+		10, 
+		y));
+//	this->apply_before_plugins->create_objects();
+
+
 	update();
-	unlock_window();
 }
 
 void CWindowMaskGUI::get_keyframe(Track* &track, 
-	MaskAutos* &autos,
 	MaskAuto* &keyframe, 
 	SubMask* &mask, 
 	MaskPoint* &point,
 	int create_it)
 {
-	autos = 0;
 	keyframe = 0;
-
 	track = mwindow->cwindow->calculate_affected_track();
 	if(track)
-	{
-		autos = (MaskAutos*)track->automation->autos[AUTOMATION_MASK];
-		keyframe = (MaskAuto*)mwindow->cwindow->calculate_affected_auto(
-			autos, 
-			create_it);
-	}
+		keyframe = (MaskAuto*)mwindow->cwindow->calculate_affected_auto(track->automation->autos[AUTOMATION_MASK], create_it);
+	else
+		keyframe = 0;
 
 	if(keyframe)
 		mask = keyframe->get_submask(mwindow->edl->session->cwindow_mask);
@@ -1968,43 +1875,37 @@
 		if(mwindow->cwindow->gui->affected_point < mask->points.total &&
 			mwindow->cwindow->gui->affected_point >= 0)
 		{
-			point = mask->points.values[mwindow->cwindow->gui->affected_point];
+			point =  mask->points.values[mwindow->cwindow->gui->affected_point];
 		}
 	}
 }
 
 void CWindowMaskGUI::update()
 {
-	MaskAutos *autos;
 	MaskAuto *keyframe;
 	Track *track;
 	MaskPoint *point;
 	SubMask *mask;
 //printf("CWindowMaskGUI::update 1\n");
 	get_keyframe(track, 
-		autos,
 		keyframe, 
 		mask,
 		point,
 		0);
 
-	double position = mwindow->edl->local_session->get_selectionstart(1);
-	position = mwindow->edl->align_to_frame(position, 0);
-	if(track)
+//printf("CWindowMaskGUI::update 1\n");
+	if(point)
 	{
-		int64_t position_i = track->to_units(position, 0);
-
-		if(point)
-		{
-			x->update(point->x);
-			y->update(point->y);
-		}
+		x->update(point->x);
+		y->update(point->y);
+	}
+//printf("CWindowMaskGUI::update 1\n");
 
-		if(mask)
-		{
-			feather->update((int64_t)autos->get_feather(position_i, PLAY_FORWARD));
-			value->update((int64_t)autos->get_value(position_i, PLAY_FORWARD));
-		}
+	if(mask)
+	{
+		feather->update((int64_t)keyframe->feather);
+		value->update((int64_t)keyframe->value);
+		apply_before_plugins->update((int64_t)keyframe->apply_before_plugins);
 	}
 //printf("CWindowMaskGUI::update 1\n");
 
@@ -2013,62 +1914,31 @@
 //printf("CWindowMaskGUI::update 1\n");
 	if(track)
 	{
-#ifdef USE_KEYFRAME_SPANNING
 		mode->set_text(
-			CWindowMaskMode::mode_to_text(keyframe->mode));
-#else
-		mode->set_text(
-			CWindowMaskMode::mode_to_text(((MaskAuto*)autos->default_auto)->mode));
-#endif
+			CWindowMaskMode::mode_to_text(((MaskAuto*)track->automation->autos[AUTOMATION_MASK]->default_auto)->mode));
 	}
 //printf("CWindowMaskGUI::update 2\n");
 }
 
 void CWindowMaskGUI::handle_event()
 {
-	MaskAutos *autos;
 	MaskAuto *keyframe;
 	Track *track;
 	MaskPoint *point;
 	SubMask *mask;
 	get_keyframe(track, 
-		autos,
 		keyframe, 
 		mask,
 		point,
 		0);
 
-	mwindow->undo->update_undo_before(_("mask point"), this);
-
 	if(point)
 	{
-#ifdef USE_KEYFRAME_SPANNING
-// Create temp keyframe
-		MaskAuto temp_keyframe(mwindow->edl, autos);
-		temp_keyframe.copy_data(keyframe);
-// Get affected point in temp keyframe
-		mask = temp_keyframe.get_submask(mwindow->edl->session->cwindow_mask);
-		if(mwindow->cwindow->gui->affected_point < mask->points.total &&
-			mwindow->cwindow->gui->affected_point >= 0)
-		{
-			point = mask->points.values[mwindow->cwindow->gui->affected_point];
-		}
-
-		if(point)
-		{
-			point->x = atof(x->get_text());
-			point->y = atof(y->get_text());
-// Commit to spanned keyframes
-			autos->update_parameter(&temp_keyframe);
-		}
-#else
 		point->x = atof(x->get_text());
 		point->y = atof(y->get_text());
-#endif
 	}
 
 	update_preview();
-	mwindow->undo->update_undo_after(_("mask point"), LOAD_AUTOMATION);
 }
 
 void CWindowMaskGUI::update_preview()
@@ -2091,102 +1961,5 @@
 
 
 
-CWindowRulerGUI::CWindowRulerGUI(MWindow *mwindow, CWindowTool *thread)
- : CWindowToolGUI(mwindow, 
- 	thread,
-	PROGRAM_NAME ": Ruler",
-	320,
-	240)
-{
-}
-
-CWindowRulerGUI::~CWindowRulerGUI()
-{
-}
-
-void CWindowRulerGUI::create_objects()
-{
-	int x = 10, y = 10;
-	BC_Title *title;
-
-	lock_window("CWindowRulerGUI::create_objects");
-	add_subwindow(title = new BC_Title(x, y, "Current:"));
-	add_subwindow(current = new BC_Title(x + title->get_w() + 10, y, ""));
-	y += title->get_h() + 5;
-	
-	add_subwindow(title = new BC_Title(x, y, "Point 1:"));
-	add_subwindow(point1 = new BC_Title(x + title->get_w() + 10, y, ""));
-	y += title->get_h() + 5;
-
-	add_subwindow(title = new BC_Title(x, y, "Point 2:"));
-	add_subwindow(point2 = new BC_Title(x + title->get_w() + 10, y, ""));
-	y += title->get_h() + 5;
-
-	add_subwindow(title = new BC_Title(x, y, "Distance:"));
-	add_subwindow(distance = new BC_Title(x + title->get_w() + 10, y, ""));
-	y += title->get_h() + 5;
-	add_subwindow(title = new BC_Title(x, y, "Angle:"));
-	add_subwindow(angle = new BC_Title(x + title->get_w() + 10, y, ""));
-	y += title->get_h() + 10;
-	char string[BCTEXTLEN];
-	sprintf(string, _("Press Ctrl to lock ruler to the\nnearest 45%c angle."), 0xb0);
-	add_subwindow(title = new BC_Title(x, 
-		y, 
-		string));
-	y += title->get_h() + 10;
-	sprintf(string, _("Press Alt to translate the ruler."));
-	add_subwindow(title = new BC_Title(x, 
-		y, 
-		string));
-	update();
-	unlock_window();
-}
-
-void CWindowRulerGUI::update()
-{
-	double distance_value = 
-		sqrt(SQR(mwindow->edl->session->ruler_x2 - mwindow->edl->session->ruler_x1) +
-		SQR(mwindow->edl->session->ruler_y2 - mwindow->edl->session->ruler_y1));
-	double angle_value = atan((mwindow->edl->session->ruler_y2 - mwindow->edl->session->ruler_y1) /
-		(mwindow->edl->session->ruler_x2 - mwindow->edl->session->ruler_x1)) * 
-		360 /
-		2 / 
-		M_PI;
-
-	if(EQUIV(distance_value, 0.0)) 
-	{
-		angle_value = 0.0;
-	}
-	else
-	if(angle_value < 0)
-	{
-		angle_value *= -1;
-	}
-
-	char string[BCTEXTLEN];
-	sprintf(string, "%d, %d", 
-		mwindow->session->cwindow_output_x,
-		mwindow->session->cwindow_output_y);
-	current->update(string);
-	sprintf(string, "%.0f, %.0f", 
-		mwindow->edl->session->ruler_x1,
-		mwindow->edl->session->ruler_y1);
-	point1->update(string);
-	sprintf(string, "%.0f, %.0f", 
-		mwindow->edl->session->ruler_x2,
-		mwindow->edl->session->ruler_y2);
-	point2->update(string);
-
-	sprintf(string, "%0.01f pixels", distance_value);
-	distance->update(string);
-	sprintf(string, "%0.02f %c", angle_value, 0xb0);
-	angle->update(string);
-}
-
-void CWindowRulerGUI::handle_event()
-{
-}
-
-
 
 
