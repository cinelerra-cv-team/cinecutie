--- cinecutie/mwindowmove.C	2008-07-21 21:14:00.000000000 +0200
+++ /home/user/cinecutie/cinecutie/mwindowmove.C	2010-02-19 22:19:11.978570999 +0100
@@ -19,6 +19,7 @@
  * 
  */
 
+#include "automation.h"
 #include "clip.h"
 #include "cplayback.h"
 #include "cwindow.h"
@@ -50,39 +51,69 @@
 }
 
 
-int MWindow::expand_sample()
+int MWindow::expand_sample(double fixed_sample)
 {
 	if(gui)
 	{
 		if(edl->local_session->zoom_sample < 0x100000)
 		{
-			edl->local_session->zoom_sample *= 2;
-			gui->zoombar->sample_zoom->update(edl->local_session->zoom_sample);
-			zoom_sample(edl->local_session->zoom_sample);
+			int64_t new_zoom_sample = edl->local_session->zoom_sample * 2;
+			int64_t view_start;
+			if (fixed_sample < 0)
+				view_start = -1;
+			else
+			{
+				double viewstart_position = (double)edl->local_session->view_start * 
+					edl->local_session->zoom_sample /
+					edl->session->sample_rate * 2 - fixed_sample;
+				view_start = Units::round(viewstart_position *
+					edl->session->sample_rate /
+					new_zoom_sample);
+			}
+
+			zoom_sample(new_zoom_sample, view_start);
 		}
 	}
 	return 0;
 }
 
-int MWindow::zoom_in_sample()
+int MWindow::zoom_in_sample(double fixed_sample)
 {
 	if(gui)
 	{
 		if(edl->local_session->zoom_sample > 1)
 		{
-			edl->local_session->zoom_sample /= 2;
-			gui->zoombar->sample_zoom->update(edl->local_session->zoom_sample);
-			zoom_sample(edl->local_session->zoom_sample);
+			int64_t new_zoom_sample = edl->local_session->zoom_sample / 2;
+			int64_t view_start;
+			if (fixed_sample < 0)
+				view_start = -1;
+			else
+			{
+				double viewstart_position = (double)edl->local_session->view_start * 
+					edl->local_session->zoom_sample /
+					edl->session->sample_rate;
+				viewstart_position = viewstart_position + (fixed_sample - viewstart_position) / 2;
+
+				view_start = Units::round(viewstart_position *
+					edl->session->sample_rate /
+					new_zoom_sample);
+			}
+			
+			zoom_sample(new_zoom_sample, view_start);
 		}
 	}
 	return 0;
 }
 
-int MWindow::zoom_sample(int64_t zoom_sample)
+int MWindow::zoom_sample(int64_t zoom_sample, int64_t view_start)
 {
 	CLIP(zoom_sample, 1, 0x100000);
 	edl->local_session->zoom_sample = zoom_sample;
-	find_cursor();
+	if (view_start < 0)
+		find_cursor();
+	else
+		edl->local_session->view_start = view_start;
+ 			
 	gui->get_scrollbars();
 
 	if(!gui->samplescroll) edl->local_session->view_start = 0;
@@ -148,7 +179,7 @@
 }
 
 
-void MWindow::fit_autos()
+void MWindow::fit_autos(int doall)
 {
 	float min = 0, max = 0;
 	double start, end;
@@ -167,23 +198,51 @@
 		end = edl->local_session->get_selectionend(1);
 	}
 
-// Adjust min and max
-	edl->tracks->get_automation_extents(&min, &max, start, end);
-//printf("MWindow::fit_autos %f %f\n", min, max);
+	int forstart = edl->local_session->zoombar_showautotype;
+	int forend   = edl->local_session->zoombar_showautotype + 1;
+	
+	if (doall) {
+		forstart = 0;
+		forend   = AUTOGROUPTYPE_COUNT;
+	}
 
-// Pad
-	float range = max - min;
-// No automation visible
-	if(range < 0.001)
+	for (int i = forstart; i < forend; i++)
 	{
-		min -= 1;
-		max += 1;
+// Adjust min and max
+		edl->tracks->get_automation_extents(&min, &max, start, end, i);
+//printf("MWindow::fit_autos %d %f %f results in ", i, min, max);
+
+		float range = max - min;
+		switch (i) 
+		{
+		case AUTOGROUPTYPE_AUDIO_FADE:
+		case AUTOGROUPTYPE_VIDEO_FADE:
+			if (range < 0.1) {
+				min = MIN(min, edl->local_session->automation_mins[i]);
+				max = MAX(max, edl->local_session->automation_maxs[i]);
+			}
+			break;
+		case AUTOGROUPTYPE_ZOOM:
+			if (range < 0.001) {
+				min = floor(min*50)/100;
+				max = floor(max*200)/100;
+			}
+			break;
+		case AUTOGROUPTYPE_X:
+		case AUTOGROUPTYPE_Y:
+			if (range < 5) {
+				min = floor((min+max)/2) - 50;
+				max = floor((min+max)/2) + 50;
+			}
+			break;
+		}
+//printf("%f %f\n", min, max);
+		if (!Automation::autogrouptypes_fixedrange[i]) 
+		{
+			edl->local_session->automation_mins[i] = min;
+			edl->local_session->automation_maxs[i] = max;
+		}
 	}
-	float pad = range * 0.33;
-	min -= pad;
-	max += pad;
-	edl->local_session->automation_min = min;
-	edl->local_session->automation_max = max;
 
 // Show range in zoombar
 	gui->zoombar->update();
@@ -194,41 +253,101 @@
 }
 
 
-void MWindow::expand_autos()
-{
-	float range = edl->local_session->automation_max - 
-		edl->local_session->automation_min;
-	float center = range / 2 + 
-		edl->local_session->automation_min;
-	if(EQUIV(range, 0)) range = 0.002;
-	edl->local_session->automation_min = center - range;
-	edl->local_session->automation_max = center + range;
-	gui->zoombar->update_autozoom();
-	gui->canvas->draw_overlays();
-	gui->canvas->flash();
+void MWindow::change_currentautorange(int autogrouptype, int increment, int changemax) {
+	float val;
+	if (changemax) {
+		val = edl->local_session->automation_maxs[autogrouptype];
+	} else {
+		val = edl->local_session->automation_mins[autogrouptype];
+	}
+
+	if (increment) 
+	{
+		switch (autogrouptype) {
+		case AUTOGROUPTYPE_AUDIO_FADE:
+			val += 2;
+			break;
+		case AUTOGROUPTYPE_VIDEO_FADE:
+			val += 1;
+			break;
+		case AUTOGROUPTYPE_ZOOM:
+			if (val == 0) 
+				val = 0.001;
+			else 
+				val = val*2;
+			break;
+		case AUTOGROUPTYPE_X:
+		case AUTOGROUPTYPE_Y:
+			val = floor(val + 5);
+			break;
+		}
+	} 
+	else 
+	{ // decrement
+		switch (autogrouptype) {
+		case AUTOGROUPTYPE_AUDIO_FADE:
+			val -= 2;
+			break;
+		case AUTOGROUPTYPE_VIDEO_FADE:
+			val -= 1;
+			break;
+		case AUTOGROUPTYPE_ZOOM:
+			if (val > 0) val = val/2;
+			break;
+		case AUTOGROUPTYPE_X:
+		case AUTOGROUPTYPE_Y:
+			val = floor(val-5);
+			break;
+		}
+	}
+
+	AUTOMATIONVIEWCLAMPS(val, autogrouptype);
+
+	if (changemax) {
+		if (val > edl->local_session->automation_mins[autogrouptype])
+			edl->local_session->automation_maxs[autogrouptype] = val;
+	}
+	else
+	{
+		if (val < edl->local_session->automation_maxs[autogrouptype])
+			edl->local_session->automation_mins[autogrouptype] = val;
+	}
 }
 
-void MWindow::shrink_autos()
+
+void MWindow::expand_autos(int changeall, int domin, int domax)
 {
-	float range = edl->local_session->automation_max - 
-		edl->local_session->automation_min;
-	float center = range / 2 + 
-		edl->local_session->automation_min;
-	float new_range = range / 4;
-	edl->local_session->automation_min = center - new_range;
-	edl->local_session->automation_max = center + new_range;
+	if (changeall)
+		for (int i = 0; i < AUTOGROUPTYPE_COUNT; i++) {
+			if (domin) change_currentautorange(i, 1, 0);
+			if (domax) change_currentautorange(i, 1, 1);
+		}
+	else
+	{
+		if (domin) change_currentautorange(edl->local_session->zoombar_showautotype, 1, 0);
+		if (domax) change_currentautorange(edl->local_session->zoombar_showautotype, 1, 1);
+	}
 	gui->zoombar->update_autozoom();
 	gui->canvas->draw_overlays();
+	gui->patchbay->update();
 	gui->canvas->flash();
 }
 
-
-void MWindow::zoom_autos(float min, float max)
+void MWindow::shrink_autos(int changeall, int domin, int domax)
 {
-	edl->local_session->automation_min = min;
-	edl->local_session->automation_max = max;
+	if (changeall)
+		for (int i = 0; i < AUTOGROUPTYPE_COUNT; i++) {
+			if (domin) change_currentautorange(i, 0, 0);
+			if (domax) change_currentautorange(i, 0, 1);
+		}
+	else
+	{
+		if (domin) change_currentautorange(edl->local_session->zoombar_showautotype, 0, 0);
+		if (domax) change_currentautorange(edl->local_session->zoombar_showautotype, 0, 1);
+	}
 	gui->zoombar->update_autozoom();
 	gui->canvas->draw_overlays();
+	gui->patchbay->update();
 	gui->canvas->flash();
 }
 
@@ -319,7 +438,7 @@
 	gui->cursor->update();
 	gui->canvas->activate();
 	gui->zoombar->update();
-	cwindow->update(1, 0, 0, 0, 0);
+	cwindow->update(1, 0, 0, 0, 1);
 	return 0;
 }
 
@@ -346,7 +465,7 @@
 	gui->cursor->update();
 	gui->canvas->activate();
 	gui->zoombar->update();
-	cwindow->update(1, 0, 0, 0, 0);
+	cwindow->update(1, 0, 0, 0, 1);
 	return 0;
 }
 
@@ -396,29 +515,8 @@
 
 int MWindow::next_label(int shift_down)
 {
-	Label *current;
-	Labels *labels = edl->labels;
-
-// Test for label under cursor position
-	for(current = labels->first; 
-		current && !edl->equivalent(current->position, 
-			edl->local_session->get_selectionend(1)); 
-		current = NEXT)
-		;
-
-// Test for label before cursor position
-	if(!current)
-		for(current = labels->last;
-			current && current->position > edl->local_session->get_selectionend(1);
-			current = PREVIOUS)
-			;
-
-// Test for label after cursor position
-	if(!current)
-		current = labels->first;
-	else
-// Get next label
-		current = NEXT;
+	Label *current = edl->labels->next_label(
+			edl->local_session->get_selectionstart(1));
 
 	if(current)
 	{
@@ -429,6 +527,7 @@
 				edl->local_session->get_selectionend(1));
 
 		update_plugin_guis();
+		gui->patchbay->update();
 		if(edl->local_session->get_selectionend(1) >= 
 			(double)edl->local_session->view_start *
 			edl->local_session->zoom_sample /
@@ -443,19 +542,17 @@
 				edl->local_session->zoom_sample - 
 				gui->canvas->get_w() / 
 				2));
-			cwindow->update(1, 0, 0, 0, 0);
 		}
 		else
 		{
-			gui->patchbay->update();
 			gui->timebar->update();
 			gui->cursor->hide(0);
 			gui->cursor->draw(1);
 			gui->zoombar->update();
 			gui->canvas->flash();
 			gui->flush();
-			cwindow->update(1, 0, 0);
 		}
+		cwindow->update(1, 0, 0, 0, 1);
 	}
 	else
 	{
@@ -466,30 +563,8 @@
 
 int MWindow::prev_label(int shift_down)
 {
-	Label *current;
-	Labels *labels = edl->labels;
-
-// Test for label under cursor position
-	for(current = labels->first; 
-		current && !edl->equivalent(current->position, 
-			edl->local_session->get_selectionstart(1)); 
-		current = NEXT)
-		;
-
-// Test for label after cursor position
-	if(!current)
-		for(current = labels->first;
-			current && 
-				current->position < edl->local_session->get_selectionstart(1);
-			current = NEXT)
-			;
-
-// Test for label before cursor position
-	if(!current) 
-		current = labels->last;
-	else
-// Get previous label
-		current = PREVIOUS;
+	Label *current = edl->labels->prev_label(
+			edl->local_session->get_selectionstart(1));;
 
 	if(current)
 	{
@@ -498,6 +573,7 @@
 			edl->local_session->set_selectionend(edl->local_session->get_selectionstart(1));
 
 		update_plugin_guis();
+		gui->patchbay->update();
 // Scroll the display
 		if(edl->local_session->get_selectionstart(1) >= edl->local_session->view_start *
 			edl->local_session->zoom_sample /
@@ -513,20 +589,18 @@
 				edl->local_session->zoom_sample - 
 				gui->canvas->get_w() / 
 				2));
-			cwindow->update(1, 0, 0, 0, 0);
 		}
 		else
 // Don't scroll the display
 		{
-			gui->patchbay->update();
 			gui->timebar->update();
 			gui->cursor->hide(0);
 			gui->cursor->draw(1);
 			gui->zoombar->update();
 			gui->canvas->flash();
 			gui->flush();
-			cwindow->update(1, 0, 0);
 		}
+		cwindow->update(1, 0, 0, 0, 1);
 	}
 	else
 	{
@@ -570,6 +644,7 @@
 				edl->local_session->get_selectionend(1));
 
 		update_plugin_guis();
+		gui->patchbay->update();
 		if(edl->local_session->get_selectionend(1) >= 
 			(double)edl->local_session->view_start *
 			edl->local_session->zoom_sample /
@@ -584,19 +659,17 @@
 				edl->local_session->zoom_sample - 
 				gui->canvas->get_w() / 
 				2));
-			cwindow->update(1, 0, 0, 0, 0);
 		}
 		else
 		{
-			gui->patchbay->update();
 			gui->timebar->update();
 			gui->cursor->hide(0);
 			gui->cursor->draw(1);
 			gui->zoombar->update();
 			gui->canvas->flash();
 			gui->flush();
-			cwindow->update(1, 0, 0);
 		}
+		cwindow->update(1, 0, 0, 0, 1);
 	}
 	else
 	{
@@ -634,6 +707,7 @@
 			edl->local_session->set_selectionend(edl->local_session->get_selectionstart(1));
 
 		update_plugin_guis();
+		gui->patchbay->update();
 // Scroll the display
 		if(edl->local_session->get_selectionstart(1) >= edl->local_session->view_start *
 			edl->local_session->zoom_sample /
@@ -649,20 +723,18 @@
 				edl->local_session->zoom_sample - 
 				gui->canvas->get_w() / 
 				2));
-			cwindow->update(1, 0, 0, 0, 0);
 		}
 		else
 // Don't scroll the display
 		{
-			gui->patchbay->update();
 			gui->timebar->update();
 			gui->cursor->hide(0);
 			gui->cursor->draw(1);
 			gui->zoombar->update();
 			gui->canvas->flash();
 			gui->flush();
-			cwindow->update(1, 0, 0);
 		}
+		cwindow->update(1, 0, 0, 0, 1);
 	}
 	else
 	{
