--- cinecutie/file.C	2008-08-10 22:24:08.000000000 +0200
+++ /home/user/cinecutie/cinecutie/file.C	2010-02-19 22:19:11.948570683 +0100
@@ -29,11 +29,11 @@
 #include "file.h"
 #include "fileac3.h"
 #include "fileavi.h"
+#include "filedv.h"
+#include "fileogg.h"
 #include "filebase.h"
 #include "filecr2.h"
 #include "fileexr.h"
-#include "fileffmpeg.h"
-#include "fileflac.h"
 #include "fileogg.h"
 #include "filexml.h"
 #include "filejpeg.h"
@@ -46,7 +46,9 @@
 #include "filethread.h"
 #include "filetiff.h"
 #include "filevorbis.h"
+#include "fileyuv.h"
 #include "formatwindow.h"
+#include "formattools.h"
 #include "framecache.h"
 #include "language.h"
 #include "mutex.h"
@@ -62,7 +64,7 @@
 {
 	cpus = 1;
 	asset = new Asset;
-	format_completion = new Condition(1, "File::format_completion");
+	format_completion = new Mutex("File::format_completion");
 	write_lock = new Condition(1, "File::write_lock");
 	frame_cache = new FrameCache;
 	reset_parameters();
@@ -70,7 +72,6 @@
 
 File::~File()
 {
-
 	if(getting_options)
 	{
 		if(format_window) format_window->set_done(0);
@@ -78,20 +79,13 @@
 		format_completion->unlock();
 	}
 
-
 	if(temp_frame) delete temp_frame;
 
-
 	close_file(0);
-
 	Garbage::delete_object(asset);
-
 	delete format_completion;
-
 	delete write_lock;
-
 	if(frame_cache) delete frame_cache;
-
 }
 
 void File::reset_parameters()
@@ -109,6 +103,7 @@
 	normalized_sample = 0;
 	normalized_sample_rate = 0;
 	resample = 0;
+	resample_float = 0;
 	use_cache = 0;
 	preferences = 0;
 	playback_subtitle = -1;
@@ -136,13 +131,14 @@
 	}
 }
 
-int File::get_options(BC_WindowBase *parent_window, 
-	ArrayList<PluginServer*> *plugindb, 
-	Asset *asset, 
-	int audio_options, 
-	int video_options,
-	char *locked_compressor)
+int File::get_options(FormatTools *format,  
+	int audio_options,
+	int video_options)
 {
+	BC_WindowBase *parent_window = format->window;
+	ArrayList<PluginServer*> *plugindb = format->plugindb;
+	Asset *asset = format->asset;
+
 	getting_options = 1;
 	format_completion->lock("File::get_options");
 	switch(asset->format)
@@ -154,6 +150,13 @@
 				audio_options,
 				video_options);
 			break;
+		case FILE_RAWDV:
+			FileDV::get_parameters(parent_window,
+				asset,
+				format_window,
+				audio_options,
+				video_options);
+			break;
 		case FILE_PCM:
 		case FILE_WAV:
 		case FILE_AU:
@@ -171,7 +174,7 @@
 				format_window, 
 				audio_options, 
 				video_options,
-				locked_compressor);
+				format->locked_compressor);
 			break;
 		case FILE_AMPEG:
 		case FILE_VMPEG:
@@ -187,7 +190,7 @@
 				format_window, 
 				audio_options, 
 				video_options,
-				locked_compressor);
+				format->locked_compressor);
 			break;
 		case FILE_AVI_LAVTOOLS:
 		case FILE_AVI_ARNE2:
@@ -198,7 +201,7 @@
 				format_window, 
 				audio_options, 
 				video_options,
-				locked_compressor);
+				format->locked_compressor);
 			break;
 		case FILE_JPEG:
 		case FILE_JPEG_LIST:
@@ -216,12 +219,12 @@
 				audio_options, 
 				video_options);
 			break;
-		case FILE_FLAC:
-			FileFLAC::get_parameters(parent_window, 
-				asset, 
-				format_window, 
-				audio_options, 
-				video_options);
+	        case FILE_YUV:
+			FileYUV::get_parameters(parent_window,
+				asset,
+				format_window,
+				video_options,
+				format);
 			break;
 		case FILE_PNG:
 		case FILE_PNG_LIST:
@@ -314,8 +317,7 @@
 
 void File::set_cache_frames(int value)
 {
-	if(!video_thread)
-		use_cache = value;
+	use_cache = value;
 }
 
 int File::purge_cache()
@@ -344,8 +346,6 @@
 	this->asset->copy_from(asset, 1);
 	file = 0;
 
-// printf("File::open_file %d\n", __LINE__);
-// sleep(1);
 
 	switch(this->asset->format)
 	{
@@ -363,7 +363,13 @@
 			char test[16];
 			fread(test, 16, 1, stream);
 
-			if(FileSndFile::check_sig(this->asset))
+			if(FileDV::check_sig(this->asset))
+			{
+// libdv
+				fclose(stream);
+				file = new FileDV(this->asset, this);
+			}
+			else if(FileSndFile::check_sig(this->asset))
 			{
 // libsndfile
 				fclose(stream);
@@ -391,16 +397,16 @@
 				file = new FileEXR(this->asset, this);
 			}
 			else
-			if(FileFLAC::check_sig(this->asset, test))
+			if(FileYUV::check_sig(this->asset))
 			{
-// FLAC file
+// YUV file
 				fclose(stream);
-				file = new FileFLAC(this->asset, this);
+				file = new FileYUV(this->asset, this);
 			}
 			else
 			if(FileCR2::check_sig(this->asset))
 			{
-// CR2 file
+// JPEG file
 				fclose(stream);
 				file = new FileCR2(this->asset, this);
 			}
@@ -419,6 +425,13 @@
 				file = new FileTIFF(this->asset, this);
 			}
 			else
+			if(FileOGG::check_sig(this->asset))
+			{
+// OGG file
+				fclose(stream);
+				file = new FileOGG(this->asset, this);
+			}
+			else
 			if(FileVorbis::check_sig(this->asset))
 			{
 // VorbisFile file
@@ -457,12 +470,6 @@
 				file = new FileMOV(this->asset, this);
 			}
 			else
-			if(FileFFMPEG::check_sig(this->asset))
-			{
-				fclose(stream);
-				file = new FileFFMPEG(this->asset, this);
-			}
-			else
 			{
 // PCM file
 				fclose(stream);
@@ -475,10 +482,6 @@
 			file = new FileAC3(this->asset, this);
 			break;
 
-		case FILE_FFMPEG:
-			file = new FileFFMPEG(this->asset, this);
-			break;
-
 		case FILE_PCM:
 		case FILE_WAV:
 		case FILE_AU:
@@ -503,8 +506,8 @@
 			file = new FileEXR(this->asset, this);
 			break;
 
-		case FILE_FLAC:
-			file = new FileFLAC(this->asset, this);
+		case FILE_YUV:
+			file = new FileYUV(this->asset, this);
 			break;
 
 		case FILE_CR2:
@@ -550,13 +553,16 @@
 			file = new FileAVI(this->asset, this);
 			break;
 
+		case FILE_RAWDV:
+			file = new FileDV(this->asset, this);
+			break;
+
 // try plugins
 		default:
 			return 1;
 			break;
 	}
 
-
 // Reopen file with correct parser and get header.
 	if(file->open_file(rd, wr))
 	{
@@ -565,7 +571,6 @@
 	}
 
 
-
 // Set extra writing parameters to mandatory settings.
 	if(file && wr)
 	{
@@ -573,17 +578,12 @@
 	}
 
 
-
 // Synchronize header parameters
 	if(file)
 	{
 		asset->copy_from(this->asset, 1);
-//asset->dump();
 	}
 
-// printf("File::open_file file=%p %d\n", file, __LINE__);
-// sleep(1);
-
 	if(file)
 		return FILE_OK;
 	else
@@ -592,19 +592,12 @@
 
 int File::close_file(int ignore_thread)
 {
-// printf("File::close_file file=%p %d\n", file, __LINE__);
-// sleep(1);
-
 	if(!ignore_thread)
 	{
-
 		stop_audio_thread();
-
 		stop_video_thread();
-
 	}
 
-
 	if(file) 
 	{
 // The file's asset is a copy of the argument passed to open_file so the
@@ -614,20 +607,14 @@
 			asset->audio_length = current_sample;
 			asset->video_length = current_frame;
 		}
-
 		file->close_file();
-
 		delete file;
-
 	}
 
 	if(resample) delete resample;
-
+	if(resample_float) delete resample_float;
 
 	reset_parameters();
-// printf("File::close_file file=%p %d\n", file, __LINE__);
-// sleep(1);
-
 	return 0;
 }
 
@@ -674,11 +661,10 @@
 {
 // Currently, CR2 is the only one which won't work asynchronously, so
 // we're not using a virtual function yet.
-	if(!video_thread /* && asset->format != FILE_CR2 */)
+	if(!video_thread && asset->format != FILE_CR2)
 	{
 		video_thread = new FileThread(this, 0, 1);
 		video_thread->start_reading();
-		use_cache = 0;
 	}
 }
 
@@ -854,9 +840,7 @@
 	return result;
 }
 
-int File::set_video_position(int64_t position, 
-	float base_framerate, 
-	int is_thread) 
+int File::set_video_position(int64_t position, float base_framerate, int is_thread) 
 {
 	int result = 0;
 	if(!file) return 0;
@@ -975,11 +959,16 @@
 }
 
 
-int File::read_samples(double *buffer, int64_t len, int64_t base_samplerate)
+int File::read_samples(double *buffer, int64_t len, int64_t base_samplerate, float *buffer_float)
 {
 	int result = 0;
 	if(len < 0) return 0;
 
+// Never try to read more samples than exist in the file
+	if (current_sample + len > asset->audio_length) {
+		len = asset->audio_length - current_sample;
+	}
+
 // Load with resampling	
 	if(file)
 	{
@@ -990,27 +979,55 @@
 		if(base_samplerate != asset->sample_rate)
 		{
 //printf("File::read_samples 3\n");
-			if(!resample)
+//struct timeval start_time;
+//gettimeofday(&start_time, 0);
+			if (!file->prefer_samples_float())
 			{
-//printf("File::read_samples 4\n");
-				resample = new Resample(this, asset->channels);
+				if(!resample)
+				{
+	//printf("File::read_samples 4\n");
+					resample = new Resample(this, asset->channels);
+				}
+
+	//printf("File::read_samples 5\n");
+				current_sample += resample->resample(buffer, 
+					len, 
+					asset->sample_rate, 
+					base_samplerate,
+					current_channel,
+					current_sample,
+					normalized_sample);
+	//printf("File::read_samples 6\n");
+			} else
+			{
+				if(!resample_float)
+				{
+	//printf("File::read_samples 4\n");
+					resample_float = new Resample_float(this, asset->channels);
+				}
+
+	//printf("File::read_samples 5\n");
+				current_sample += resample_float->resample(buffer, 
+					len, 
+					asset->sample_rate, 
+					base_samplerate,
+					current_channel,
+					current_sample,
+					normalized_sample);
+	//printf("File::read_samples 6\n");
+
 			}
+//printf("diff2: %lli\n", get_difference(&start_time));
 
-//printf("File::read_samples 5\n");
-			current_sample += resample->resample(buffer, 
-				len, 
-				asset->sample_rate, 
-				base_samplerate,
-				current_channel,
-				current_sample,
-				normalized_sample);
-//printf("File::read_samples 6\n");
 		}
 		else
 // Load directly
 		{
 //printf("File::read_samples 7\n");
-			result = file->read_samples(buffer, len);
+			if (buffer_float && file->prefer_samples_float())
+				result = file->read_samples_float(buffer_float, len);
+			else
+				result = file->read_samples(buffer, len);
 //printf("File::read_samples 8\n");
 			current_sample += len;
 		}
@@ -1050,14 +1067,12 @@
 		int advance_position = 1;
 
 // Test cache
-//printf("File::read_frame %d use_cache=%d\n", __LINE__, use_cache);
 		if(use_cache &&
 			frame_cache->get_frame(frame,
 				current_frame,
 				current_layer,
 				asset->frame_rate))
 		{
-//printf("File::read_frame %d\n", __LINE__);
 // Can't advance position if cache used.
 			advance_position = 0;
 		}
@@ -1068,7 +1083,6 @@
 			frame->get_w() != asset->width ||
 			frame->get_h() != asset->height))
 		{
-//printf("File::read_frame %d\n", __LINE__);
 
 // Can't advance position here because it needs to be added to cache
 			if(temp_frame)
@@ -1090,16 +1104,14 @@
 
 			temp_frame->copy_stacks(frame);
 			file->read_frame(temp_frame);
-//for(int i = 0; i < 1000 * 1000; i++) ((float*)temp_frame->get_rows()[0])[i] = 1.0;
-//printf("File::read_frame %d %d\n", temp_frame->get_color_model(), frame->get_color_model());
 			cmodel_transfer(frame->get_rows(), 
 				temp_frame->get_rows(),
-				frame->get_y(),
-				frame->get_u(),
-				frame->get_v(),
 				temp_frame->get_y(),
 				temp_frame->get_u(),
 				temp_frame->get_v(),
+				frame->get_y(),
+				frame->get_u(),
+				frame->get_v(),
 				0, 
 				0, 
 				temp_frame->get_w(), 
@@ -1120,12 +1132,12 @@
 			file->read_frame(frame);
 		}
 
-//printf("File::read_frame %d use_cache=%d\n", __LINE__, use_cache);
 		if(use_cache) frame_cache->put_frame(frame,
 			current_frame,
 			current_layer,
 			asset->frame_rate,
 			1);
+// printf("File::read_frame\n");
 // frame->dump_params();
 
 		if(advance_position) current_frame++;
@@ -1185,7 +1197,7 @@
 	else
 	if(!strcasecmp(format, _(EXR_LIST_NAME))) return FILE_EXR_LIST;
 	else
-	if(!strcasecmp(format, _(FLAC_NAME))) return FILE_FLAC;
+	if(!strcasecmp(format, _(YUV_NAME))) return FILE_YUV;
 	else
 	if(!strcasecmp(format, _(CR2_NAME))) return FILE_CR2;
 	else
@@ -1215,17 +1227,16 @@
 	else
 	if(!strcasecmp(format, _(VORBIS_NAME))) return FILE_VORBIS;
 	else
-	if(!strcasecmp(format, _(FFMPEG_NAME))) return FILE_FFMPEG;
-
+	if(!strcasecmp(format, _(RAWDV_NAME))) return FILE_RAWDV;
 	return 0;
 }
 
-const char* File::formattostr(int format)
+char* File::formattostr(int format)
 {
 	return formattostr(0, format);
 }
 
-const char* File::formattostr(ArrayList<PluginServer*> *plugindb, int format)
+char* File::formattostr(ArrayList<PluginServer*> *plugindb, int format)
 {
 	switch(format)
 	{
@@ -1265,12 +1276,12 @@
 		case FILE_EXR:
 			return _(EXR_NAME);
 			break;
-		case FILE_FLAC:
-			return _(FLAC_NAME);
-			break;
 		case FILE_EXR_LIST:
 			return _(EXR_LIST_NAME);
 			break;
+		case FILE_YUV:
+			return _(YUV_NAME);
+			break;
 		case FILE_MPEG:
 			return _(MPEG_NAME);
 			break;
@@ -1316,10 +1327,9 @@
 		case FILE_VORBIS:
 			return _(VORBIS_NAME);
 			break;
-		case FILE_FFMPEG:
-			return _(FFMPEG_NAME);
+		case FILE_RAWDV:
+			return _(RAWDV_NAME);
 			break;
-
 		default:
 			return _("Unknown");
 			break;
@@ -1340,7 +1350,7 @@
 	return BITSLINEAR16;
 }
 
-const char* File::bitstostr(int bits)
+char* File::bitstostr(int bits)
 {
 //printf("File::bitstostr\n");
 	switch(bits)
@@ -1381,7 +1391,7 @@
 	return 0;
 }
 
-const char* File::byteorder_to_str(int byte_order)
+char* File::byteorder_to_str(int byte_order)
 {
 	if(byte_order) return _("Lo Hi");
 	return _("Hi Lo");
@@ -1426,6 +1436,10 @@
 {
 	switch(asset->format)
 	{
+		case FILE_RAWDV:
+			return FileDV::get_best_colormodel(asset, driver);
+			break;
+
 		case FILE_MOV:
 			return FileMOV::get_best_colormodel(asset, driver);
 			break;
@@ -1448,6 +1462,10 @@
 			return FileEXR::get_best_colormodel(asset, driver);
 			break;
 		
+		case FILE_YUV:
+			return FileYUV::get_best_colormodel(asset, driver);
+			break;
+
 		case FILE_PNG:
 		case FILE_PNG_LIST:
 			return FilePNG::get_best_colormodel(asset, driver);
@@ -1518,6 +1536,7 @@
 		case FILE_CR2:
 		case FILE_EXR:
 		case FILE_EXR_LIST:
+	        case FILE_YUV:
 		case FILE_PNG:
 		case FILE_PNG_LIST:
 		case FILE_TGA:
@@ -1530,6 +1549,7 @@
 		case FILE_AVI:
 		case FILE_AVI_ARNE1:
 		case FILE_AVI_AVIFILE:
+		case FILE_RAWDV:
 			return 1;
 			break;
 
@@ -1544,7 +1564,6 @@
 	switch(format)
 	{
 		case FILE_AC3:
-		case FILE_FLAC:
 		case FILE_PCM:
 		case FILE_WAV:
 		case FILE_MOV:
@@ -1559,6 +1578,7 @@
 		case FILE_AVI_ARNE2:
 		case FILE_AVI_ARNE1:
 		case FILE_AVI_AVIFILE:
+		case FILE_RAWDV:
 			return 1;
 		
 		default:
@@ -1567,7 +1587,7 @@
 	}
 }
 
-const char* File::get_tag(int format)
+char* File::get_tag(int format)
 {
 	switch(format)
 	{
@@ -1576,9 +1596,9 @@
 		case FILE_AMPEG:        return "mp3";
 		case FILE_AU:           return "au";
 		case FILE_AVI:          return "avi";
+		case FILE_RAWDV:        return "dv";
 		case FILE_EXR:          return "exr";
 		case FILE_EXR_LIST:     return "exr";
-		case FILE_FLAC:         return "flac";
 		case FILE_JPEG:         return "jpg";
 		case FILE_JPEG_LIST:    return "jpg";
 		case FILE_MOV:          return "mov";
@@ -1593,10 +1613,27 @@
 		case FILE_VMPEG:        return "m2v";
 		case FILE_VORBIS:       return "ogg";
 		case FILE_WAV:          return "wav";
+		case FILE_YUV:          return "m2v";
 	}
 	return 0;
 }
 
+PackagingEngine *File::new_packaging_engine(Asset *asset)
+{
+	PackagingEngine *result;
+	switch (asset->format)
+	{
+		case FILE_OGG:
+			result = (PackagingEngine*)new PackagingEngineOGG();
+			break;
+		default:
+			result = (PackagingEngine*) new PackagingEngineDefault();
+			break;
+	}
+
+	return result;
+}
+
 
 
 
