--- cinecutie/maskautos.C	2008-07-21 21:14:01.000000000 +0200
+++ /home/user/cinecutie/cinecutie/maskautos.C	2010-02-19 22:19:11.968571001 +0100
@@ -21,11 +21,8 @@
 
 #include "automation.inc"
 #include "clip.h"
-#include "edl.h"
-#include "localsession.h"
 #include "maskauto.h"
 #include "maskautos.h"
-#include "track.h"
 #include "transportque.inc"
 
 
@@ -43,58 +40,7 @@
 }
 
 
-
-
-void MaskAutos::update_parameter(MaskAuto *src)
-{
-	double selection_start = edl->local_session->get_selectionstart(0);
-	double selection_end = edl->local_session->get_selectionend(0);
-
-// Selection is always aligned to frame for masks
-
-// Create new keyframe if auto keyframes or replace entire keyframe.
-	if(selection_start == selection_end)
-	{
-// Search for keyframe to write to
-		MaskAuto *dst = (MaskAuto*)get_auto_for_editing();
-
-		dst->copy_data(src);
-	}
-	else
-// Replace changed parameter in all selected keyframes.
-	{
-// Search all keyframes in selection but don't create a new one.
-		int64_t start = track->to_units(selection_start, 0);
-		int64_t end = track->to_units(selection_end, 0);
-		Auto *current_auto = 0;
-		MaskAuto *current = 0;
-		current = (MaskAuto*)get_prev_auto(start, 
-			PLAY_FORWARD, 
-			current_auto, 
-			1);
-
-// The first one determines the changed parameters since it is the one displayed
-// in the GUI.
-		MaskAuto *first = current;
-
-// Update the first one last, so it is available for comparisons to the changed one.
-		for(current = (MaskAuto*)NEXT; 
-			current && current->position < end; 
-			current = (MaskAuto*)NEXT)
-		{
-			current->update_parameter(first, 
-				src);
-		}
-		first->copy_data(src);
-	}
-}
-
-
-
-void MaskAutos::get_points(ArrayList<MaskPoint*> *points, 
-	int submask, 
-	int64_t position, 
-	int direction)
+void MaskAutos::get_points(ArrayList<MaskPoint*> *points, int submask, int64_t position, int direction)
 {
 	MaskAuto *begin = 0, *end = 0;
 	position = (direction == PLAY_FORWARD) ? position : (position - 1);
@@ -129,33 +75,13 @@
 	SubMask *mask2 = end->get_submask(submask);
 
 	points->remove_all_objects();
-	int total_points = MAX(mask1->points.size(), mask2->points.size());
+	int total_points = MIN(mask1->points.total, mask2->points.total);
 	for(int i = 0; i < total_points; i++)
 	{
 		MaskPoint *point = new MaskPoint;
-		MaskPoint point1;
-		int need_point1 = 1;
-		MaskPoint point2;
-		int need_point2 = 1;
-
-		if(i < mask1->points.size())
-		{
-			point1.copy_from(*mask1->points.get(i));
-			need_point1 = 0;
-		}
-
-		if(i < mask2->points.size())
-		{
-			point2.copy_from(*mask2->points.get(i));
-			need_point2 = 0;
-		}
-
-		if(need_point1) point1.copy_from(point2);
-		if(need_point2) point2.copy_from(point1);
-
 		avg_points(point, 
-			&point1, 
-			&point2,
+			mask1->points.values[i], 
+			mask2->points.values[i],
 			position,
 			begin->position,
 			end->position);
@@ -163,47 +89,6 @@
 	}
 }
 
-
-float MaskAutos::get_feather(int64_t position, int direction)
-{
-	Auto *begin = 0, *end = 0;
-	position = (direction == PLAY_FORWARD) ? position : (position - 1);
-
-	get_prev_auto(position, PLAY_FORWARD, begin, 1);
-	get_next_auto(position, PLAY_FORWARD, end, 1);
-
-	double weight = 0.0;
-	if(end->position != begin->position) 
-		weight = (double)(position - begin->position) / (end->position - begin->position);
-
-	return ((MaskAuto*)begin)->feather * (1.0 - weight) + ((MaskAuto*)end)->feather * weight;
-}
-
-int MaskAutos::get_value(int64_t position, int direction)
-{
-	Auto *begin = 0, *end = 0;
-	position = (direction == PLAY_FORWARD) ? position : (position - 1);
-
-	get_prev_auto(position, PLAY_FORWARD, begin, 1);
-	get_next_auto(position, PLAY_FORWARD, end, 1);
-
-	double weight = 0.0;
-	if(end->position != begin->position) 
-		weight = (double)(position - begin->position) / (end->position - begin->position);
-
-	int result = (int)((double)((MaskAuto*)begin)->value * (1.0 - weight) + 
-		(double)((MaskAuto*)end)->value * weight + 0.5);
-// printf("MaskAutos::get_value %d %d %f %d %f %d\n",
-// __LINE__,
-// ((MaskAuto*)begin)->value,
-// 1.0 - weight,
-// ((MaskAuto*)end)->value,
-// weight,
-// result);
-	return result;
-}
-
-
 void MaskAutos::avg_points(MaskPoint *output, 
 		MaskPoint *input1, 
 		MaskPoint *input2, 
