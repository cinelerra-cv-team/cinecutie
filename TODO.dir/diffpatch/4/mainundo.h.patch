--- cinecutie/mainundo.h	2008-07-21 21:14:01.000000000 +0200
+++ /home/user/cinecutie/cinecutie/mainundo.h	2010-02-19 22:19:11.968571001 +0100
@@ -24,28 +24,35 @@
 
 
 #include "bctimer.inc"
-#include "filexml.inc"
+#include "linklist.h"
 #include "mwindow.inc"
-#include "undostack.inc"
 
 #include <stdint.h>
 
+
+class UndoStackItem;
+class MainUndoStackItem;
+
+
 class MainUndo
 {
 public:
 	MainUndo(MWindow *mwindow);
 	~MainUndo();
 
-// For tweeking operations:
-// If a pair of update_undo_before and update_undo_after are called
-// within a certain time limit and the creator is nonzero and equal,
-// the before undo is discarded and the previous after undo is replaced.
-	void update_undo_before(const char *description = "", 
-		void *creator = 0);
-	void update_undo_after(const char *description, 
-		uint32_t load_flags,
+   // Use this function for UndoStackItem subclasses with custom
+   // undo and redo functions.  All fields including description must
+   // be populated before calling this function.
+   void push_undo_item(UndoStackItem *item);
+
+	void update_undo(char *description, 
+		uint32_t load_flags, 
+		void *creator = 0,
 		int changes_made = 1);
 
+// alternatively, call this one after the change
+	void push_state(char *description, uint32_t load_flags, void* creator);
+
 // Used in undo and redo to reset the creators in all the records.
 	void reset_creators();
 
@@ -53,28 +60,19 @@
 	int redo();
 
 private:
-// Entry point for all update commands
-	void update_undo_entry(const char *description, 
-		uint32_t load_flags, 
-		void *creator, 
-		int changes_made);
-	int load_from_undo(FileXML *file, uint32_t load_flags);    
-
-// Placing the before & after undo operations in the same stack makes the
-// compression more efficient.
-// So even numbers are before and odd numbers are after
-	UndoStack *undo_stack;
-
-
-
-
-// loads undo from the stringfile to the project
-	int load_undo_before(FileXML *file, uint32_t load_flags);    
-	int load_undo_after(FileXML *file, uint32_t load_flags);    
-
+	List<UndoStackItem> undo_stack;
+	List<UndoStackItem> redo_stack;
+	MainUndoStackItem* new_entry;	// for setting the after buffer
 
 	MWindow *mwindow;
 	Timer *last_update;
+	char* data_after;	// the state after a change
+
+	void capture_state();
+	void prune_undo();
+	bool ignore_push(char *description, uint32_t load_flags, void* creator);
+
+	friend class MainUndoStackItem;
 };
 
 #endif
