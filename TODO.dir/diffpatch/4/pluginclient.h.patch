--- cinecutie/pluginclient.h	2008-08-06 20:45:37.000000000 +0200
+++ /home/user/cinecutie/cinecutie/pluginclient.h	2010-02-19 22:19:11.988570758 +0100
@@ -24,19 +24,17 @@
 
 // Base class inherited by all the different types of plugins.
 
-#define BCASTDIR "~/.bcast/"
+#define BCASTDIR "~/.ccutie/"
 
 class PluginClient;
 
 
 #include "arraylist.h"
-#include "bchash.inc"
 #include "condition.h"
 #include "edlsession.inc"
 #include "keyframe.h"
 #include "mainprogress.inc"
 #include "maxbuffers.h"
-#include "pluginclient.inc"
 #include "plugincommands.h"
 #include "pluginserver.inc"
 #include "theme.inc"
@@ -68,30 +66,124 @@
 }
 
 
+#define WINDOW_CLOSE_EVENT(window_class) \
+int window_class::close_event() \
+{ \
+/* Set result to 1 to indicate a client side close */ \
+	set_done(1); \
+	return 1; \
+}
 
 
+#define PLUGIN_THREAD_HEADER(plugin_class, thread_class, window_class) \
+class thread_class : public Thread \
+{ \
+public: \
+	thread_class(plugin_class *plugin); \
+	~thread_class(); \
+	void run(); \
+	window_class *window; \
+	plugin_class *plugin; \
+};
 
 
+#define PLUGIN_THREAD_OBJECT(plugin_class, thread_class, window_class) \
+thread_class::thread_class(plugin_class *plugin) \
+ : Thread(0, 0, 1) \
+{ \
+	this->plugin = plugin; \
+} \
+ \
+thread_class::~thread_class() \
+{ \
+	delete window; \
+} \
+ \
+void thread_class::run() \
+{ \
+	BC_DisplayInfo info; \
+	window = new window_class(plugin,  \
+		info.get_abs_cursor_x() - 75,  \
+		info.get_abs_cursor_y() - 65); \
+	window->create_objects(); \
+ \
+/* Only set it here so tracking doesn't update it until everything is created. */ \
+ 	plugin->thread = this; \
+	int result = window->run_window(); \
+/* This is needed when the GUI is closed from itself */ \
+	if(result) plugin->client_side_close(); \
+}
 
 
-// Prototypes for user to put in class header
-#define PLUGIN_CLASS_MEMBERS(config_name) \
+
+
+#define PLUGIN_CLASS_MEMBERS(config_name, thread_name) \
 	int load_configuration(); \
 	VFrame* new_picon(); \
-	const char* plugin_title(); \
-	PluginClientWindow* new_window(); \
-	config_name config;
+	char* plugin_title(); \
+	int show_gui(); \
+	int set_string(); \
+	void raise_window(); \
+	BC_Hash *defaults; \
+	config_name config; \
+	thread_name *thread;
 
+#define PLUGIN_CONSTRUCTOR_MACRO \
+	thread = 0; \
+	defaults = 0; \
+	load_defaults(); \
+
+#define PLUGIN_DESTRUCTOR_MACRO \
+	if(thread) \
+	{ \
+/* This is needed when the GUI is closed from elsewhere than itself */ \
+/* Since we now use autodelete, this is all that has to be done, thread will take care of itself ... */ \
+/* Thread join will wait if this was not called from the thread itself or go on if it was */ \
+		thread->window->lock_window("PLUGIN_DESTRUCTOR_MACRO"); \
+		thread->window->set_done(0); \
+		thread->window->unlock_window(); \
+		thread->join(); \
+	} \
+ \
+ \
+	if(defaults) save_defaults(); \
+	if(defaults) delete defaults;
 
 
 
 
-#define NEW_WINDOW_MACRO(plugin_class, window_class) \
-PluginClientWindow* plugin_class::new_window() \
+#define SHOW_GUI_MACRO(plugin_class, thread_class) \
+int plugin_class::show_gui() \
 { \
-	return new window_class(this); \
+	load_configuration(); \
+	thread_class *new_thread = new thread_class(this); \
+	new_thread->start(); \
+	return 0; \
 }
 
+#define RAISE_WINDOW_MACRO(plugin_class) \
+void plugin_class::raise_window() \
+{ \
+	if(thread) \
+	{ \
+		thread->window->lock_window(); \
+		thread->window->raise_window(); \
+		thread->window->flush(); \
+		thread->window->unlock_window(); \
+	} \
+}
+
+#define SET_STRING_MACRO(plugin_class) \
+int plugin_class::set_string() \
+{ \
+	if(thread) \
+	{ \
+		thread->window->lock_window(); \
+		thread->window->set_title(gui_string); \
+		thread->window->unlock_window(); \
+	} \
+	return 0; \
+}
 
 #define NEW_PICON_MACRO(plugin_class) \
 VFrame* plugin_class::new_picon() \
@@ -99,8 +191,6 @@
 	return new VFrame(picon_png); \
 }
 
-// Not all plugins load configuration the same way.  Use this to define
-// the normal way.
 #define LOAD_CONFIGURATION_MACRO(plugin_class, config_class) \
 int plugin_class::load_configuration() \
 { \
@@ -137,43 +227,6 @@
 
 
 
-class PluginClientWindow : public BC_Window
-{
-public:
-	PluginClientWindow(PluginClient *client, 
-		int w,
-		int h,
-		int min_w,
-		int min_h,
-		int allow_resize);
-	virtual ~PluginClientWindow();
-	
-	virtual int close_event();
-	
-	PluginClient *client;
-};
-
-
-
-
-class PluginClientThread : public Thread
-{
-public:
-	PluginClientThread(PluginClient *client);
-	~PluginClientThread();
-	void run();
-	
-	friend class PluginClient;
-
-	BC_WindowBase* get_window();
-	PluginClient* get_client();
-	BC_WindowBase *window;
-	PluginClient *client;
-
-private:
-	Condition *init_complete;
-};
-
 
 
 class PluginClient
@@ -182,8 +235,6 @@
 	PluginClient(PluginServer *server);
 	virtual ~PluginClient();
 
-	friend class PluginClientThread;
-	friend class PluginClientWindow;
 	
 // Queries for the plugin server.
 	virtual int is_realtime();
@@ -195,7 +246,7 @@
 	virtual int is_multichannel();
 	virtual int is_synthesis();
 	virtual int is_transition();
-	virtual const char* plugin_title();   // return the title of the plugin
+	virtual char* plugin_title();   // return the title of the plugin
 	virtual VFrame* new_picon();
 	virtual Theme* new_theme();
 // Get theme being used by Cinelerra currently.  Used by all plugins.
@@ -227,26 +278,18 @@
 
 // Realtime commands for signal processors.
 // These must be defined by the plugin itself.
-// Set the GUI title identifying the plugin to modules and patches.
-	int set_string();
-// cause the plugin to create a new GUI class
-	virtual BC_WindowBase* new_window();
-// Load the current keyframe.  Return 1 if it changed.
-	virtual int load_configuration();
+	virtual int set_string();             // Set the string identifying the plugin to modules and patches.
+// cause the plugin to show the gui
+	virtual int show_gui();               
 // cause the plugin to hide the gui
 	void client_side_close();
 	void update_display_title();
 // Raise the GUI
-	void raise_window();
-// Create GUI
-	int show_gui();
-
+	virtual void raise_window() {};
 	virtual void update_gui() {};
 	virtual void save_data(KeyFrame *keyframe) {};    // write the plugin settings to text in text format
 	virtual void read_data(KeyFrame *keyframe) {};    // read the plugin settings from the text
 	int send_hide_gui();                                    // should be sent when the GUI recieves a close event from the user
-// Destroys the window but not the thread pointer.
-	void hide_gui();
 
 	int get_configure_change();                             // get propogated configuration change from a send_configure_change
 
@@ -265,8 +308,6 @@
 // Used by themes
 // Used by plugins which need to know where they are.
 	char* get_path();
-// Get the directory for plugins
-	char* get_plugin_dir();
 
 // Return keyframe objects.  The position in the resulting object 
 // is relative to the EDL rate.  This is the only way to avoid copying the
@@ -361,8 +402,7 @@
 // All plugins define these.
 	virtual int load_defaults();       // load default settings for the plugin
 	virtual int save_defaults();      // save the current settings as defaults
-	BC_Hash* get_defaults();
-	PluginClientThread* get_thread();
+
 
 
 
@@ -386,7 +426,7 @@
 	int write_frames(int64_t total_frames);  // returns 1 for failure / tells the server that all output channel buffers are ready to go
 	int write_samples(int64_t total_samples);  // returns 1 for failure / tells the server that all output channel buffers are ready to go
 	virtual int plugin_get_parameters();
-	const char* get_defaultdir();     // Directory defaults should be stored in
+	char* get_defaultdir();     // Directory defaults should be stored in
 	void set_interactive();
 
 // Realtime operations.
@@ -472,12 +512,9 @@
 // Total number of processors available - 1
 	int smp;  
 	PluginServer *server;
-	BC_Hash *defaults;
-	PluginClientThread *thread;
 
 private:
-// Temporaries set in new_window
-	int window_x, window_y;
+
 // File handlers:
 //	Asset *asset;     // Point to asset structure in shared memory
 };
