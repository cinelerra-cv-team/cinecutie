--- cinecutie/new.h	2008-08-03 22:02:14.000000000 +0200
+++ /home/user/cinecutie/cinecutie/new.h	2010-02-19 22:19:11.978570999 +0100
@@ -23,7 +23,6 @@
 #define NEW_H
 
 #include "assets.inc"
-#include "bcdialog.h"
 #include "edl.inc"
 #include "file.inc"
 #include "filexml.inc"
@@ -31,38 +30,39 @@
 #include "bchash.inc"
 #include "formatpresets.h"
 #include "mwindow.inc"
+#include "thread.h"
 
 class NewThread;
 class NewWindow;
 class NewPresets;
+class InterlacemodePulldown;
 
 class New : public BC_MenuItem
 {
 public:
 	New(MWindow *mwindow);
-	void create_objects();
+	int create_objects();
 
 	int handle_event();
 	int run_script(FileXML *script);
 	int create_new_project();
-	void create_new_edl();
 
 	MWindow *mwindow;
 	NewThread *thread;
 	EDL *new_edl;
 
 private:
+	void create_new_edl();
 	FileXML *script;
 };
 
-class NewThread : public BC_DialogThread
+class NewThread : public Thread
 {
 public:
 	NewThread(MWindow *mwindow, New *new_project);
 	~NewThread();
 	
-	BC_Window* new_gui();
-	void handle_close_event(int result);
+	void run();
 
 	int load_defaults();
 	int save_defaults();
@@ -72,6 +72,7 @@
 	NewWindow *nwindow;
 	MWindow *mwindow;
 	New *new_project;
+	Mutex *window_lock;
 };
 
 class NewWindow : public BC_Window
@@ -80,7 +81,7 @@
 	NewWindow(MWindow *mwindow, NewThread *new_thread, int x, int y);
 	~NewWindow();
 	
-	void create_objects();
+	int create_objects();
 	int update();
 
 	MWindow *mwindow;
@@ -94,6 +95,7 @@
 	BC_TextBox *frame_rate;
 	BC_TextBox *aspect_w_text, *aspect_h_text;
 	BC_TextBox *output_w_text, *output_h_text;
+	InterlacemodePulldown *interlace_pulldown;
 	NewPresets *format_presets;
 };
 
@@ -121,7 +123,7 @@
 class NewATracks : public BC_TextBox
 {
 public:
-	NewATracks(NewWindow *nwindow, const char *text, int x, int y);
+	NewATracks(NewWindow *nwindow, char *text, int x, int y);
 	int handle_event();
 	NewWindow *nwindow;
 };
@@ -138,7 +140,7 @@
 class NewAChannels : public BC_TextBox
 {
 public:
-	NewAChannels(NewWindow *nwindow, const char *text, int x, int y);
+	NewAChannels(NewWindow *nwindow, char *text, int x, int y);
 	int handle_event();
 	NewWindow *nwindow;
 };
@@ -155,7 +157,7 @@
 class NewSampleRate : public BC_TextBox
 {
 public:
-	NewSampleRate(NewWindow *nwindow, const char *text, int x, int y);
+	NewSampleRate(NewWindow *nwindow, char *text, int x, int y);
 	int handle_event();
 	NewWindow *nwindow;
 };
@@ -180,7 +182,7 @@
 class NewVTracks : public BC_TextBox
 {
 public:
-	NewVTracks(NewWindow *nwindow, const char *text, int x, int y);
+	NewVTracks(NewWindow *nwindow, char *text, int x, int y);
 	int handle_event();
 	NewWindow *nwindow;
 };
@@ -197,7 +199,7 @@
 class NewVChannels : public BC_TextBox
 {
 public:
-	NewVChannels(NewWindow *nwindow, const char *text, int x, int y);
+	NewVChannels(NewWindow *nwindow, char *text, int x, int y);
 	int handle_event();
 	NewWindow *nwindow;
 };
@@ -214,7 +216,7 @@
 class NewFrameRate : public BC_TextBox
 {
 public:
-	NewFrameRate(NewWindow *nwindow, const char *text, int x, int y);
+	NewFrameRate(NewWindow *nwindow, char *text, int x, int y);
 	int handle_event();
 	NewWindow *nwindow;
 };
@@ -286,7 +288,7 @@
 class NewAspectW : public BC_TextBox
 {
 public:
-	NewAspectW(NewWindow *nwindow, const char *text, int x, int y);
+	NewAspectW(NewWindow *nwindow, char *text, int x, int y);
 	int handle_event();
 	NewWindow *nwindow;
 };
@@ -294,7 +296,7 @@
 class NewAspectH : public BC_TextBox
 {
 public:
-	NewAspectH(NewWindow *nwindow, const char *text, int x, int y);
+	NewAspectH(NewWindow *nwindow, char *text, int x, int y);
 	int handle_event();
 	NewWindow *nwindow;
 };
@@ -316,7 +318,7 @@
 class ColormodelItem : public BC_ListBoxItem
 {
 public:
-	ColormodelItem(const char *text, int value);
+	ColormodelItem(char *text, int value);
 	int value;
 };
 
@@ -329,13 +331,62 @@
 		int x, 
 		int y);
 	int handle_event();
-	const char* colormodel_to_text();
+	char* colormodel_to_text();
 	MWindow *mwindow;
 	BC_TextBox *output_text;
 	int *output_value;
 };
 
+class InterlacemodeItem : public BC_ListBoxItem
+{
+public:
+	InterlacemodeItem(char *text, int value);
+	int value;
+};
 
+class InterlacemodePulldown : public BC_ListBox
+{
+public:
+	InterlacemodePulldown(MWindow *mwindow, 
+				BC_TextBox *output_text, 
+				int *output_value,
+				ArrayList<BC_ListBoxItem*> *data,
+				int x,
+				int y);
+	int handle_event();
+	char* interlacemode_to_text();
+	int update(int value);
+	MWindow *mwindow;
+	BC_TextBox *output_text;
+	int *output_value;
+private:
+  	char string[BCTEXTLEN];
+};
+
+class InterlacefixmethodItem : public BC_ListBoxItem
+{
+public:
+	InterlacefixmethodItem(char *text, int value);
+	int value;
+};
+
+class InterlacefixmethodPulldown : public BC_ListBox
+{
+public:
+	InterlacefixmethodPulldown(MWindow *mwindow, 
+				   BC_TextBox *output_text, 
+				   int *output_value,
+				   ArrayList<BC_ListBoxItem*> *data,
+				   int x, 
+				   int y);
+	int handle_event();
+	char* interlacefixmethod_to_text();
+	MWindow *mwindow;
+	BC_TextBox *output_text;
+	int *output_value;
+private:
+  	char string[BCTEXTLEN];
+};
 
 
 #endif
