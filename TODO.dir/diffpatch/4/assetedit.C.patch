--- cinecutie/assetedit.C	2008-10-13 20:50:43.000000000 +0200
+++ /home/user/cinecutie/cinecutie/assetedit.C	2010-02-19 22:19:11.848575688 +0100
@@ -37,9 +37,13 @@
 #include "mainindexes.h"
 #include "mwindow.h"
 #include "mwindowgui.h"
+#include "theme.h"
 #include "new.h"
 #include "preferences.h"
 #include "transportque.h"
+#include "interlacemodes.h"
+#include "edl.h"
+#include "edlsession.h"
 
 #include <string.h>
 
@@ -125,9 +129,7 @@
 				mwindow->gui->unlock_window();
 
 
-				mwindow->awindow->gui->lock_window();
-				mwindow->awindow->gui->update_assets();
-				mwindow->awindow->gui->unlock_window();
+				mwindow->awindow->gui->async_update_assets();
 
 				mwindow->restart_brender();
 				mwindow->sync_parameters(CHANGE_ALL);
@@ -150,11 +152,11 @@
 AssetEditWindow::AssetEditWindow(MWindow *mwindow, AssetEdit *asset_edit)
  : BC_Window(PROGRAM_NAME ": Asset Info", 
  	mwindow->gui->get_abs_cursor_x(1) - 400 / 2, 
-	mwindow->gui->get_abs_cursor_y(1) - 500 / 2, 
+	mwindow->gui->get_abs_cursor_y(1) - 550 / 2, 
 	400, 
-	510,
+	660,
 	400,
-	510,
+	560,
 	0,
 	0,
 	1)
@@ -181,16 +183,19 @@
 
 
 
-void AssetEditWindow::create_objects()
+int AssetEditWindow::create_objects()
 {
-	int y = 10, x = 10, x1 = 10, x2 = 150;
+	int y = 10, x = 10, x1 = 10, x2 = 160;
 	char string[BCTEXTLEN];
 	int vmargin;
 	int hmargin1 = 180, hmargin2 = 290;
 	FileSystem fs;
 	BC_Title *title;
+	BC_TextBox  *textboxw;
+	BC_CheckBox *chkboxw;
+	BC_ListBox  *listboxw;
+	Interlaceautofix *ilacefixoption_chkboxw;
 
-	lock_window("AssetEditWindow::create_objects");
 	if(allow_edits) 
 		vmargin = 30;
 	else
@@ -207,7 +212,7 @@
 
 	add_subwindow(new BC_Title(x, y, _("File format:")));
 	x = x2;
-	add_subwindow(new BC_Title(x, y, File::formattostr(mwindow->plugindb, asset->format), MEDIUMFONT, YELLOW));
+	add_subwindow(new BC_Title(x, y, File::formattostr(mwindow->plugindb, asset->format), MEDIUMFONT, mwindow->theme->edit_font_color));
 	x = x1;
 	y += 20;
 
@@ -228,7 +233,7 @@
 	Units::punctuate(string);
 	
 
-	add_subwindow(new BC_Title(x2, y, string, MEDIUMFONT, YELLOW));
+	add_subwindow(new BC_Title(x2, y, string, MEDIUMFONT, mwindow->theme->edit_font_color));
 	y += 20;
 	x = x1;
 
@@ -246,7 +251,7 @@
 	sprintf(string, "%lld", bitrate);
 
 	Units::punctuate(string);
-	add_subwindow(new BC_Title(x2, y, string, MEDIUMFONT, YELLOW));
+	add_subwindow(new BC_Title(x2, y, string, MEDIUMFONT, mwindow->theme->edit_font_color));
 
 	y += 30;
 	x = x1;
@@ -268,7 +273,7 @@
 				y, 
 				asset->get_compression_text(1, 0), 
 				MEDIUMFONT, 
-				YELLOW));
+				mwindow->theme->edit_font_color));
 			y += vmargin;
 			x = x1;
 		}
@@ -285,7 +290,7 @@
 		}
 		else
 		{
-			add_subwindow(new BC_Title(x, y, string, MEDIUMFONT, YELLOW));
+			add_subwindow(new BC_Title(x, y, string, MEDIUMFONT, mwindow->theme->edit_font_color));
 			y += 20;
 		}
 
@@ -304,7 +309,7 @@
 		}
 		else
 		{
-			add_subwindow(new BC_Title(x, y, string, MEDIUMFONT, YELLOW));
+			add_subwindow(new BC_Title(x, y, string, MEDIUMFONT, mwindow->theme->edit_font_color));
 		}
 
 		y += 30;
@@ -326,7 +331,7 @@
 			bitspopup->create_objects();
 		}
 		else
-			add_subwindow(new BC_Title(x, y, File::bitstostr(asset->bits), MEDIUMFONT, YELLOW));
+			add_subwindow(new BC_Title(x, y, File::bitstostr(asset->bits), MEDIUMFONT, mwindow->theme->edit_font_color));
 
 
 		x = x1;
@@ -338,7 +343,7 @@
 		if(allow_edits)
 			add_subwindow(new AssetEditHeader(this, string, x, y));
 		else
-			add_subwindow(new BC_Title(x, y, string, MEDIUMFONT, YELLOW));
+			add_subwindow(new BC_Title(x, y, string, MEDIUMFONT, mwindow->theme->edit_font_color));
 
 		y += vmargin;
 		x = x1;
@@ -364,9 +369,9 @@
 		{
 			x = x2;
 			if(asset->byte_order)
-				add_subwindow(new BC_Title(x, y, _("Lo-Hi"), MEDIUMFONT, YELLOW));
+				add_subwindow(new BC_Title(x, y, _("Lo-Hi"), MEDIUMFONT, mwindow->theme->edit_font_color));
 			else
-				add_subwindow(new BC_Title(x, y, _("Hi-Lo"), MEDIUMFONT, YELLOW));
+				add_subwindow(new BC_Title(x, y, _("Hi-Lo"), MEDIUMFONT, mwindow->theme->edit_font_color));
 			y += vmargin;
 		}
 
@@ -407,7 +412,7 @@
 				y, 
 				asset->get_compression_text(0,1), 
 				MEDIUMFONT, 
-				YELLOW));
+				mwindow->theme->edit_font_color));
 			y += vmargin;
 			x = x1;
 		}
@@ -425,14 +430,14 @@
 		add_subwindow(new BC_Title(x, y, _("Width:")));
 		x = x2;
 		sprintf(string, "%d", asset->width);
-		add_subwindow(new BC_Title(x, y, string, MEDIUMFONT, YELLOW));
+		add_subwindow(new BC_Title(x, y, string, MEDIUMFONT, mwindow->theme->edit_font_color));
 		
 		y += vmargin;
 		x = x1;
 		add_subwindow(new BC_Title(x, y, _("Height:")));
 		x = x2;
 		sprintf(string, "%d", asset->height);
-		add_subwindow(title = new BC_Title(x, y, string, MEDIUMFONT, YELLOW));
+		add_subwindow(title = new BC_Title(x, y, string, MEDIUMFONT, mwindow->theme->edit_font_color));
 		y += title->get_h() + 5;
 
 		if(asset->format == FILE_MPEG)
@@ -441,16 +446,102 @@
 			add_subwindow(new BC_Title(x, y, _("Subtitle tracks:")));
 			x = x2;
 			sprintf(string, "%d", subtitle_tracks);
-			add_subwindow(title = new BC_Title(x, y, string, MEDIUMFONT, YELLOW));
+			add_subwindow(title = new BC_Title(x, y, string, MEDIUMFONT, mwindow->theme->edit_font_color));
 			y += title->get_h() + 5;
 		}
+
+		// --------------------
+		add_subwindow(title = new BC_Title(x1, y, _("Fix interlacing:")));
+		add_subwindow(ilacefixoption_chkboxw = new Interlaceautofix(mwindow,this, x2, y));
+		y += ilacefixoption_chkboxw->get_h() + 5;
+
+		// --------------------
+		add_subwindow(title = new BC_Title(x1, y, _("Asset's interlacing:")));
+		add_subwindow(textboxw = new AssetEditILacemode(this, "", BC_ILACE_ASSET_MODEDEFAULT, x2, y, 200));
+		ilacefixoption_chkboxw->ilacemode_textbox = textboxw;
+		add_subwindow(listboxw = new AssetEditInterlacemodePulldown(mwindow,
+							textboxw, 
+							&asset->interlace_mode,
+							(ArrayList<BC_ListBoxItem*>*)&mwindow->interlace_asset_modes,
+							ilacefixoption_chkboxw,
+							x2 + textboxw->get_w(), 
+							y)); 
+		ilacefixoption_chkboxw->ilacemode_listbox = listboxw;
+		y += textboxw->get_h() + 5;
+
+		// --------------------
+		add_subwindow(title = new BC_Title(x1, y, _("Interlace correction:")));
+		add_subwindow(textboxw = new AssetEditILacefixmethod(this, "", BC_ILACE_FIXDEFAULT, x2, y, 200));
+		ilacefixoption_chkboxw->ilacefixmethod_textbox = textboxw;
+		add_subwindow(listboxw = new InterlacefixmethodPulldown(mwindow, 
+							textboxw,
+							&asset->interlace_fixmethod,
+							(ArrayList<BC_ListBoxItem*>*)&mwindow->interlace_asset_fixmethods,
+							x2 + textboxw->get_w(), 
+							y)); 
+		ilacefixoption_chkboxw->ilacefixmethod_listbox = listboxw;
+		ilacefixoption_chkboxw->showhideotherwidgets();
+		y += textboxw->get_h() + 5;
+		
+		x = x1;
+		add_subwindow(new BC_Title(x, y, _("Reel Name:")));
+		x = x2;
+		add_subwindow(new AssetEditReelName(this, x, y));
+		y += 30;
+		
+		x = x1;
+		add_subwindow(new BC_Title(x, y, _("Reel Number:")));
+		x = x2;
+		add_subwindow(new AssetEditReelNumber(this, x, y));
+		y += 30;
+		
+		x = x1;
+		add_subwindow(new BC_Title(x, y, _("Time Code Start:")));
+		x = x2;
+
+// Calculate values to enter into textboxes
+		char tc[12];
+		
+		Units::totext(tc,
+			asset->tcstart / asset->frame_rate,
+			TIME_HMSF,
+			asset->sample_rate,
+			asset->frame_rate);
+		
+		char *tc_hours = tc;
+		char *tc_minutes = strchr(tc, ':') + 1;
+		*(tc_minutes - 1) = 0;
+		char *tc_seconds = strchr(tc_minutes, ':') + 1;
+		*(tc_seconds - 1) = 0;
+		char *tc_rest = strchr(tc_seconds, ':') + 1;
+		*(tc_rest - 1) = 0;
+		
+		add_subwindow(new AssetEditTCStartTextBox(this, atoi(tc_hours), x, y,
+			(int) (asset->frame_rate * 60 * 60)));
+		x += 30;
+		add_subwindow(new BC_Title(x, y, ":"));
+		x += 10;
+		add_subwindow(new AssetEditTCStartTextBox(this, atoi(tc_minutes), x, y,
+			(int) (asset->frame_rate * 60)));
+		x += 30;
+		add_subwindow(new BC_Title(x, y, ":"));
+		x += 10;
+		add_subwindow(new AssetEditTCStartTextBox(this, atoi(tc_seconds), x, y,
+			(int) (asset->frame_rate)));
+		x += 30;
+		add_subwindow(new BC_Title(x, y, ":"));
+		x += 10;
+		add_subwindow(new AssetEditTCStartTextBox(this, atoi(tc_rest), x, y, 1));
+
+
+		y += 30;
 	}
 
 	add_subwindow(new BC_OKButton(this));
 	add_subwindow(new BC_CancelButton(this));
 	show_window();
 	flush();
-	unlock_window();
+	return 0;
 }
 
 AssetEditChannels::AssetEditChannels(AssetEditWindow *fwindow, 
@@ -498,6 +589,175 @@
 	return 1;
 }
 
+Interlaceautofix::Interlaceautofix(MWindow *mwindow,AssetEditWindow *fwindow, int x, int y)
+ : BC_CheckBox(x, y, fwindow->asset->interlace_autofixoption, _("Automatically Fix Interlacing"))
+{
+	this->fwindow = fwindow;
+	this->mwindow = mwindow;
+}
+
+Interlaceautofix::~Interlaceautofix()
+{
+}
+
+int Interlaceautofix::handle_event()
+{
+	fwindow->asset->interlace_autofixoption = get_value();
+	showhideotherwidgets();
+	return 1;
+}
+
+void Interlaceautofix::showhideotherwidgets()
+{
+  int thevalue = get_value();
+
+	if (thevalue == BC_ILACE_AUTOFIXOPTION_AUTO) 
+	  {
+	    this->ilacemode_textbox->enable(); 
+	    this->ilacemode_listbox->enable(); 
+	    this->ilacefixmethod_textbox->disable();
+	    this->ilacefixmethod_listbox->disable();
+	    int xx = ilaceautofixmethod(mwindow->edl->session->interlace_mode,fwindow->asset->interlace_mode);
+	    ilacefixmethod_to_text(string,xx);
+	    this->ilacefixmethod_textbox->update(string);
+	  }
+	if (thevalue == BC_ILACE_AUTOFIXOPTION_MANUAL) 
+	  {
+	    this->ilacemode_textbox->disable(); 
+	    this->ilacemode_listbox->disable(); 
+	    this->ilacefixmethod_textbox->enable(); 
+	    this->ilacefixmethod_listbox->enable(); 
+	    ilacefixmethod_to_text(string,fwindow->asset->interlace_fixmethod);
+	    this->ilacefixmethod_textbox->update(string);
+	  }
+}
+
+InterlacefixmethodItem::InterlacefixmethodItem(char *text, int value)
+ : BC_ListBoxItem(text)
+{
+	this->value = value;
+}
+
+InterlacefixmethodPulldown::InterlacefixmethodPulldown(MWindow *mwindow, 
+		BC_TextBox *output_text, 
+		int *output_value,
+		ArrayList<BC_ListBoxItem*> *data,
+		int x, 
+		int y)
+ : BC_ListBox(x,
+ 	y,
+	200,
+	150,
+	LISTBOX_TEXT,
+	data,
+	0,
+	0,
+	1,
+	0,
+	1)
+{
+	char string[BCTEXTLEN];
+
+	this->mwindow = mwindow;
+	this->output_text = output_text;
+	this->output_value = output_value;
+	output_text->update(interlacefixmethod_to_text());
+}
+
+int InterlacefixmethodPulldown::handle_event()
+{
+	output_text->update(get_selection(0, 0)->get_text());
+	*output_value = ((InterlacefixmethodItem*)get_selection(0, 0))->value;
+	return 1;
+}
+
+char* InterlacefixmethodPulldown::interlacefixmethod_to_text()
+{
+	ilacefixmethod_to_text(this->string,*output_value);
+	return (this->string);
+}
+
+AssetEditILaceautofixoption::AssetEditILaceautofixoption(AssetEditWindow *fwindow, char *text, int thedefault, int x, int y, int w)
+ : BC_TextBox(x, y, w, 1, text)
+{
+	this->fwindow = fwindow;
+	this->thedefault = thedefault;
+}
+
+int AssetEditILaceautofixoption::handle_event()
+{
+	fwindow->asset->interlace_autofixoption = ilaceautofixoption_from_text(get_text(), this->thedefault);
+	return 1;
+}
+
+
+AssetEditILacemode::AssetEditILacemode(AssetEditWindow *fwindow, char *text, int thedefault, int x, int y, int w)
+ : BC_TextBox(x, y, w, 1, text)
+{
+	this->fwindow = fwindow;
+	this->thedefault = thedefault;
+}
+
+int AssetEditILacemode::handle_event()
+{
+	fwindow->asset->interlace_mode = ilacemode_from_text(get_text(),this->thedefault);
+	return 1;
+}
+
+AssetEditInterlacemodePulldown::AssetEditInterlacemodePulldown(MWindow *mwindow, 
+		BC_TextBox *output_text,
+		int *output_value,
+		ArrayList<BC_ListBoxItem*> *data,
+		Interlaceautofix *fixoption_chkboxw,
+		int x, 
+		int y)
+ : BC_ListBox(x,
+ 	y,
+	200,
+	150,
+	LISTBOX_TEXT,
+	data,
+	0,
+	0,
+	1,
+	0,
+	1)
+{
+	char string[BCTEXTLEN];
+	this->fixoption_chkbox = fixoption_chkboxw;
+	this->mwindow = mwindow;
+	this->output_text = output_text;
+	this->output_value = output_value;
+	output_text->update(interlacemode_to_text());
+}
+
+int AssetEditInterlacemodePulldown::handle_event()
+{
+	output_text->update(get_selection(0, 0)->get_text());
+	*output_value = ((InterlacemodeItem*)get_selection(0, 0))->value;
+	fixoption_chkbox->showhideotherwidgets();
+	return 1;
+}
+
+char* AssetEditInterlacemodePulldown::interlacemode_to_text()
+{
+	ilacemode_to_text(this->string,*output_value);
+	return (this->string);
+}
+
+AssetEditILacefixmethod::AssetEditILacefixmethod(AssetEditWindow *fwindow, char *text, int thedefault, int x, int y, int w)
+ : BC_TextBox(x, y, w, 1, text)
+{
+	this->fwindow = fwindow;
+	this->thedefault = thedefault;
+}
+
+int AssetEditILacefixmethod::handle_event()
+{
+	fwindow->asset->interlace_fixmethod = ilacefixmethod_from_text(get_text(),this->thedefault);
+	return 1;
+}
+
 AssetEditHeader::AssetEditHeader(AssetEditWindow *fwindow, char *text, int x, int y)
  : BC_TextBox(x, y, 100, 1, text)
 {
@@ -579,22 +839,8 @@
 	return 1;
 }
 
-AssetEditPath::AssetEditPath(MWindow *mwindow, 
-	AssetEditWindow *fwindow, 
-	BC_TextBox *textbox, 
-	int y, 
-	const char *text, 
-	const char *window_title, 
-	const char *window_caption)
- : BrowseButton(mwindow, 
- 	fwindow, 
-	textbox, 
-	310, 
-	y, 
-	text, 
-	window_title, 
-	window_caption, 
-	0) 
+AssetEditPath::AssetEditPath(MWindow *mwindow, AssetEditWindow *fwindow, BC_TextBox *textbox, int y, char *text, char *window_title, char *window_caption)
+ : BrowseButton(mwindow, fwindow, textbox, 310, y, text, window_title, window_caption, 0) 
 { 
 	this->fwindow = fwindow; 
 }
@@ -619,3 +865,65 @@
 	return 1;
 }
 
+
+
+
+AssetEditReelName::AssetEditReelName(AssetEditWindow *fwindow, int x, int y)
+ : BC_TextBox(x, y, 300, 1, fwindow->asset->reel_name)
+{
+	this->fwindow = fwindow;
+}
+AssetEditReelName::~AssetEditReelName()
+{
+}
+int AssetEditReelName::handle_event()
+{
+	strcpy(fwindow->asset->reel_name, get_text());
+}
+
+
+
+
+
+AssetEditReelNumber::AssetEditReelNumber(AssetEditWindow *fwindow, int x, int y)
+ : BC_TextBox(x, y, 200, 1, fwindow->asset->reel_number)
+{
+	this->fwindow = fwindow;
+}
+AssetEditReelNumber::~AssetEditReelNumber()
+{
+}
+int AssetEditReelNumber::handle_event()
+{
+	char *text = get_text() + strlen(get_text()) - 1;
+	
+	// Don't let user enter an invalid character -- only numbers here
+	if(*text < 48 ||
+		*text > 57)
+	{
+		*text = '\0';
+	}
+
+	fwindow->asset->reel_number = atoi(get_text());
+}
+
+
+
+
+
+AssetEditTCStartTextBox::AssetEditTCStartTextBox(AssetEditWindow *fwindow, int value, int x, int y, int multiplier)
+ : BC_TextBox(x, y, 30, 1, value)
+{
+	this->fwindow = fwindow;
+	this->multiplier = multiplier;
+	previous = value;
+}
+AssetEditTCStartTextBox::~AssetEditTCStartTextBox()
+{
+}
+int AssetEditTCStartTextBox::handle_event()
+{
+	fwindow->asset->tcstart -= previous * multiplier;
+	fwindow->asset->tcstart += atoi(get_text()) * multiplier;
+	previous = atoi(get_text());
+}
