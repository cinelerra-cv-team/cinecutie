--- cinecutie/plugin.C	2008-07-21 21:14:01.000000000 +0200
+++ /home/user/cinecutie/cinecutie/plugin.C	2010-02-19 22:19:11.978570999 +0100
@@ -40,7 +40,7 @@
 
 Plugin::Plugin(EDL *edl, 
 		Track *track, 
-		const char *title)
+		char *title)
  : Edit(edl, track)
 {
 	this->track = track;
@@ -56,9 +56,7 @@
 }
 
 
-Plugin::Plugin(EDL *edl, 
-	PluginSet *plugin_set, 
-	const char *title)
+Plugin::Plugin(EDL *edl, PluginSet *plugin_set, char *title)
  : Edit(edl, plugin_set)
 {
 	this->track = plugin_set->track;
@@ -138,7 +136,6 @@
 
 void Plugin::copy_keyframes(Plugin *plugin)
 {
-	
 	keyframes->copy_from(plugin->keyframes);
 }
 
@@ -146,15 +143,9 @@
 	int64_t end, 
 	FileXML *file, 
 	int default_only,
-	int active_only)
+	int autos_only)
 {
-// Only 1 default is copied from where the start position is
-	int64_t endproject = startproject + length;
-	if(!default_only ||
-		(default_only &&
-			start < endproject &&
-			start >= startproject))
-		keyframes->copy(start, end, file, default_only, active_only);
+	keyframes->copy(start, end, file, default_only, autos_only);
 }
 
 void Plugin::synchronize_params(Edit *edit)
@@ -295,21 +286,8 @@
 		startproject == that->startproject) return 1;
 
 	return 0;
-
-}
-
-int Plugin::keyframe_exists(KeyFrame *ptr)
-{
-	for(KeyFrame *current = (KeyFrame*)keyframes->first; 
-		current;
-		current = (KeyFrame*)NEXT)
-	{
-		if(current == ptr) return 1;
-	}
-	return 0;
 }
 
-
 void Plugin::change_plugin(char *title, 
 		SharedLocation *shared_location, 
 		int plugin_type)
@@ -324,7 +302,38 @@
 KeyFrame* Plugin::get_prev_keyframe(int64_t position,
 	int direction)
 {
-	return keyframes->get_prev_keyframe(position, direction);
+	KeyFrame *current = 0;
+
+// This doesn't work because edl->selectionstart doesn't change during
+// playback at the same rate as PluginClient::source_position.
+	if(position < 0)
+	{
+		position = track->to_units(edl->local_session->get_selectionstart(1), 0);
+	}
+
+// Get keyframe on or before current position
+	for(current = (KeyFrame*)keyframes->last;
+		current;
+		current = (KeyFrame*)PREVIOUS)
+	{
+		if(direction == PLAY_FORWARD && current->position <= position) break;
+		else
+		if(direction == PLAY_REVERSE && current->position < position) break;
+	}
+
+// Nothing before current position
+	if(!current && keyframes->first)
+	{
+		current = (KeyFrame*)keyframes->first;
+	}
+	else
+// No keyframes
+	if(!current)
+	{
+		current = (KeyFrame*)keyframes->default_auto;
+	}
+
+	return current;
 }
 
 KeyFrame* Plugin::get_next_keyframe(int64_t position,
@@ -367,7 +376,30 @@
 
 KeyFrame* Plugin::get_keyframe()
 {
-	return keyframes->get_keyframe();
+// Search for keyframe on or before selection
+	KeyFrame *result = 
+		get_prev_keyframe(track->to_units(edl->local_session->get_selectionstart(1), 0), 
+			PLAY_FORWARD);
+
+// Return nearest keyframe if not in automatic keyframe generation
+	if(!edl->session->auto_keyframes)
+	{
+		return result;
+	}
+	else
+// Return new keyframe
+	if(result == (KeyFrame*)keyframes->default_auto || 
+		result->position != track->to_units(edl->local_session->get_selectionstart(1), 0))
+	{
+		return (KeyFrame*)keyframes->insert_auto(track->to_units(edl->local_session->get_selectionstart(1), 0));
+	}
+	else
+// Return existing keyframe
+	{
+		return result;
+	}
+
+	return 0;
 }
 
 void Plugin::copy(int64_t start, int64_t end, FileXML *file)
@@ -421,21 +453,29 @@
 		{
 			file->tag.set_title("IN");
 			file->append_tag();
+			file->tag.set_title("/IN");
+			file->append_tag();
 		}
 		if(out)
 		{
 			file->tag.set_title("OUT");
 			file->append_tag();
+			file->tag.set_title("/OUT");
+			file->append_tag();
 		}
 		if(show)
 		{
 			file->tag.set_title("SHOW");
 			file->append_tag();
+			file->tag.set_title("/SHOW");
+			file->append_tag();
 		}
 		if(on)
 		{
 			file->tag.set_title("ON");
 			file->append_tag();
+			file->tag.set_title("/ON");
+			file->append_tag();
 		}
 		file->append_newline();
 
