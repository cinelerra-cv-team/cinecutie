--- cinecutie/pluginset.C	2008-07-21 21:14:01.000000000 +0200
+++ /home/user/cinecutie/cinecutie/pluginset.C	2010-02-19 22:19:11.988570758 +0100
@@ -32,7 +32,7 @@
 #include <string.h>
 
 PluginSet::PluginSet(EDL *edl, Track *track)
- : Edits(edl, track)
+ : Edits(edl, track, create_edit())
 {
 	record = 1;
 }
@@ -136,7 +136,7 @@
 	}
 }
 
-Plugin* PluginSet::insert_plugin(const char *title, 
+Plugin* PluginSet::insert_plugin(char *title, 
 	int64_t unit_position, 
 	int64_t unit_length,
 	int plugin_type,
@@ -144,7 +144,7 @@
 	KeyFrame *default_keyframe,
 	int do_optimize)
 {
-	Plugin *plugin = (Plugin*)paste_silence(unit_position, 
+	Plugin *plugin = (Plugin*)create_and_insert_edit(unit_position, 
 		unit_position + unit_length);
 
 
@@ -226,7 +226,7 @@
 	int64_t end, 
 	FileXML *file, 
 	int default_only,
-	int active_only)
+	int autos_only)
 {
 	file->tag.set_title("PLUGINSET");	
 	file->append_tag();
@@ -236,7 +236,7 @@
 		current; 
 		current = (Plugin*)NEXT)
 	{
-		current->copy_keyframes(start, end, file, default_only, active_only);
+		current->copy_keyframes(start, end, file, default_only, autos_only);
 	}
 
 	file->tag.set_title("/PLUGINSET");	
@@ -249,35 +249,138 @@
 	int64_t length, 
 	FileXML *file, 
 	int default_only,
-	int active_only)
+	Track *track)
 {
 	int result = 0;
-	int first_keyframe = 1;
 	Plugin *current;
+	
+	PluginSet *target_pluginset;
+	Plugin *first_target_plugin = 0;
 
-
+	ArrayList<PluginSet*> unused_pluginsets;
+	
+// get all available target pluginsets, we will be removing them one by one when we will paste into them
+	for (int i = 0; i < track->plugin_set.total; i++)
+	{
+		unused_pluginsets.append(track->plugin_set.values[i]);
+	}
+	
+	char data[MESSAGESIZE];
+	char data_default_keyframe[MESSAGESIZE];
+	int default_keyframe;
+	int do_default_keyframe = 0;
+	
 	while(!result)
 	{
 		result = file->read_tag();
 
 		if(!result)
 		{
-			if(file->tag.title_is("/PLUGINSET"))
+			if(file->tag.title_is("/PLUGINSETS"))
 				result = 1;
 			else
+			if(file->tag.title_is("PLUGINSET"))
+			{
+				target_pluginset = 0;
+				first_target_plugin = 0;
+			}
+			else
 			if(file->tag.title_is("KEYFRAME"))
 			{
 				int64_t position = file->tag.get_property("POSITION", 0);
-				if(first_keyframe && default_only)
+				position += start;
+				if(file->tag.get_property("DEFAULT", 0))
 				{
-					position = start;
+// remember the default keyframe, we'll use it later
+					default_keyframe = 1; 
+					do_default_keyframe = 1;
+					file->read_text_until("/KEYFRAME", data_default_keyframe, MESSAGESIZE);
 				}
 				else
 				{
-					position += start;
+					default_keyframe = 0;
+					file->read_text_until("/KEYFRAME", data, MESSAGESIZE);				
+				
 				}
 
+//				printf("d: a%sb\n", data);
+				Plugin *picked_first_target = 0;
+				if (!target_pluginset && default_keyframe && default_only && strlen(data_default_keyframe) > 0)
+				{
+					strcpy(data, data_default_keyframe);
+				} 
+				if ((!target_pluginset && !default_keyframe && strlen(data) > 0) ||	
+				    (!target_pluginset && default_keyframe && default_only && strlen(data_default_keyframe) > 0))	 
+				{
+// now try to find the target		
+					int name_len = strchr(data, ' ') - data + 1;
+
+					PluginSet *second_choice = 0;
+					Plugin *second_choice_first_target_plugin = 0;
+					for (int i = 0; i < unused_pluginsets.total && !target_pluginset; i++)
+					{
+						PluginSet *pluginset = unused_pluginsets.values[i];
+						Plugin *current;
+						for(current = (Plugin*)(pluginset->last); 
+							current;
+							current = (Plugin*)PREVIOUS)
+						{
+							if(position >= current->startproject 
+							&& position <= current->length + current->startproject 
+							&& !strncmp(((KeyFrame *)current->keyframes->default_auto)->data, data, name_len))
+							{
+								target_pluginset = pluginset;
+								first_target_plugin = current;
+								break;
+							}
+							if(position >= current->startproject 
+							&& !strncmp(((KeyFrame *)current->keyframes->default_auto)->data, data, name_len))
+							{
+								second_choice = pluginset;
+								second_choice_first_target_plugin = current;
+								break;
+							}
+												
+						}
+					}
+					if (!target_pluginset) 
+					{
+						target_pluginset = second_choice;
+						first_target_plugin = second_choice_first_target_plugin;
+					}
+				}
+//				printf(" Target: %p\n", target_pluginset);
+				if (target_pluginset) 
+				{
+					unused_pluginsets.remove(target_pluginset);
+					if (do_default_keyframe)
+					{
+// default plugin is always delayed
+						KeyFrame *keyframe = (KeyFrame*)first_target_plugin->keyframes->default_auto;
+						strcpy(keyframe->data, data_default_keyframe);
+						keyframe->position = position;
+						do_default_keyframe = 0;
+					}
+					if (!default_only && !default_keyframe)
+					{
+						for(current = (Plugin*)target_pluginset->last; 
+							current;
+							current = (Plugin*)PREVIOUS)
+						{
+							if(position >= current->startproject)
+							{
+								KeyFrame *keyframe;
+								keyframe = (KeyFrame*)current->keyframes->insert_auto(position);
+								strcpy(keyframe->data, data);
+								keyframe->position = position;
+								break;
+							}
+						}
+					}
+				}
+				
 // Get plugin owning keyframe
+/*
 				for(current = (Plugin*)last; 
 					current;
 					current = (Plugin*)PREVIOUS)
@@ -287,28 +390,22 @@
 // paste keyframes from one plugin into an incompatible plugin.
 					if(position >= current->startproject)
 					{
-						KeyFrame *keyframe = 0;
+						KeyFrame *keyframe;
 						if(file->tag.get_property("DEFAULT", 0) || default_only)
 						{
 							keyframe = (KeyFrame*)current->keyframes->default_auto;
 						}
 						else
-						if(!default_only)
 						{
 							keyframe = 
 								(KeyFrame*)current->keyframes->insert_auto(position);
 						}
-
-						if(keyframe)
-						{
-							keyframe->load(file);
-							keyframe->position = position;
-						}
+						keyframe->load(file);
+						keyframe->position = position;
 						break;
 					}
 				}
-
-				first_keyframe = 0;
+*/
 			}
 		}
 	}
@@ -389,6 +486,7 @@
 			if(file->tag.title_is("PLUGIN"))
 			{
 				int64_t length = file->tag.get_property("LENGTH", (int64_t)0);
+				loaded_length += length;
 				int plugin_type = file->tag.get_property("TYPE", 1);
 				char title[BCTEXTLEN];
 				title[0] = 0;
@@ -421,6 +519,7 @@
 			}
 		}
 	}while(!result);
+	optimize();
 }
 
 
@@ -528,16 +627,22 @@
     		current_edit = (Plugin*)current_edit->next;
 		}
 
-// delete last edit if 0 length or silence
-		if(last)
-		{
-			if(last->silence() || !last->length)
-			{
-				delete last;
-				result = 1;
-			}
-		}
 	}
+	if (!last || !last->silence())
+	{
+// No last empty edit available... create one
+		Edit *empty_edit = create_edit();
+		if (!last) 
+			empty_edit->startproject = 0;
+		else
+			empty_edit->startproject = last->startproject + last->length;
+		empty_edit->length = LAST_VIRTUAL_LENGTH;
+		insert_after(last, empty_edit);
+	} else
+	{
+		last->length = LAST_VIRTUAL_LENGTH;
+	}
+
 
 	return 0;
 }
