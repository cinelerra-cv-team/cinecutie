--- cinecutie/new.C	2008-10-11 17:46:25.000000000 +0200
+++ /home/user/cinecutie/cinecutie/new.C	2010-02-19 22:19:11.978570999 +0100
@@ -26,6 +26,7 @@
 #include "edl.h"
 #include "edlsession.h"
 #include "filexml.h"
+#include "interlacemodes.h"
 #include "language.h"
 #include "levelwindow.h"
 #include "mainundo.h"
@@ -57,31 +58,40 @@
 {
 	this->mwindow = mwindow;
 	script = 0;
-	new_edl = 0;
 }
 
-void New::create_objects()
+int New::create_objects()
 {
 	thread = new NewThread(mwindow, this);
+	return 0;
 }
 
 int New::handle_event() 
 {
-	mwindow->gui->unlock_window();
-	thread->start();
-	mwindow->gui->lock_window("New::handle_event");
+	if(thread->running())
+	{
+		thread->window_lock->lock("New::handle_event");
+		if(thread->nwindow)
+		{
+			thread->nwindow->lock_window("New::handle_event");
+			thread->nwindow->raise_window();
+			thread->nwindow->unlock_window();
+		}
+		thread->window_lock->unlock();
+		return 1;
+	}
+	mwindow->edl->save_defaults(mwindow->defaults);
+	create_new_edl();
+	thread->start(); 
 
 	return 1;
 }
 
 void New::create_new_edl()
 {
-	if(!new_edl)
-	{
-		new_edl = new EDL;
-		new_edl->create_objects();
-		new_edl->load_defaults(mwindow->defaults);
-	}
+	new_edl = new EDL;
+	new_edl->create_objects();
+	new_edl->load_defaults(mwindow->defaults);
 }
 
 
@@ -101,8 +111,6 @@
 	mwindow->gui->lock_window();
 	mwindow->reset_caches();
 
-
-
 	memcpy(new_edl->session->achannel_positions,
 		&mwindow->preferences->channel_positions[
 			MAXCHANNELS * (new_edl->session->audio_channels - 1)],
@@ -110,58 +118,54 @@
 	new_edl->session->boundaries();
 	new_edl->create_default_tracks();
 
-	mwindow->undo->update_undo_before();
 	mwindow->set_filename("");
+	mwindow->undo->update_undo(_("New"), LOAD_ALL);
 
 	mwindow->hide_plugins();
 	delete mwindow->edl;
 	mwindow->edl = new_edl;
-	new_edl = 0;
 	mwindow->save_defaults();
 
 // Load file sequence
 	mwindow->update_project(LOAD_REPLACE);
 	mwindow->session->changes_made = 0;
-	mwindow->undo->update_undo_after(_("New"), LOAD_ALL);
 	mwindow->gui->unlock_window();
 	return 0;
 }
 
 NewThread::NewThread(MWindow *mwindow, New *new_project)
- : BC_DialogThread()
+ : Thread()
 {
 	this->mwindow = mwindow;
 	this->new_project = new_project;
+	window_lock = new Mutex("NewThread::window_lock");
 }
 
 NewThread::~NewThread()
 {
+	delete window_lock;
 }
 
 
-
-BC_Window* NewThread::new_gui()
+void NewThread::run()
 {
 	int result = 0;
-	
-	mwindow->edl->save_defaults(mwindow->defaults);
-	new_project->create_new_edl();
 	load_defaults();
 
-	mwindow->gui->lock_window("NewThread::new_gui");
-	int x = mwindow->gui->get_abs_cursor_x(0) - WIDTH / 2;
-	int y = mwindow->gui->get_abs_cursor_y(0) - HEIGHT / 2;
+	int x = mwindow->gui->get_root_w(0, 1) / 2 - WIDTH / 2;
+	int y = mwindow->gui->get_root_h(1) / 2 - HEIGHT / 2;
 
+	window_lock->lock("NewThread::run 1\n");
 	nwindow = new NewWindow(mwindow, this, x, y);
 	nwindow->create_objects();
-	mwindow->gui->unlock_window();
-	return nwindow;
-}
-
+	window_lock->unlock();
 
+	result = nwindow->run_window();
 
-void NewThread::handle_close_event(int result)
-{
+	window_lock->lock("NewThread::run 2\n");
+	delete nwindow;	
+	nwindow = 0;
+	window_lock->unlock();
 
 	new_project->new_edl->save_defaults(mwindow->defaults);
 	mwindow->defaults->save();
@@ -170,7 +174,6 @@
 	{
 // Aborted
 		delete new_project->new_edl;
-		new_project->new_edl = 0;
 	}
 	else
 	{
@@ -178,8 +181,6 @@
 	}
 }
 
-
-
 int NewThread::load_defaults()
 {
 	auto_aspect = mwindow->defaults->get("AUTOASPECT", 0);
@@ -213,7 +214,7 @@
 
 
 #if 0
-N_("Cinelerra: New Project");
+N_("Cinecutie: New Project");
 #endif
 
 NewWindow::NewWindow(MWindow *mwindow, NewThread *new_thread, int x, int y)
@@ -236,17 +237,14 @@
 
 NewWindow::~NewWindow()
 {
-	lock_window("NewWindow::~NewWindow");
 	if(format_presets) delete format_presets;
-	unlock_window();
 }
 
-void NewWindow::create_objects()
+int NewWindow::create_objects()
 {
 	int x = 10, y = 10, x1, y1;
 	BC_TextBox *textbox;
 
-	lock_window("NewWindow::create_objects");
 	mwindow->theme->draw_new_bg(this);
 
 	add_subwindow(new BC_Title(x, y, _("Parameters for the new project:")));
@@ -374,14 +372,24 @@
 	add_subwindow(new NewAspectAuto(this, x1, y));
 	y += 40;
 	add_subwindow(new BC_Title(x, y, _("Color model:")));
-	x += 100;
-	add_subwindow(textbox = new BC_TextBox(x, y, 200, 1, ""));
-	x += textbox->get_w();
+	add_subwindow(textbox = new BC_TextBox(x + 100, y, 200, 1, ""));
 	add_subwindow(new ColormodelPulldown(mwindow, 
 		textbox, 
 		&new_edl->session->color_model,
-		x, 
+		x + 100 + textbox->get_w(),
 		y));
+	y += textbox->get_h() + 5;
+
+	// --------------------
+	add_subwindow(new BC_Title(x, y, _("Interlace mode:")));
+	add_subwindow(textbox = new BC_TextBox(x + 100, y, 140, 1, ""));
+	add_subwindow(interlace_pulldown = new InterlacemodePulldown(mwindow, 
+		textbox, 
+		&new_edl->session->interlace_mode,
+		(ArrayList<BC_ListBoxItem*>*)&mwindow->interlace_project_modes,
+		x + 100 + textbox->get_w(), 
+		y)); 
+	y += textbox->get_h() + 5;
 
 	add_subwindow(new BC_OKButton(this, 
 		mwindow->theme->get_image_set("new_ok_images")));
@@ -390,7 +398,7 @@
 	flash();
 	update();
 	show_window();
-	unlock_window();
+	return 0;
 }
 
 int NewWindow::update()
@@ -405,6 +413,7 @@
 	output_h_text->update((int64_t)new_edl->session->output_h);
 	aspect_w_text->update((float)new_edl->session->aspect_w);
 	aspect_h_text->update((float)new_edl->session->aspect_h);
+	interlace_pulldown->update(new_edl->session->interlace_mode);
 	return 0;
 }
 
@@ -436,7 +445,7 @@
 
 
 
-NewATracks::NewATracks(NewWindow *nwindow, const char *text, int x, int y)
+NewATracks::NewATracks(NewWindow *nwindow, char *text, int x, int y)
  : BC_TextBox(x, y, 90, 1, text)
 {
 	this->nwindow = nwindow;
@@ -468,7 +477,7 @@
 	return 1;
 }
 
-NewAChannels::NewAChannels(NewWindow *nwindow, const char *text, int x, int y)
+NewAChannels::NewAChannels(NewWindow *nwindow, char *text, int x, int y)
  : BC_TextBox(x, y, 90, 1, text)
 {
 	this->nwindow = nwindow;
@@ -501,7 +510,7 @@
 }
 
 
-NewSampleRate::NewSampleRate(NewWindow *nwindow, const char *text, int x, int y)
+NewSampleRate::NewSampleRate(NewWindow *nwindow, char *text, int x, int y)
  : BC_TextBox(x, y, 90, 1, text)
 {
 	this->nwindow = nwindow;
@@ -551,7 +560,7 @@
 
 
 
-NewVTracks::NewVTracks(NewWindow *nwindow, const char *text, int x, int y)
+NewVTracks::NewVTracks(NewWindow *nwindow, char *text, int x, int y)
  : BC_TextBox(x, y, 90, 1, text)
 {
 	this->nwindow = nwindow;
@@ -583,7 +592,7 @@
 	return 1;
 }
 
-NewVChannels::NewVChannels(NewWindow *nwindow, const char *text, int x, int y)
+NewVChannels::NewVChannels(NewWindow *nwindow, char *text, int x, int y)
  : BC_TextBox(x, y, 90, 1, text)
 {
 	this->nwindow = nwindow;
@@ -615,7 +624,7 @@
 	return 1;
 }
 
-NewFrameRate::NewFrameRate(NewWindow *nwindow, const char *text, int x, int y)
+NewFrameRate::NewFrameRate(NewWindow *nwindow, char *text, int x, int y)
  : BC_TextBox(x, y, 90, 1, text)
 {
 	this->nwindow = nwindow;
@@ -723,7 +732,7 @@
 	return 1;
 }
 
-NewAspectW::NewAspectW(NewWindow *nwindow, const char *text, int x, int y)
+NewAspectW::NewAspectW(NewWindow *nwindow, char *text, int x, int y)
  : BC_TextBox(x, y, 70, 1, text)
 {
 	this->nwindow = nwindow;
@@ -735,7 +744,7 @@
 	return 1;
 }
 
-NewAspectH::NewAspectH(NewWindow *nwindow, const char *text, int x, int y)
+NewAspectH::NewAspectH(NewWindow *nwindow, char *text, int x, int y)
  : BC_TextBox(x, y, 70, 1, text)
 {
 	this->nwindow = nwindow;
@@ -792,7 +801,7 @@
 	return 1;
 }
 
-ColormodelItem::ColormodelItem(const char *text, int value)
+ColormodelItem::ColormodelItem(char *text, int value)
  : BC_ListBoxItem(text)
 {
 	this->value = value;
@@ -828,7 +837,7 @@
 	return 1;
 }
 
-const char* ColormodelPulldown::colormodel_to_text()
+char* ColormodelPulldown::colormodel_to_text()
 {
 	for(int i = 0; i < mwindow->colormodels.total; i++)
 		if(mwindow->colormodels.values[i]->value == *output_value) 
@@ -836,13 +845,56 @@
 	return "Unknown";
 }
 
+InterlacemodeItem::InterlacemodeItem(char *text, int value)
+ : BC_ListBoxItem(text)
+{
+	this->value = value;
+}
 
+InterlacemodePulldown::InterlacemodePulldown(MWindow *mwindow, 
+		BC_TextBox *output_text,
+		int *output_value,
+		ArrayList<BC_ListBoxItem*> *data,
+		int x, 
+		int y)
+ : BC_ListBox(x,
+ 	y,
+	200,
+	150,
+	LISTBOX_TEXT,
+	data,
+	0,
+	0,
+	1,
+	0,
+	1)
+{
+	char string[BCTEXTLEN];
+	this->mwindow = mwindow;
+	this->output_text = output_text;
+	this->output_value = output_value;
+	output_text->update(interlacemode_to_text());
+}
 
+int InterlacemodePulldown::handle_event()
+{
+	output_text->update(get_selection(0, 0)->get_text());
+	*output_value = ((InterlacemodeItem*)get_selection(0, 0))->value;
+	return 1;
+}
 
+char* InterlacemodePulldown::interlacemode_to_text()
+{
+	ilacemode_to_text(this->string,*output_value);
+	return (this->string);
+}
 
-
-
-
+int InterlacemodePulldown::update(int interlace_mode)
+{
+	*output_value = interlace_mode;
+	output_text->update(interlacemode_to_text());
+	return 1;
+}
 
 
 NewAspectAuto::NewAspectAuto(NewWindow *nwindow, int x, int y)
