--- cinecutie/render.C	2008-10-11 17:46:25.000000000 +0200
+++ /home/user/cinecutie/cinecutie/render.C	2010-02-19 22:19:11.988570758 +0100
@@ -24,7 +24,6 @@
 #include "auto.h"
 #include "batchrender.h"
 #include "bcprogressbox.h"
-#include "bcsignals.h"
 #include "cache.h"
 #include "clip.h"
 #include "compresspopup.h"
@@ -71,6 +70,7 @@
 #include "vframe.h"
 #include "videoconfig.h"
 #include "vrender.h"
+#include "renderprofiles.h"
 
 #include <ctype.h>
 #include <string.h>
@@ -241,6 +241,7 @@
 	counter_lock = new Mutex("Render::counter_lock");
 	completion = new Condition(0, "Render::completion");
 	progress_timer = new Timer;
+	range_type = RANGE_BACKCOMPAT;
 }
 
 Render::~Render()
@@ -264,12 +265,18 @@
 	}
 	else
 	{
-		ErrorBox error_box(PROGRAM_NAME ": Error",
-			mwindow->gui->get_abs_cursor_x(1),
-			mwindow->gui->get_abs_cursor_y(1));
-		error_box.create_objects("Already rendering");
-		error_box.raise_window();
-		error_box.run_window();
+		// raise the window if rendering hasn't started yet
+		if (render_window && ! in_progress) {
+			render_window->raise_window();
+		}
+		else {
+			ErrorBox error_box(PROGRAM_NAME ": Error",
+					   mwindow->gui->get_abs_cursor_x(1),
+					   mwindow->gui->get_abs_cursor_y(1));
+			error_box.create_objects("Already rendering");
+			error_box.raise_window();
+			error_box.run_window();
+		}
 	}
 }
 
@@ -325,66 +332,65 @@
 void Render::run()
 {
 	int format_error;
-	const int debug = 0;
+
 
 	result = 0;
 
 	if(mode == Render::INTERACTIVE)
 	{
 // Fix the asset for rendering
-if(debug) printf("Render::run %d\n%", __LINE__);
+printf("Render::run 1\n");
 		Asset *asset = new Asset;
 		load_defaults(asset);
-if(debug) printf("Render::run %d\n%", __LINE__);
+printf("Render::run 2\n");
 		check_asset(mwindow->edl, *asset);
-if(debug) printf("Render::run %d\n%", __LINE__);
+printf("Render::run 3\n");
 
 // Get format from user
 		if(!result)
 		{
-if(debug) printf("Render::run %d\n%", __LINE__);
+printf("Render::run 4\n");
 			do
 			{
 				format_error = 0;
 				result = 0;
 
 				{
-if(debug) printf("Render::run %d\n%", __LINE__);
-					RenderWindow window(mwindow, 
-						this, 
-						asset,
-						mwindow->gui->get_abs_cursor_x(1),
-						mwindow->gui->get_abs_cursor_y(1));
-if(debug) printf("Render::run %d\n%", __LINE__);
+printf("Render::run 5\n");
+					RenderWindow window(mwindow, this, asset);
+printf("Render::run 6\n");
 					window.create_objects();
-if(debug) printf("Render::run %d\n%", __LINE__);
+printf("Render::run 7\n");
 					result = window.run_window();
-if(debug) printf("Render::run %d\n%", __LINE__);
+printf("Render::run 8\n");
+					if (! result) {
+						// add to recentlist only on OK
+						window.format_tools->path_recent->add_item(FILE_FORMAT_PREFIX(asset->format), asset->path);
+					}
 				}
 
-
 				if(!result)
 				{
-if(debug) printf("Render::run %d\n%", __LINE__);
+printf("Render::run 8.1\n");
 // Check the asset format for errors.
 					FormatCheck format_check(asset);
-if(debug) printf("Render::run %d\n%", __LINE__);
+printf("Render::run 8.2\n");
 					format_error = format_check.check_format();
-if(debug) printf("Render::run %d\n%", __LINE__);
+printf("Render::run 8.3\n");
 				}
 			}while(format_error && !result);
 		}
-if(debug) printf("Render::run %d\n%", __LINE__);
+printf("Render::run 9\n");
 
 		save_defaults(asset);
 		mwindow->save_defaults();
-if(debug) printf("Render::run %d\n%", __LINE__);
+printf("Render::run 10\n");
 
-		if(!result) render(1, asset, mwindow->edl, strategy);
-if(debug) printf("Render::run %d\n%", __LINE__);
+		if(!result) render(1, asset, mwindow->edl, strategy, range_type);
+printf("Render::run 11\n");
 
 		Garbage::delete_object(asset);
-if(debug) printf("Render::run %d\n%", __LINE__);
+printf("Render::run 12\n");
 	}
 	else
 	if(mode == Render::BATCH)
@@ -412,7 +418,8 @@
 					plugindb = mwindow->plugindb;
 				edl->load_xml(plugindb, file, LOAD_ALL);
 
-				render(0, job->asset, edl, job->strategy);
+				check_asset(edl, *job->asset);
+				render(0, job->asset, edl, job->strategy, RANGE_BACKCOMPAT);
 
 				delete edl;
 				delete file;
@@ -447,7 +454,7 @@
 			mwindow->batch_render->update_done(-1, 0, 0);
 		}
 	}
-if(debug) printf("Render::run %d\n%", __LINE__);
+printf("Render::run 100\n");
 }
 
 
@@ -462,11 +469,20 @@
 		asset.layers = 1;
 		asset.width = edl->session->output_w;
 		asset.height = edl->session->output_h;
+		asset.interlace_mode = edl->session->interlace_mode;
+		asset.tcstart = (int64_t) (edl->session->get_frame_offset() +
+			edl->local_session->get_selectionstart() *
+				edl->session->frame_rate);
+		asset.tcend = (int64_t) (edl->session->get_frame_offset() +
+			edl->local_session->get_selectionend() *
+				edl->session->frame_rate);
 	}
 	else
 	{
 		asset.video_data = 0;
 		asset.layers = 0;
+		asset.tcstart = 0;
+		asset.tcend = 0;
 	}
 
 	if(asset.audio_data && 
@@ -476,11 +492,19 @@
 		asset.audio_data = 1;
 		asset.channels = edl->session->audio_channels;
 		if(asset.format == FILE_MOV) asset.byte_order = 0;
+		asset.tcstart = (int64_t) (edl->session->get_frame_offset() +
+			edl->local_session->get_selectionstart() *
+				edl->session->sample_rate);
+		asset.tcend = (int64_t) (edl->session->get_frame_offset() +
+			edl->local_session->get_selectionend() *
+				edl->session->sample_rate);
 	}
 	else
 	{
 		asset.audio_data = 0;
 		asset.channels = 0;
+		asset.tcstart = 0;
+		asset.tcend = 0;
 	}
 
 	if(!asset.audio_data &&
@@ -518,11 +542,8 @@
 	char string[BCTEXTLEN];
 	FileSystem fs;
 
-	progress_max = Units::to_int64(default_asset->sample_rate * 
-			(total_end - total_start)) +
-		Units::to_int64(preferences->render_preroll * 
-			packages->total_allocated * 
-			default_asset->sample_rate);
+	progress_max = packages->get_progress_max();
+
 	progress_timer->update();
 	last_eta = 0;
 	if(mwindow)
@@ -564,7 +585,8 @@
 int Render::render(int test_overwrite, 
 	Asset *asset,
 	EDL *edl,
-	int strategy)
+	int strategy,
+	int range_type)
 {
 	char string[BCTEXTLEN];
 // Total length in seconds
@@ -603,10 +625,25 @@
 	command->command = NORMAL_FWD;
 	command->get_edl()->copy_all(edl);
 	command->change_type = CHANGE_ALL;
+	if (range_type == RANGE_BACKCOMPAT)
+	{
 // Get highlighted playback range
-	command->set_playback_range();
+		command->set_playback_range();
 // Adjust playback range with in/out points
-	command->adjust_playback_range();
+		command->playback_range_adjust_inout();
+	} else
+	if (range_type == RANGE_PROJECT)
+	{
+		command->playback_range_project();
+	} else
+	if (range_type == RANGE_SELECTION)
+	{
+		command->set_playback_range();
+	} else
+	if (range_type == RANGE_INOUT)
+	{
+		command->playback_range_inout();
+	}
 	packages = new PackageDispatcher;
 
 
@@ -797,6 +834,7 @@
 		if(strategy == SINGLE_PASS_FARM || strategy == FILE_PER_LABEL_FARM)
 		{
 			farm_server->wait_clients();
+			result |= packages->packages_are_done();
 		}
 
 printf("Render::render 90\n");
@@ -820,12 +858,11 @@
 				printf("Render::render: Error rendering data\n");
 			}
 		}
-printf("Render::render 91\n");
 
 // Delete the progress box
 		stop_progress();
 
-printf("Render::render 100\n");
+//printf("Render::render 100\n");
 
 
 
@@ -842,7 +879,6 @@
 	{
 		mwindow->gui->lock_window("Render::render 3");
 
-		mwindow->undo->update_undo_before();
 
 
 
@@ -855,12 +891,13 @@
 			0,
 			0,
 			mwindow->edl->session->labels_follow_edits,
-			mwindow->edl->session->plugins_follow_edits);
+			mwindow->edl->session->plugins_follow_edits,
+			0); // overwrite
 		delete assets;
 
 
 		mwindow->save_backup();
-		mwindow->undo->update_undo_after(_("render"), LOAD_ALL);
+		mwindow->undo->update_undo(_("render"), LOAD_ALL);
 		mwindow->update_plugin_guis();
 		mwindow->gui->update(1, 
 			2,
@@ -873,7 +910,6 @@
 		mwindow->gui->unlock_window();
 	}
 
-printf("Render::render 110\n");
 
 // Disable hourglass
 	if(mwindow)
@@ -896,7 +932,7 @@
 	delete packages;
 	in_progress = 0;
 	completion->unlock();
-printf("Render::render 120\n");
+//printf("Render::render 120\n");
 
 	return result;
 }
@@ -988,6 +1024,7 @@
 {
 	strategy = mwindow->defaults->get("RENDER_STRATEGY", SINGLE_PASS);
 	load_mode = mwindow->defaults->get("RENDER_LOADMODE", LOAD_NEW_TRACKS);
+	range_type = mwindow->defaults->get("RENDER_RANGE_TYPE", RANGE_PROJECT);
 
 
 	asset->load_defaults(mwindow->defaults, 
@@ -1002,10 +1039,38 @@
 	return 0;
 }
 
+int Render::load_profile(int profile_slot, Asset *asset)
+{
+	char string_name[100];
+	sprintf(string_name, "RENDER_%i_STRATEGY", profile_slot);
+	strategy = mwindow->defaults->get(string_name, SINGLE_PASS);
+// Load mode is not part of the profile
+//	printf(string_name, "RENDER_%i_LOADMODE", profile_slot);
+//	load_mode = mwindow->defaults->get(string_name, LOAD_NEW_TRACKS);
+	sprintf(string_name, "RENDER_%i_RANGE_TYPE", profile_slot);
+	range_type = mwindow->defaults->get(string_name, RANGE_PROJECT);
+
+
+	sprintf(string_name, "RENDER_%i_", profile_slot);
+	asset->load_defaults(mwindow->defaults, 
+		string_name, 
+		1,
+		1,
+		1,
+		1,
+		1);
+
+
+	return 0;
+}
+
+
+
 int Render::save_defaults(Asset *asset)
 {
 	mwindow->defaults->update("RENDER_STRATEGY", strategy);
 	mwindow->defaults->update("RENDER_LOADMODE", load_mode);
+	mwindow->defaults->update("RENDER_RANGE_TYPE", range_type);
 
 
 
@@ -1025,17 +1090,13 @@
 
 
 #define WIDTH 410
-#define HEIGHT 360
+#define HEIGHT 455
 
 
-RenderWindow::RenderWindow(MWindow *mwindow, 
-	Render *render, 
-	Asset *asset,
-	int x, 
-	int y)
+RenderWindow::RenderWindow(MWindow *mwindow, Render *render, Asset *asset)
  : BC_Window(PROGRAM_NAME ": Render", 
- 	x - WIDTH / 2,
-	y - HEIGHT / 2,
+ 	mwindow->gui->get_root_w(0, 1) / 2 - WIDTH / 2,
+	mwindow->gui->get_root_h(1) / 2 - HEIGHT / 2,
  	WIDTH, 
 	HEIGHT,
 	(int)BC_INFINITY,
@@ -1051,19 +1112,23 @@
 
 RenderWindow::~RenderWindow()
 {
-	lock_window("RenderWindow::~RenderWindow");
 	delete format_tools;
-//printf("RenderWindow::~RenderWindow %d\n", __LINE__);
 	delete loadmode;
-	unlock_window();
+}
+
+
+int RenderWindow::load_profile(int profile_slot)
+{
+	render->load_profile(profile_slot, asset);
+	update_range_type(render->range_type);
+	format_tools->update(asset, &render->strategy);
 }
 
 
 
-void RenderWindow::create_objects()
+int RenderWindow::create_objects()
 {
-	int x = 10, y = 5;
-	lock_window("RenderWindow::create_objects");
+	int x = 5, y = 5;
 	add_subwindow(new BC_Title(x, 
 		y, 
 		(char*)((render->strategy == FILE_PER_LABEL || 
@@ -1087,12 +1152,83 @@
 		0,
 		&render->strategy,
 		0);
+	add_subwindow(new BC_Title(x, 
+		y, 
+			_("Render range:")));
+
+	x += 110;
+	add_subwindow(rangeproject = new RenderRangeProject(this, 
+		render->range_type == RANGE_PROJECT, 
+		x, 
+		y));
+	y += 20;
+	add_subwindow(rangeselection = new RenderRangeSelection(this, 
+		render->range_type == RANGE_SELECTION, 
+		x, 
+		y));
+	y += 20;
+	add_subwindow(rangeinout = new RenderRangeInOut(this, 
+		render->range_type == RANGE_INOUT, 
+		x, 
+		y));
+	y += 30;
+	x = 5;
 
+	renderprofile = new RenderProfile(mwindow, this, x, y, 1);
+	renderprofile->create_objects();
+	y += 70;
 	loadmode = new LoadMode(mwindow, this, x, y, &render->load_mode, 1);
 	loadmode->create_objects();
 
+
+
 	add_subwindow(new BC_OKButton(this));
 	add_subwindow(new BC_CancelButton(this));
 	show_window();
-	unlock_window();
+	return 0;
+}
+
+void RenderWindow::update_range_type(int range_type)
+{
+	render->range_type = range_type;
+	rangeproject->update(range_type == RANGE_PROJECT);
+	rangeselection->update(range_type == RANGE_SELECTION);
+	rangeinout->update(range_type == RANGE_INOUT);
 }
+
+
+RenderRangeProject::RenderRangeProject(RenderWindow *rwindow, int value, int x, int y)
+ : BC_Radial(x, y, value, _("Project"))
+{
+	this->rwindow = rwindow;
+}
+int RenderRangeProject::handle_event()
+{
+	rwindow->update_range_type(RANGE_PROJECT);
+	return 1;
+}
+
+RenderRangeSelection::RenderRangeSelection(RenderWindow *rwindow, int value, int x, int y)
+ : BC_Radial(x, y, value, _("Selection"))
+{
+	this->rwindow = rwindow;
+}
+int RenderRangeSelection::handle_event()
+{
+	rwindow->update_range_type(RANGE_SELECTION);
+	return 1;
+}
+
+
+RenderRangeInOut::RenderRangeInOut(RenderWindow *rwindow, int value, int x, int y)
+ : BC_Radial(x, y, value, _("In/Out Points"))
+{
+	this->rwindow = rwindow;
+}
+int RenderRangeInOut::handle_event()
+{
+	rwindow->update_range_type(RANGE_INOUT);
+	return 1;
+}
+
+
