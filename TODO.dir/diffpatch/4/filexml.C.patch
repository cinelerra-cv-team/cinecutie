--- cinecutie/filexml.C	2008-07-21 21:14:01.000000000 +0200
+++ /home/user/cinecutie/cinecutie/filexml.C	2010-02-19 22:19:11.958569362 +0100
@@ -27,8 +27,7 @@
 
 #include "bcsignals.h"
 #include "filexml.h"
-
-
+#include "mainerror.h"
 
 
 // Precision in base 10
@@ -90,13 +89,13 @@
 	return 0;
 }
 
-int FileXML::append_text(const char *text)
+int FileXML::append_text(char *text)
 {
 	append_text(text, strlen(text));
 	return 0;
 }
 
-int FileXML::append_text(const char *text, long len)
+int FileXML::append_text(char *text, long len)
 {
 	while(position + len > available)
 	{
@@ -110,16 +109,16 @@
 	return 0;
 }
 
-int FileXML::encode_text(const char *text)
+int FileXML::encode_text(char *text)
 {
 // We have to encode at least the '<' char
 // We encode three things:
-// '<' -> '<'
-// '>' -> '>'
-// '&' -> '&'
-	char leftb[] = "<";
-	char rightb[] = ">";
-	char amp[] = "&";
+// '<' -> '&lt;' 
+// '>' -> '&gt;'
+// '&' -> '&amp;'
+	char leftb[] = "&lt;";
+	char rightb[] = "&gt;";
+	char amp[] = "&amp;";
 	char *replacement;
 	int len = strlen(text);
 	int lastpos = 0;
@@ -158,11 +157,6 @@
 	return 0;
 }
 
-char* FileXML::get_ptr()
-{
-	return string + position;
-}
-
 char* FileXML::read_text()
 {
 	long text_position = position;
@@ -236,7 +230,7 @@
 	return tag.read_tag(string, position, length);
 }
 
-int FileXML::read_text_until(const char *tag_end, char *output, int max_len)
+int FileXML::read_text_until(char *tag_end, char *output, int max_len)
 {
 // read to next tag
 	int out_position = 0;
@@ -281,7 +275,7 @@
 }
 
 
-int FileXML::write_to_file(const char *filename)
+int FileXML::write_to_file(char *filename)
 {
 	FILE *out;
 	strcpy(this->filename, filename);
@@ -291,9 +285,8 @@
 // Position may have been rewound after storing so we use a strlen
 		if(!fwrite(string, strlen(string), 1, out) && strlen(string))
 		{
-			fprintf(stderr, "FileXML::write_to_file 1 \"%s\": %s\n",
-				filename,
-				strerror(errno));
+			eprintf("Error while writing to \"%s\": %m\n",
+				filename);
 			fclose(out);
 			return 1;
 		}
@@ -303,9 +296,7 @@
 	}
 	else
 	{
-		fprintf(stderr, "FileXML::write_to_file 2 \"%s\": %s\n",
-			filename,
-			strerror(errno));
+		eprintf("Error while opening \"%s\" for writing. \n%m\n", filename);
 		return 1;
 	}
 	fclose(out);
@@ -323,15 +314,14 @@
 	}
 	else
 	{
-		fprintf(stderr, "FileXML::write_to_file \"%s\": %s\n",
-			filename,
-			strerror(errno));
+		eprintf("Error while writing to \"%s\": %m\n",
+			filename);
 		return 1;
 	}
 	return 0;
 }
 
-int FileXML::read_from_file(const char *filename, int ignore_error)
+int FileXML::read_from_file(char *filename, int ignore_error)
 {
 	FILE *in;
 	
@@ -350,9 +340,7 @@
 	else
 	{
 		if(!ignore_error) 
-			fprintf(stderr, "FileXML::read_from_file \"%s\" %s\n",
-				filename,
-				strerror(errno));
+			eprintf("Error while opening \"%s\" for reading. \n%m\n", filename);
 		return 1;
 	}
 	fclose(in);
@@ -420,7 +408,6 @@
 {
 	int i, j;
 	char *current_property, *current_value;
-	int has_space;
 
 // opening bracket
 	string[len] = left_delimiter;        
@@ -447,21 +434,13 @@
 		current_value = tag_property_values[i];
 
 // property value
-// search for spaces in value
-		for(j = 0, has_space = 0; current_value[j] != 0 && !has_space; j++)
-		{
-			if(current_value[j] == ' ') has_space = 1;
-		}
-
-// add a quote if space
-		if(has_space && len < MAX_LENGTH) string[len++] = '\"';
+		if( len < MAX_LENGTH) string[len++] = '\"';
 // write the value
 		for(j = 0; current_value[j] != 0 && len < MAX_LENGTH; j++, len++)
 		{
 			string[len] = current_value[j];
 		}
-// add a quote if space
-		if(has_space && len < MAX_LENGTH) string[len++] = '\"';
+		if(len < MAX_LENGTH) string[len++] = '\"';
 	}     // next property
 	
 	if(len < MAX_LENGTH) string[len++] = right_delimiter;   // terminating bracket
@@ -595,7 +574,7 @@
 	return 0;
 }
 
-int XMLTag::title_is(const char *title)
+int XMLTag::title_is(char *title)
 {
 	if(!strcasecmp(title, tag_title)) return 1;
 	else return 0;
@@ -625,7 +604,7 @@
 	return 0;
 }
 
-const char* XMLTag::get_property(const char *property, char *value)
+char* XMLTag::get_property(char *property, char *value)
 {
 	int i, result;
 	for(i = 0, result = 0; i < total_properties && !result; i++)
@@ -633,14 +612,24 @@
 		if(!strcasecmp(tag_properties[i], property))
 		{
 //printf("XMLTag::get_property %s %s\n", tag_properties[i], tag_property_values[i]);
-			strcpy((char*)value, tag_property_values[i]);
+			int j = 0, k = 0;
+			char *tv = tag_property_values[i];
+			while (j < strlen(tag_property_values[i])) {
+				if (!strncmp(tv + j,"&#034;",6)) {
+					value[k++] = '\"';
+					j += 6;
+				} else {
+					value[k++] = tv[j++];
+				}
+			}
+			value[k] = 0;
 			result = 1;
 		}
 	}
 	return value;
 }
 
-const char* XMLTag::get_property_text(int number)
+char* XMLTag::get_property_text(int number)
 {
 	if(number < total_properties) 
 		return tag_properties[number];
@@ -664,7 +653,7 @@
 		return 0;
 }
 
-char* XMLTag::get_property(const char *property)
+char* XMLTag::get_property(char *property)
 {
 	int i, result;
 	for(i = 0, result = 0; i < total_properties && !result; i++)
@@ -678,7 +667,7 @@
 }
 
 
-int32_t XMLTag::get_property(const char *property, int32_t default_)
+int32_t XMLTag::get_property(char *property, int32_t default_)
 {
 	temp_string[0] = 0;
 	get_property(property, temp_string);
@@ -688,7 +677,7 @@
 		return atol(temp_string);
 }
 
-int64_t XMLTag::get_property(const char *property, int64_t default_)
+int64_t XMLTag::get_property(char *property, int64_t default_)
 {
 	int64_t result;
 	temp_string[0] = 0;
@@ -710,7 +699,7 @@
 // 	else return atol(temp_string);
 // }
 // 
-float XMLTag::get_property(const char *property, float default_)
+float XMLTag::get_property(char *property, float default_)
 {
 	temp_string[0] = 0;
 	get_property(property, temp_string);
@@ -720,7 +709,7 @@
 		return atof(temp_string);
 }
 
-double XMLTag::get_property(const char *property, double default_)
+double XMLTag::get_property(char *property, double default_)
 {
 	temp_string[0] = 0;
 	get_property(property, temp_string);
@@ -730,27 +719,27 @@
 		return atof(temp_string);
 }
 
-int XMLTag::set_title(const char *text)       // set the title field
+int XMLTag::set_title(char *text)       // set the title field
 {
 	strcpy(tag_title, text);
 	return 0;
 }
 
-int XMLTag::set_property(const char *text, int32_t value)
+int XMLTag::set_property(char *text, int32_t value)
 {
 	sprintf(temp_string, "%ld", value);
 	set_property(text, temp_string);
 	return 0;
 }
 
-int XMLTag::set_property(const char *text, int64_t value)
+int XMLTag::set_property(char *text, int64_t value)
 {
 	sprintf(temp_string, "%lld", value);
 	set_property(text, temp_string);
 	return 0;
 }
 
-int XMLTag::set_property(const char *text, float value)
+int XMLTag::set_property(char *text, float value)
 {
 	if (value - (float)((int64_t)value) == 0)
 		sprintf(temp_string, "%lld", (int64_t)value);
@@ -760,7 +749,7 @@
 	return 0;
 }
 
-int XMLTag::set_property(const char *text, double value)
+int XMLTag::set_property(char *text, double value)
 {
 	if (value - (double)((int64_t)value) == 0)
 		sprintf(temp_string, "%lld", (int64_t)value);
@@ -770,12 +759,33 @@
 	return 0;
 }
 
-int XMLTag::set_property(const char *text, const char *value)
+int XMLTag::set_property(char *text, char *value)
 {
 	tag_properties[total_properties] = new char[strlen(text) + 1];
 	strcpy(tag_properties[total_properties], text);
-	tag_property_values[total_properties] = new char[strlen(value) + 1];
-	strcpy(tag_property_values[total_properties], value);
+
+	// Count quotes
+	int qcount = 0;
+	for (int i = strlen(value)-1; i >= 0; i--)
+		if (value[i] == '"')
+			qcount++;
+
+	// Allocate space, and replace quotes with &#034;
+	tag_property_values[total_properties] = new char[strlen(value) + qcount*5 + 1];
+	int j = 0;
+	for (int i = 0; i < strlen(value); i++) {
+		switch (value[i]){
+		case '"':
+			tag_property_values[total_properties][j] = 0;
+			strcat(tag_property_values[total_properties],"&#034;");
+			j += 6;
+			break;
+		default:
+			tag_property_values[total_properties][j++] = value[i];
+		}
+	}
+	tag_property_values[total_properties][j] = 0;
+	
 	total_properties++;
 	return 0;
 }
