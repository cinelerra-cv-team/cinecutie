--- cinecutie/awindowgui.C	2008-10-11 17:46:25.000000000 +0200
+++ /home/user/cinecutie/cinecutie/awindowgui.C	2010-02-19 22:19:11.858573208 +0100
@@ -38,6 +38,8 @@
 #include "file.h"
 #include "filesystem.h"
 #include "language.h"
+#include "labels.h"
+#include "labeledit.h"
 #include "localsession.h"
 #include "mainmenu.h"
 #include "mainsession.h"
@@ -79,7 +81,7 @@
 
 AssetPicon::AssetPicon(MWindow *mwindow, 
 	AWindowGUI *gui, 
-	const char *folder)
+	char *folder)
  : BC_ListBoxItem(folder, gui->folder_icon)
 {
 	reset();
@@ -101,6 +103,20 @@
 	id = 0;
 }
 
+AssetPicon::AssetPicon(MWindow *mwindow, 
+	AWindowGUI *gui, 
+	Label *label)
+ : BC_ListBoxItem()
+{
+	reset();
+	this->mwindow = mwindow;
+	this->gui = gui;
+	this->label = label;
+	asset = 0;
+	icon = 0;
+	id = 0;
+}
+
 AssetPicon::~AssetPicon()
 {
 	if(icon)
@@ -120,6 +136,7 @@
 void AssetPicon::reset()
 {
 	plugin = 0;
+	label = 0;
 	asset = 0;
 	edl = 0;
 	icon = 0;
@@ -281,6 +298,21 @@
 		set_icon(icon);
 		set_icon_vframe(icon_vframe);
 	}
+	else
+	if(label)
+	{
+		Units::totext(name, 
+			      label->position,
+			      mwindow->edl->session->time_format,
+			      mwindow->edl->session->sample_rate,
+			      mwindow->edl->session->frame_rate,
+			      mwindow->edl->session->frames_per_foot);
+		set_text(name);
+		icon = gui->file_icon;
+		icon_vframe = BC_WindowBase::get_resources()->type_to_icon[ICON_UNKNOWN];
+		set_icon(icon);
+		set_icon_vframe(icon_vframe);
+	}
 
 }
 
@@ -309,6 +341,7 @@
 	this->mwindow = mwindow;
 	this->awindow = awindow;
 	temp_picon = 0;
+	allow_iconlisting = 1;
 }
 
 AWindowGUI::~AWindowGUI()
@@ -319,6 +352,7 @@
 	veffects.remove_all_objects();
 	atransitions.remove_all_objects();
 	vtransitions.remove_all_objects();
+	labellist.remove_all_objects();
 	displayed_assets[1].remove_all_objects();
 	delete file_icon;
 	delete audio_icon;
@@ -326,17 +360,17 @@
 	delete clip_icon;
 	delete newfolder_thread;
 	delete asset_menu;
+	delete label_menu;
 	delete assetlist_menu;
 	delete folderlist_menu;
 	if(temp_picon) delete temp_picon;
 }
 
-void AWindowGUI::create_objects()
+int AWindowGUI::create_objects()
 {
 	int x, y;
 	AssetPicon *picon;
 
-	lock_window("AWindowGUI::create_objects");
 SET_TRACE
 //printf("AWindowGUI::create_objects 1\n");
 	asset_titles[0] = _("Title");
@@ -386,6 +420,12 @@
 		this,
 		VTRANSITION_FOLDER));
 	picon->persistent = 1;
+	folders.append(picon = new AssetPicon(mwindow,
+		this,
+		LABEL_FOLDER));
+	picon->persistent = 1;
+
+	create_label_folder();
 
 SET_TRACE
 
@@ -437,6 +477,9 @@
 	add_subwindow(asset_menu = new AssetPopup(mwindow, this));
 	asset_menu->create_objects();
 
+	add_subwindow(label_menu = new LabelPopup(mwindow, this));
+	label_menu->create_objects();
+
 SET_TRACE
 
 	add_subwindow(assetlist_menu = new AssetListMenu(mwindow, this));
@@ -451,7 +494,9 @@
 //printf("AWindowGUI::create_objects 2\n");
 
 SET_TRACE
-	unlock_window();
+	create_custom_xatoms();
+
+	return 0;
 }
 
 int AWindowGUI::resize_event(int w, int h)
@@ -464,19 +509,8 @@
 	mwindow->theme->get_awindow_sizes(this);
 	mwindow->theme->draw_awindow_bg(this);
 
-	asset_list->reposition_window(mwindow->theme->alist_x, 
-    	mwindow->theme->alist_y, 
-    	mwindow->theme->alist_w, 
-    	mwindow->theme->alist_h);
-	divider->reposition_window(mwindow->theme->adivider_x,
-		mwindow->theme->adivider_y,
-		mwindow->theme->adivider_w,
-		mwindow->theme->adivider_h);
-	folder_list->reposition_window(mwindow->theme->afolders_x, 
-    	mwindow->theme->afolders_y, 
-    	mwindow->theme->afolders_w, 
-    	mwindow->theme->afolders_h);
-	
+	reposition_objects();
+
 	int x = mwindow->theme->abuttons_x;
 	int y = mwindow->theme->abuttons_y;
 
@@ -513,19 +547,34 @@
 
 void AWindowGUI::reposition_objects()
 {
-	mwindow->theme->get_awindow_sizes(this);
-	asset_list->reposition_window(mwindow->theme->alist_x, 
-    	mwindow->theme->alist_y, 
-    	mwindow->theme->alist_w, 
-    	mwindow->theme->alist_h);
-	divider->reposition_window(mwindow->theme->adivider_x,
+	int wmax = mwindow->session->awindow_w-mwindow->theme->adivider_w;
+	int x = mwindow->theme->afolders_x;
+	int w = mwindow->theme->afolders_w;
+	if (w > wmax)
+		w = wmax;
+	if (w <= 0)
+		w = 1;
+	folder_list->reposition_window(x, mwindow->theme->afolders_y,
+		w, mwindow->theme->afolders_h);
+	x = mwindow->theme->adivider_x;
+	if (x > wmax)
+		x = wmax;
+	if (x < 0)
+		x = 0;
+	divider->reposition_window(x,
 		mwindow->theme->adivider_y,
 		mwindow->theme->adivider_w,
 		mwindow->theme->adivider_h);
-	folder_list->reposition_window(mwindow->theme->afolders_x, 
-    	mwindow->theme->afolders_y, 
-    	mwindow->theme->afolders_w, 
-    	mwindow->theme->afolders_h);
+	int x2 = mwindow->theme->alist_x;
+	if (x2 < x+mwindow->theme->adivider_w)
+		x2 = x+mwindow->theme->adivider_w;
+	w = mwindow->theme->alist_w;
+	if (w > wmax)
+		w = wmax;
+	if (w <= 0)
+		w = 1;
+	asset_list->reposition_window(x2, mwindow->theme->alist_y,
+		w, mwindow->theme->alist_h);
 	flush();
 }
 
@@ -561,6 +610,36 @@
 	return 0;
 }
 
+
+
+int AWindowGUI::create_custom_xatoms()
+{
+	UpdateAssetsXAtom = create_xatom("CWINDOWGUI_UPDATE_ASSETS");
+	return 0;
+}
+int AWindowGUI::recieve_custom_xatoms(xatom_event *event)
+{
+	if (event->message_type == UpdateAssetsXAtom)
+	{
+		update_assets();
+		return 1;
+	} else
+	return 0;
+}
+
+void AWindowGUI::async_update_assets()
+{
+	xatom_event event;
+	event.message_type = UpdateAssetsXAtom;
+	send_custom_xatom(&event);
+}
+
+
+
+
+
+
+
 void AWindowGUI::update_folder_list()
 {
 //printf("AWindowGUI::update_folder_list 1\n");
@@ -647,6 +726,17 @@
 	}
 }
 
+void AWindowGUI::create_label_folder()
+{
+	Label *current;
+	for(current = mwindow->edl->labels->first; current; current = NEXT) {
+		AssetPicon *picon = new AssetPicon(mwindow, this, current);
+		picon->create_objects();
+		labellist.append(picon);
+	}
+}
+
+
 void AWindowGUI::update_asset_list()
 {
 //printf("AWindowGUI::update_asset_list 1\n");
@@ -782,6 +872,9 @@
 		sort_picons(&vtransitions, 
 			0);
 	else
+	if(!strcasecmp(mwindow->edl->session->current_folder, LABEL_FOLDER))
+		;// Labels should ALWAYS be sorted by time.
+	else
 		sort_picons(&assets, 
 			mwindow->edl->session->current_folder);
 
@@ -836,6 +929,9 @@
 			if(picon->edl)
 				dst[1].append(item2 = new BC_ListBoxItem(picon->edl->local_session->clip_notes));
 			else
+			if(picon->label && picon->label->textstr)
+				dst[1].append(item2 = new BC_ListBoxItem(picon->label->textstr));
+			else
 				dst[1].append(item2 = new BC_ListBoxItem(""));
 			item1->set_autoplace_text(1);
 			item2->set_autoplace_text(1);
@@ -873,6 +969,9 @@
 
 void AWindowGUI::filter_displayed_assets()
 {
+	allow_iconlisting = 1;
+	asset_titles[0] = _("Title");
+	asset_titles[1] = _("Comments");
 	if(!strcasecmp(mwindow->edl->session->current_folder, AEFFECT_FOLDER))
 		copy_picons(displayed_assets, 
 			&aeffects, 
@@ -893,9 +992,26 @@
 			&vtransitions, 
 			0);
 	else
+	if(!strcasecmp(mwindow->edl->session->current_folder, LABEL_FOLDER)) {
+		copy_picons(displayed_assets, 
+			    &labellist, 
+			    0);
+		asset_titles[0] = _("Time Stamps");
+		asset_titles[1] = _("Title");
+		allow_iconlisting = 0;
+	}
+	else
 		copy_picons(displayed_assets, 
 			&assets, 
 			mwindow->edl->session->current_folder);
+	// Ensure the current folder icon is highlighted
+	for(int i = 0; i < folders.total; i++)
+	{
+		if(!strcasecmp(mwindow->edl->session->current_folder, folders.values[i]->get_text()))
+			folders.values[i]->set_selected(1);
+		else
+			folders.values[i]->set_selected(0);
+	}
 }
 
 
@@ -905,6 +1021,8 @@
 	update_folder_list();
 //printf("AWindowGUI::update_assets 2\n");
 	update_asset_list();
+	labellist.remove_all_objects();
+	create_label_folder();
 //printf("AWindowGUI::update_assets 3\n");
 	filter_displayed_assets();
 
@@ -1023,6 +1141,7 @@
 	if(mwindow->session->current_operation == DRAG_PARTITION)
 	{
 		mwindow->session->afolders_w = gui->get_relative_cursor_x();
+		mwindow->theme->get_awindow_sizes(gui);
 		gui->reposition_objects();
 	}
 	return 0;
@@ -1077,7 +1196,7 @@
 		strcpy(mwindow->edl->session->current_folder, picon->get_text());
 //printf("AWindowFolders::selection_changed 1\n");
 		gui->asset_list->draw_background();
-		gui->update_assets();
+		gui->async_update_assets();
 	}
 	return 1;
 }
@@ -1113,7 +1232,7 @@
  		y, 
 		w, 
 		h,
-		mwindow->edl->session->assetlist_format == ASSETS_ICONS ? 
+		(mwindow->edl->session->assetlist_format == ASSETS_ICONS && gui->allow_iconlisting ) ? 
 			LISTBOX_ICONS : LISTBOX_TEXT,
 		&gui->assets,  	  // Each column has an ArrayList of BC_ListBoxItems.
 		gui->asset_titles,             // Titles for columns.  Set to 0 for no titles
@@ -1206,6 +1325,12 @@
 			gui->assetlist_menu->activate_menu();
 		}
 		else
+                if (!strcasecmp(mwindow->edl->session->current_folder, LABEL_FOLDER)) 
+		{
+			if(((AssetPicon*)get_selection(0, 0))->label)
+				gui->label_menu->activate_menu();
+		}
+		else
 		{
 			if(((AssetPicon*)get_selection(0, 0))->asset)
 				gui->asset_menu->update();
@@ -1227,7 +1352,7 @@
 void AWindowAssets::draw_background()
 {
 	BC_ListBox::draw_background();
-	set_color(RED);
+	set_color(BC_WindowBase::get_resources()->audiovideo_color);
 	set_font(LARGEFONT);
 	draw_text(get_w() - 
 			get_text_width(LARGEFONT, mwindow->edl->session->current_folder) - 4, 
@@ -1268,6 +1393,11 @@
 			collect_pluginservers = 1;
 		}
 		else
+		if(!strcasecmp(mwindow->edl->session->current_folder, LABEL_FOLDER))
+		{
+			// do nothing!
+		}
+		else
 		{
 			mwindow->session->current_operation = DRAG_ASSET;
 			collect_assets = 1;
@@ -1300,7 +1430,6 @@
 int AWindowAssets::drag_motion_event()
 {
 	BC_ListBox::drag_motion_event();
-	unlock_window();
 
 	mwindow->gui->lock_window("AWindowAssets::drag_motion_event");
 	mwindow->gui->drag_motion();
@@ -1313,8 +1442,6 @@
 	mwindow->cwindow->gui->lock_window("AWindowAssets::drag_motion_event");
 	mwindow->cwindow->gui->drag_motion();
 	mwindow->cwindow->gui->unlock_window();
-
-	lock_window("AWindowAssets::drag_motion_event");
 	return 0;
 }
 
@@ -1324,7 +1451,6 @@
 
 	result = gui->drag_stop();
 
-	unlock_window();
 
 	if(!result)
 	{
@@ -1347,7 +1473,7 @@
 		mwindow->cwindow->gui->unlock_window();
 	}
 
-	lock_window("AWindowAssets::drag_stop_event");
+
 
 	if(result) get_drag_popup()->set_animation(0);
 
@@ -1510,3 +1636,56 @@
 {
 	return 1;
 }
+
+
+
+LabelPopup::LabelPopup(MWindow *mwindow, AWindowGUI *gui)
+ : BC_PopupMenu(0, 
+		0, 
+		0, 
+		"", 
+		0)
+{
+	this->mwindow = mwindow;
+	this->gui = gui;
+}
+
+LabelPopup::~LabelPopup()
+{
+}
+
+void LabelPopup::create_objects()
+{
+	add_item(editlabel = new LabelPopupEdit(mwindow, this));
+}
+
+
+
+
+LabelPopupEdit::LabelPopupEdit(MWindow *mwindow, LabelPopup *popup)
+ : BC_MenuItem(_("Edit..."))
+{
+	this->mwindow = mwindow;
+	this->popup = popup;
+}
+
+LabelPopupEdit::~LabelPopupEdit()
+{
+}
+
+int LabelPopupEdit::handle_event()
+{
+	int i = 0;
+	while(1)
+	{
+		AssetPicon *result = (AssetPicon*)mwindow->awindow->gui->asset_list->get_selection(0, i++);
+		if(!result) break;
+
+		if(result->label) {
+			mwindow->awindow->gui->awindow->label_edit->edit_label(result->label);
+			break;
+		}
+	}
+
+	return 1;
+}
