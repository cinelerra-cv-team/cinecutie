--- cinecutie/maskauto.C	2008-07-21 21:14:00.000000000 +0200
+++ /home/user/cinecutie/cinecutie/maskauto.C	2010-02-19 22:19:11.968571001 +0100
@@ -40,7 +40,7 @@
 	control_y2 = 0;
 }
 
-void MaskPoint::copy_from(MaskPoint &ptr)
+MaskPoint& MaskPoint::operator=(MaskPoint& ptr)
 {
 	this->x = ptr.x;
 	this->y = ptr.y;
@@ -50,11 +50,6 @@
 	this->control_y2 = ptr.control_y2;
 }
 
-MaskPoint& MaskPoint::operator=(MaskPoint& ptr)
-{
-	copy_from(ptr);
-}
-
 int MaskPoint::operator==(MaskPoint& ptr)
 {
 	return EQUIV(x, ptr.x) &&
@@ -74,25 +69,19 @@
 {
 }
 
-int SubMask::equivalent(SubMask& ptr)
+int SubMask::operator==(SubMask& ptr)
 {
-	if(points.size() != ptr.points.size()) return 0;
+	if(points.total != ptr.points.total) return 0;
 
-	for(int i = 0; i < points.size(); i++)
+	for(int i = 0; i < points.total; i++)
 	{
-		if(!(*points.get(i) == *ptr.points.get(i)))
+		if(!(*points.values[i] == *ptr.points.values[i]))
 			return 0;
 	}
 	
 	return 1;
 }
 
-
-int SubMask::operator==(SubMask& ptr)
-{
-	return equivalent(ptr);
-}
-
 void SubMask::copy_from(SubMask& ptr)
 {
 	points.remove_all_objects();
@@ -182,7 +171,7 @@
 			file->append_tag();
 			char string[BCTEXTLEN];
 //printf("SubMask::copy 1 %p %d %p\n", this, i, points.values[i]);
-			sprintf(string, "%.6e, %.6e, %.6e, %.6e, %.6e, %.6e", 
+			sprintf(string, "%.7g, %.7g, %.7g, %.7g, %.7g, %.7g",
 				points.values[i]->x, 
 				points.values[i]->y, 
 				points.values[i]->control_x1, 
@@ -224,6 +213,7 @@
 	mode = MASK_SUBTRACT_ALPHA;
 	feather = 0;
 	value = 100;
+	apply_before_plugins = 0;
 
 // We define a fixed number of submasks so that interpolation for each
 // submask matches.
@@ -255,38 +245,15 @@
 	if(value != src->value ||
 		mode != src->mode ||
 		feather != src->feather ||
-		masks.size() != src->masks.size()) return 0;
+		masks.total != src->masks.total ||
+		apply_before_plugins != src->apply_before_plugins) return 0;
 
-	for(int i = 0; i < masks.size(); i++)
+	for(int i = 0; i < masks.total; i++)
 		if(!(*masks.values[i] == *src->masks.values[i])) return 0;
 
 	return 1;
 }
 
-void MaskAuto::update_parameter(MaskAuto *ref, MaskAuto *src)
-{
-	if(src->value != ref->value)
-	{
-		this->value = src->value;
-	}
-
-	if(src->mode != ref->mode)
-	{
-		this->mode = src->mode;
-	}
-
-	if(!EQUIV(src->feather, ref->feather))
-	{
-		this->feather = src->feather;
-	}
-
-	for(int i = 0; i < masks.size(); i++)
-	{
-		if(!src->get_submask(i)->equivalent(*ref->get_submask(i)))
-			this->get_submask(i)->copy_from(*src->get_submask(i));
-	}
-}
-
 void MaskAuto::copy_from(Auto *src)
 {
 	copy_from((MaskAuto*)src);
@@ -295,17 +262,14 @@
 void MaskAuto::copy_from(MaskAuto *src)
 {
 	Auto::copy_from(src);
-	copy_data(src);
-}
 
-void MaskAuto::copy_data(MaskAuto *src)
-{
 	mode = src->mode;
 	feather = src->feather;
 	value = src->value;
+	apply_before_plugins = src->apply_before_plugins;
 
 	masks.remove_all_objects();
-	for(int i = 0; i < src->masks.size(); i++)
+	for(int i = 0; i < src->masks.total; i++)
 	{
 		masks.append(new SubMask(this));
 		masks.values[i]->copy_from(*src->masks.values[i]);
@@ -313,45 +277,64 @@
 }
 
 
-SubMask* MaskAuto::get_submask(int number)
-{
-	CLAMP(number, 0, masks.size() - 1);
-	return masks.values[number];
-}
+int MaskAuto::interpolate_from(Auto *a1, Auto *a2, int64_t position) {
+	MaskAuto  *mask_auto1 = (MaskAuto *)a1;
+	MaskAuto  *mask_auto2 = (MaskAuto *)a2;
 
-void MaskAuto::get_points(ArrayList<MaskPoint*> *points, 
-	int submask)
-{
-	points->remove_all_objects();
-	SubMask *submask_ptr = get_submask(submask);
-	for(int i = 0; i < submask_ptr->points.size(); i++)
+	if (!mask_auto2 || mask_auto2->masks.total == 0) // if mask_auto == null, copy from first
 	{
-		MaskPoint *point = new MaskPoint;
-		point->copy_from(*submask_ptr->points.get(i));
-		points->append(point);
+		copy_from(mask_auto1);
+		return 0;
 	}
-}
+	this->mode = mask_auto1->mode;
+	this->feather = mask_auto1->feather;
+	this->value = mask_auto1->value;
+	this->apply_before_plugins = mask_auto1->apply_before_plugins;
+	this->position = position;
+	masks.remove_all_objects();
 
-void MaskAuto::set_points(ArrayList<MaskPoint*> *points, 
-	int submask)
-{
-	SubMask *submask_ptr = get_submask(submask);
-	submask_ptr->points.remove_all_objects();
-	for(int i = 0; i < points->size(); i++)
+	for(int i = 0; 
+		i < mask_auto1->masks.total; 
+		i++)
 	{
-		MaskPoint *point = new MaskPoint;
-		point->copy_from(*points->get(i));
-		submask_ptr->points.append(point);
+		SubMask *new_submask = new SubMask(this);
+		masks.append(new_submask);
+		SubMask *mask1 = mask_auto1->masks.values[i];
+		SubMask *mask2 = mask_auto2->masks.values[i];
+
+		// just in case, should never happen
+		int total_points = MIN(mask1->points.total, mask2->points.total);
+		for(int j = 0; j < total_points; j++)
+		{
+			MaskPoint *point = new MaskPoint;
+			MaskAutos::avg_points(point, 
+				mask1->points.values[j], 
+				mask2->points.values[j],
+				position,
+				mask_auto1->position,
+				mask_auto2->position);
+			new_submask->points.append(point);
+		}
+
 	}
+
+
 }
 
 
+SubMask* MaskAuto::get_submask(int number)
+{
+	CLAMP(number, 0, masks.total - 1);
+	return masks.values[number];
+}
+
 void MaskAuto::load(FileXML *file)
 {
 	mode = file->tag.get_property("MODE", mode);
 	feather = file->tag.get_property("FEATHER", feather);
 	value = file->tag.get_property("VALUE", value);
-	for(int i = 0; i < masks.size(); i++)
+	apply_before_plugins = file->tag.get_property("APPLY_BEFORE_PLUGINS", apply_before_plugins);
+	for(int i = 0; i < masks.total; i++)
 	{
 		delete masks.values[i];
 		masks.values[i] = new SubMask(this);
@@ -383,6 +366,8 @@
 	file->tag.set_property("MODE", mode);
 	file->tag.set_property("VALUE", value);
 	file->tag.set_property("FEATHER", feather);
+	file->tag.set_property("APPLY_BEFORE_PLUGINS", apply_before_plugins);
+
 	if(default_auto)
 		file->tag.set_property("POSITION", 0);
 	else
@@ -390,7 +375,7 @@
 	file->append_tag();
 	file->append_newline();
 
-	for(int i = 0; i < masks.size(); i++)
+	for(int i = 0; i < masks.total; i++)
 	{
 //printf("MaskAuto::copy 1 %p %d %p\n", this, i, masks.values[i]);
 		masks.values[i]->copy(file);
@@ -406,7 +391,7 @@
 void MaskAuto::dump()
 {
 	printf("	 mode=%d value=%d\n", mode, value);
-	for(int i = 0; i < masks.size(); i++)
+	for(int i = 0; i < masks.total; i++)
 	{
 		printf("	 submask %d\n", i);
 		masks.values[i]->dump();
@@ -415,7 +400,7 @@
 
 void MaskAuto::translate_submasks(float translate_x, float translate_y)
 {
-	for(int i = 0; i < masks.size(); i++)
+	for(int i = 0; i < masks.total; i++)
 	{
 		SubMask *mask = get_submask(i);
 		for (int j = 0; j < mask->points.total; j++) 
