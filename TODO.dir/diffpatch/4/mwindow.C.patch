--- cinecutie/mwindow.C	2008-10-19 20:38:37.000000000 +0200
+++ /home/user/cinecutie/cinecutie/mwindow.C	2010-02-19 22:19:11.978570999 +0100
@@ -49,8 +49,8 @@
 #include "framecache.h"
 #include "gwindow.h"
 #include "gwindowgui.h"
-#include "keyframegui.h"
 #include "indexfile.h"
+#include "interlacemodes.h"
 #include "language.h"
 #include "levelwindowgui.h"
 #include "levelwindow.h"
@@ -102,6 +102,7 @@
 #include "vwindow.h"
 #include "wavecache.h"
 #include "zoombar.h"
+#include "exportedl.h"
 
 #include <string.h>
 
@@ -150,16 +151,13 @@
  : Thread(1, 0, 0)
 {
 	plugin_gui_lock = new Mutex("MWindow::plugin_gui_lock");
-	dead_plugin_lock = new Mutex("MWindow::dead_plugin_lock");
 	brender_lock = new Mutex("MWindow::brender_lock");
-	keyframe_gui_lock = new Mutex("MWindow::keyframe_gui_lock");
 	brender = 0;
 	session = 0;
 	channeldb_buz = new ChannelDB;
 	channeldb_v4l2jpeg = new ChannelDB;
 	dvb_input = 0;
 	dvb_input_lock = new Mutex("MWindow::dvb_input_lock");
-	splash_window = 0;
 }
 
 MWindow::~MWindow()
@@ -172,14 +170,6 @@
 
 	delete mainindexes;
 
-// Save defaults for open plugins
-	plugin_gui_lock->lock("MWindow::~MWindow");
-	for(int i = 0; i < plugin_guis->size(); i++)
-	{
-		plugin_guis->get(i)->hide_gui();
-	}
-	plugin_gui_lock->unlock();
-
 SET_TRACE
 	clean_indexes();
 SET_TRACE
@@ -216,7 +206,7 @@
 
 void MWindow::create_defaults_path(char *string)
 {
-// set the .bcast path
+// set the .ccutie path
 	FileSystem fs;
 
 	sprintf(string, "%s", BCASTDIR);
@@ -227,7 +217,7 @@
 	}
 
 // load the defaults
-	strcat(string, CONFIG_FILE);
+	strcat(string, "Cinecutie_rc");
 }
 
 void MWindow::init_defaults(BC_Hash* &defaults, char *config_path)
@@ -280,8 +270,8 @@
 				{
 					plugindb->append(new_plugin);
 					new_plugin->close_plugin();
-//					if(splash_window)
-//						splash_window->operation->update(_(new_plugin->title));
+					if(splash_window)
+						splash_window->operation->update(_(new_plugin->title));
 				}
 				else
 				if(result == PLUGINSERVER_IS_LAD)
@@ -302,11 +292,11 @@
 						{
 							plugindb->append(new_plugin);
 							new_plugin->close_plugin();
-//							if(splash_window)
-//								splash_window->operation->update(_(new_plugin->title));
-//							else
-//							{
-//							}
+							if(splash_window)
+								splash_window->operation->update(_(new_plugin->title));
+							else
+							{
+							}
 						}
 					}while(!result);
 				}
@@ -330,19 +320,19 @@
 
 
 
-	FileSystem cinelerra_fs;
+	FileSystem cinecutie_fs;
 	ArrayList<FileSystem*> lad_fs;
 	int result = 0;
 
 // Get directories
-	cinelerra_fs.set_filter("[*.plugin][*.so]");
-	result = cinelerra_fs.update(preferences->plugin_dir);
+	cinecutie_fs.set_filter("[*.plugin][*.so]");
+	result = cinecutie_fs.update(preferences->global_plugin_dir);
 
 	if(result)
 	{
 		fprintf(stderr, 
 			_("MWindow::init_plugins: couldn't open %s directory\n"),
-			preferences->plugin_dir);
+			preferences->global_plugin_dir);
 	}
 
 // Parse LAD environment variable
@@ -391,18 +381,18 @@
 		};
 	}
 
-	int total = cinelerra_fs.total_files();
+	int total = cinecutie_fs.total_files();
 	int counter = 0;
 	for(int i = 0; i < lad_fs.total; i++)
 		total += lad_fs.values[i]->total_files();
 	if(splash_window) splash_window->progress->update_length(total);
 
 
-// Cinelerra
+// Cinecutie
 #ifndef DO_STATIC
 	init_plugin_path(preferences,
 		plugindb,
-		&cinelerra_fs,
+		&cinecutie_fs,
 		splash_window,
 		&counter);
 #else
@@ -508,13 +498,11 @@
 	char string2[BCTEXTLEN];
 
 // Delete extra indexes
-SET_TRACE
 	fs.set_filter("*.idx");
 	fs.complete_path(preferences->index_directory);
 	fs.update(preferences->index_directory);
 //printf("MWindow::clean_indexes 1 %d\n", fs.dir_list.total);
 
-SET_TRACE
 // Eliminate directories
 	result = 1;
 	while(result)
@@ -533,11 +521,9 @@
 	}
 	total_excess = fs.dir_list.total - preferences->index_count;
 
-SET_TRACE
 //printf("MWindow::clean_indexes 2 %d\n", fs.dir_list.total);
 	while(total_excess > 0)
 	{
-SET_TRACE
 // Get oldest
 		for(int i = 0; i < fs.dir_list.total; i++)
 		{
@@ -550,7 +536,6 @@
 			}
 		}
 
-SET_TRACE
 		if(oldest_item >= 0)
 		{
 // Remove index file
@@ -574,10 +559,8 @@
 			}
 		}
 
-SET_TRACE
 		total_excess--;
 	}
-SET_TRACE
 }
 
 void MWindow::init_awindow()
@@ -626,9 +609,9 @@
 		exit(1);
 	}
 
-// Load default images & settings
+// Load images which may have been forgotten
 	theme->Theme::initialize();
-// Load user images & settings
+// Load user images
 	theme->initialize();
 // Create menus with user colors
 	theme->build_menus();
@@ -688,6 +671,8 @@
 void MWindow::init_menus()
 {
 	char string[BCTEXTLEN];
+
+	// Color Models
 	cmodel_to_text(string, BC_RGB888);
 	colormodels.append(new ColormodelItem(string, BC_RGB888));
 	cmodel_to_text(string, BC_RGBA8888);
@@ -708,6 +693,32 @@
 //	colormodels.append(new ColormodelItem(string, BC_YUV161616));
 //	cmodel_to_text(string, BC_YUVA16161616);
 //	colormodels.append(new ColormodelItem(string, BC_YUVA16161616));
+
+#define ILACEPROJECTMODELISTADD(x) ilacemode_to_text(string, x); \
+                           interlace_project_modes.append(new InterlacemodeItem(string, x));
+
+#define ILACEASSETMODELISTADD(x) ilacemode_to_text(string, x); \
+                           interlace_asset_modes.append(new InterlacemodeItem(string, x));
+
+#define ILACEFIXMETHODLISTADD(x) ilacefixmethod_to_text(string, x); \
+                           interlace_asset_fixmethods.append(new InterlacefixmethodItem(string, x));
+
+	// Interlacing Modes
+	ILACEASSETMODELISTADD(BC_ILACE_MODE_UNDETECTED); // Not included in the list for the project options.
+
+	ILACEASSETMODELISTADD(BC_ILACE_MODE_TOP_FIRST);
+	ILACEPROJECTMODELISTADD(BC_ILACE_MODE_TOP_FIRST);
+
+	ILACEASSETMODELISTADD(BC_ILACE_MODE_BOTTOM_FIRST);
+	ILACEPROJECTMODELISTADD(BC_ILACE_MODE_BOTTOM_FIRST);
+
+	ILACEASSETMODELISTADD(BC_ILACE_MODE_NOTINTERLACED);
+	ILACEPROJECTMODELISTADD(BC_ILACE_MODE_NOTINTERLACED);
+
+	// Interlacing Fixing Methods
+	ILACEFIXMETHODLISTADD(BC_ILACE_FIXMETHOD_NONE);
+	ILACEFIXMETHODLISTADD(BC_ILACE_FIXMETHOD_UPONE);
+	ILACEFIXMETHODLISTADD(BC_ILACE_FIXMETHOD_DOWNONE);
 }
 
 void MWindow::init_indexes()
@@ -719,9 +730,7 @@
 void MWindow::init_gui()
 {
 	gui = new MWindowGUI(this);
-	gui->lock_window("MWindow::init_gui");
 	gui->create_objects();
-	gui->unlock_window();
 	gui->load_defaults(defaults);
 }
 
@@ -739,6 +748,11 @@
 	batch_render = new BatchRenderThread(this);
 }
 
+void MWindow::init_exportedl()
+{
+	exportedl = new ExportEDL(this);
+}
+
 void MWindow::init_brender()
 {
 	if(preferences->use_brender && !brender)
@@ -797,7 +811,7 @@
 
 void MWindow::set_brender_start()
 {
-	edl->session->brender_start = edl->local_session->get_selectionstart(1);
+	edl->session->brender_start = edl->local_session->get_selectionstart();
 	restart_brender();
 	gui->canvas->draw_overlays();
 	gui->canvas->flash();
@@ -807,13 +821,17 @@
 
 int MWindow::load_filenames(ArrayList<char*> *filenames, 
 	int load_mode,
-	int update_filename)
+	int update_filename,
+	char *reel_name,
+	int reel_number,
+	int overwrite_reel)
 {
+SET_TRACE
 	ArrayList<EDL*> new_edls;
 	ArrayList<Asset*> new_assets;
 	ArrayList<File*> new_files;
 
-//	save_defaults();
+	save_defaults();
 	gui->start_hourglass();
 
 // Need to stop playback since tracking depends on the EDL not getting
@@ -830,9 +848,6 @@
 	vwindow->playback_engine->interrupt_playback(0);
 
 
-	undo->update_undo_before();
-
-
 
 // Define new_edls and new_assets to load
 	int result = 0;
@@ -844,14 +859,34 @@
 		EDL *new_edl = new EDL;
 		char string[BCTEXTLEN];
 
+// Set reel name and number for the asset
+// If the user wants to overwrite the last used reel number for the clip,
+// we have to rebuild the index for the file
+
+		if(overwrite_reel)
+		{
+			char source_filename[BCTEXTLEN];
+			char index_filename[BCTEXTLEN];
+			
+			strcpy(new_asset->reel_name, reel_name);
+			new_asset->reel_number = reel_number;
+
+			IndexFile::get_index_filename(source_filename,
+				preferences->index_directory,
+				index_filename,
+				new_asset->path);
+			remove(index_filename);
+			new_asset->index_status = INDEX_NOTTESTED;
+		}
+		
 		new_edl->create_objects();
 		new_edl->copy_session(edl);
 
 		sprintf(string, "Loading %s", new_asset->path);
 		gui->show_message(string);
-
+SET_TRACE
 		result = new_file->open_file(preferences, new_asset, 1, 0, 0, 0);
-
+SET_TRACE
 
 		switch(result)
 		{
@@ -964,7 +999,6 @@
 					fwindow.create_objects(new_asset, string);
 					result = fwindow.run_window();
 
-
 					defaults->update("AUDIO_CHANNELS", new_asset->channels);
 					defaults->update("SAMPLE_RATE", new_asset->sample_rate);
 					defaults->update("AUDIO_BITS", new_asset->bits);
@@ -1008,12 +1042,16 @@
 // Load EDL for pasting
 				new_edl->load_xml(plugindb, &xml_file, LOAD_ALL);
 				test_plugins(new_edl, filenames->values[i]);
+
+// We don't want a valid reel name/number for projects
+				strcpy(new_asset->reel_name, "");
+				reel_number = -1;
+
 				if(load_mode == LOAD_REPLACE || 
 					load_mode == LOAD_REPLACE_CONCATENATE)
 				{
 					strcpy(session->filename, filenames->values[i]);
-					strcpy(new_edl->local_session->clip_title, 
-						filenames->values[i]);
+					strcpy(new_edl->local_session->clip_title, filenames->values[i]);
 					if(update_filename)
 						set_filename(new_edl->local_session->clip_title);
 				}
@@ -1071,7 +1109,8 @@
 			0,
 			-1,
 			edl->session->labels_follow_edits, 
-			edl->session->plugins_follow_edits);
+			edl->session->plugins_follow_edits,
+			0); // overwrite
 	}
 
 
@@ -1111,25 +1150,28 @@
 		mainindexes->start_build();
 	}
 
+
 	update_project(load_mode);
+SET_TRACE
 
 
 
 	new_edls.remove_all_objects();
+SET_TRACE
 	for(int i = 0; i < new_assets.total; i++)
 		Garbage::delete_object(new_assets.values[i]);
+SET_TRACE
 	new_assets.remove_all();
+SET_TRACE
 	new_files.remove_all_objects();
 
-	undo->update_undo_after(_("load"), LOAD_ALL);
+SET_TRACE
+	undo->update_undo(_("load"), LOAD_ALL, 0);
 
-	if(load_mode == LOAD_REPLACE ||
-		load_mode == LOAD_REPLACE_CONCATENATE)
-		session->changes_made = 0;
-	else
-		session->changes_made = 1;
 
+SET_TRACE
 	gui->stop_hourglass();
+SET_TRACE
 
 	return 0;
 }
@@ -1166,8 +1208,8 @@
 					if (!plugin_found) 
 					{
 						sprintf(string, 
-							"The effect '%s' in file '%s' is not part of your installation of Cinelerra.\n"
-							"The project won't be rendered as it was meant and Cinelerra might crash.\n",
+							"The effect '%s' in file '%s' is not part of your installation of Cinecutie.\n"
+							"The project won't be rendered as it was meant and Cinecutie might crash.\n",
 							plugin->title, 
 							path); 
 						MainError::show_error(string);
@@ -1195,8 +1237,8 @@
 				if (!transition_found) 
 				{
 					sprintf(string, 
-						"The transition '%s' in file '%s' is not part of your installation of Cinelerra.\n"
-						"The project won't be rendered as it was meant and Cinelerra might crash.\n",
+						"The transition '%s' in file '%s' is not part of your installation of Cinecutie.\n"
+						"The project won't be rendered as it was meant and Cinecutie might crash.\n",
 						edit->transition->title, 
 						path); 
 					MainError::show_error(string);
@@ -1231,11 +1273,10 @@
 	fd = 0;
 	if(result < 0x7fffffff)
 	{
-		char string[BCTEXTLEN];
-		sprintf(string, "MWindow::init_shm: /proc/sys/kernel/shmmax is 0x%llx.\n"
-			"It should be at least 0x7fffffff for Cinelerra.\n",
+		eprintf("WARNING: /proc/sys/kernel/shmmax is 0x%llx, which is too low.\n"
+			"Before running Cinecutie do the following as root:\n"
+			"echo \"0x7fffffff\" > /proc/sys/kernel/shmmax\n",
 			result);
-		MainError::show_error(string);
 	}
 }
 
@@ -1251,106 +1292,95 @@
 
 
 
-// For some reason, init_signals must come after show_splash or the signals won't
-// get trapped.
-	init_signals();
-
 	init_3d();
 	remove_thread = new RemoveThread;
 	remove_thread->create_objects();
-//	show_splash();
-
+	show_splash();
 
+// For some reason, init_signals must come after show_splash or the signals won't
+// get trapped.
+	init_signals();
 
 	init_error();
 
+SET_TRACE
+
 	init_defaults(defaults, config_path);
+SET_TRACE
 	init_preferences();
+SET_TRACE
 	init_plugins(preferences, plugindb, splash_window);
 	if(splash_window) splash_window->operation->update(_("Initializing GUI"));
+SET_TRACE
 	init_theme();
 // Default project created here
+SET_TRACE
 	init_edl();
 
-
+SET_TRACE
 	init_awindow();
-
+SET_TRACE
 	init_compositor();
-
+SET_TRACE
 	init_levelwindow();
-
+SET_TRACE
 	init_viewer();
-
+SET_TRACE
 	init_cache();
-
+SET_TRACE
 	init_indexes();
-
+SET_TRACE
 	init_channeldb();
-
+SET_TRACE
 
 	init_gui();
 	init_gwindow();
+SET_TRACE
 	init_render();
 	init_brender();
+	init_exportedl();
 	mainprogress = new MainProgress(this, gui);
 	undo = new MainUndo(this);
 
-
 	plugin_guis = new ArrayList<PluginServer*>;
-	dead_plugins = new ArrayList<PluginServer*>;
-	keyframe_threads = new ArrayList<KeyFrameThread*>;
 
+SET_TRACE
 	if(session->show_vwindow) vwindow->gui->show_window();
-	if(session->show_cwindow) 
-	{
-		cwindow->gui->lock_window("MWindow::create_objects 1");
-		cwindow->gui->show_window();
-		cwindow->gui->unlock_window();
-	}
-	if(session->show_awindow)
-	{
-		awindow->gui->lock_window("MWindow::create_objects 1");
-		awindow->gui->show_window();
-		awindow->gui->unlock_window();
-	}
-	if(session->show_lwindow) 
-	{
-		lwindow->gui->lock_window("MWindow::create_objects 1");
-		lwindow->gui->show_window();
-		lwindow->gui->unlock_window();
-	}
-	if(session->show_gwindow) 
-	{
-		gwindow->gui->lock_window("MWindow::create_objects 1");
-		gwindow->gui->show_window();
-		gwindow->gui->unlock_window();
-	}
+	if(session->show_cwindow) cwindow->gui->show_window();
+	if(session->show_awindow) awindow->gui->show_window();
+	if(session->show_lwindow) lwindow->gui->show_window();
+	if(session->show_gwindow) gwindow->gui->show_window();
+SET_TRACE
 
 
-	gui->lock_window("MWindow::create_objects 1");
 	gui->mainmenu->load_defaults(defaults);
+SET_TRACE
 	gui->mainmenu->update_toggles(0);
+SET_TRACE
 	gui->patchbay->update();
+SET_TRACE
 	gui->canvas->draw();
+SET_TRACE
 	gui->cursor->draw(1);
+SET_TRACE
 	gui->show_window();
 	gui->raise_window();
-	gui->unlock_window();
 
 	if(preferences->use_tipwindow)
 		init_tipwindow();
 		
+SET_TRACE
 
 	hide_splash();
+SET_TRACE
 	init_shm();
-
 }
 
 
 void MWindow::show_splash()
 {
-#include "data/heroine_logo11_png.h"
-	VFrame *frame = new VFrame(heroine_logo11_png);
+#include "data/heroine_logo12_png.h"
+	VFrame *frame = new VFrame(heroine_logo12_png);
 	BC_DisplayInfo display_info;
 	splash_window = new SplashGUI(frame, 
 		display_info.get_root_w() / 2 - frame->get_w() / 2,
@@ -1369,21 +1399,13 @@
 void MWindow::start()
 {
 ENABLE_BUFFER
-//SET_TRACE
 	vwindow->start();
-//SET_TRACE
 	awindow->start();
-//SET_TRACE
 	cwindow->start();
-//SET_TRACE
 	lwindow->start();
-//SET_TRACE
 	gwindow->start();
-//SET_TRACE
 	Thread::start();
-//SET_TRACE
 	playback_3d->start();
-//SET_TRACE
 }
 
 void MWindow::run()
@@ -1480,14 +1502,6 @@
 	cwindow->gui->unlock_window();
 }
 
-void MWindow::set_keyframe_type(int mode)
-{
-	gui->lock_window("MWindow::set_keyframe_type");
-	edl->local_session->floatauto_type = mode;
-	gui->mainmenu->update_toggles(0);
-	gui->unlock_window();
-}
-
 int MWindow::set_editing_mode(int new_editing_mode)
 {
 	gui->lock_window("MWindow::set_editing_mode");
@@ -1503,6 +1517,25 @@
 	return 0;
 }
 
+void MWindow::toggle_editing_mode()
+{
+	int mode = edl->session->editing_mode;
+	if( mode == EDITING_ARROW )
+		set_editing_mode(EDITING_IBEAM);
+	else
+		set_editing_mode(EDITING_ARROW);
+}
+
+
+void MWindow::set_labels_follow_edits(int value)
+{
+	gui->lock_window("MWindow::set_labels_follow_edits");
+	edl->session->labels_follow_edits = value;
+	gui->mbuttons->edit_panel->locklabels->update(value);
+	gui->mainmenu->labels_follow_edits->set_checked(value);
+	gui->flush();
+	gui->unlock_window();
+}
 
 void MWindow::sync_parameters(int change_type)
 {
@@ -1584,63 +1617,10 @@
 		memory_usage > preferences->cache_size);
 }
 
-
-void MWindow::show_keyframe_gui(Plugin *plugin)
-{
-	keyframe_gui_lock->lock("MWindow::show_keyframe_gui");
-// Find existing thread
-	for(int i = 0; i < keyframe_threads->size(); i++)
-	{
-		if(keyframe_threads->get(i)->plugin == plugin)
-		{
-			keyframe_threads->get(i)->start_window(plugin, 0);
-			keyframe_gui_lock->unlock();
-			return;
-		}
-	}
-
-// Find unused thread
-	for(int i = 0; i < keyframe_threads->size(); i++)
-	{
-		if(!keyframe_threads->get(i)->plugin)
-		{
-			keyframe_threads->get(i)->start_window(plugin, 0);
-			keyframe_gui_lock->unlock();
-			return;
-		}
-	}
-
-// Create new thread
-	KeyFrameThread *thread = new KeyFrameThread(this);
-	keyframe_threads->append(thread);
-	thread->start_window(plugin, 0);
-
-	keyframe_gui_lock->unlock();
-}
-
-
-
-
-
 void MWindow::show_plugin(Plugin *plugin)
 {
-//SET_TRACE
 	int done = 0;
-
-SET_TRACE
-// Remove previously deleted plugin GUIs
-	dead_plugin_lock->lock("MWindow::delete_plugin");
-	for(int i = 0; i < dead_plugins->size(); i++)
-	{
-		delete dead_plugins->get(i);
-	}
-	dead_plugins->remove_all();
-	dead_plugin_lock->unlock();
-
-//printf("MWindow::show_plugin %d\n", __LINE__);
-SET_TRACE
-
-
+//printf("MWindow::show_plugin 1\n");
 	plugin_gui_lock->lock("MWindow::show_plugin");
 	for(int i = 0; i < plugin_guis->total; i++)
 	{
@@ -1675,139 +1655,49 @@
 		}
 	}
 	plugin_gui_lock->unlock();
-//printf("MWindow::show_plugin %d\n", __LINE__);
-SET_TRACE
-//sleep(1);
-//SET_TRACE
 //printf("MWindow::show_plugin 2\n");
 }
 
 void MWindow::hide_plugin(Plugin *plugin, int lock)
 {
-SET_TRACE
 	plugin->show = 0;
-// Update the toggle
 	gui->lock_window("MWindow::hide_plugin");
 	gui->update(0, 1, 0, 0, 0, 0, 0);
 	gui->unlock_window();
-SET_TRACE
 
 	if(lock) plugin_gui_lock->lock("MWindow::hide_plugin");
 	for(int i = 0; i < plugin_guis->total; i++)
 	{
 		if(plugin_guis->values[i]->plugin == plugin)
 		{
-SET_TRACE
 			PluginServer *ptr = plugin_guis->values[i];
-SET_TRACE
 			plugin_guis->remove(ptr);
-SET_TRACE
 			if(lock) plugin_gui_lock->unlock();
 // Last command executed in client side close
-SET_TRACE
-// Schedule for deletion
-			ptr->hide_gui();
-			delete_plugin(ptr);
-SET_TRACE
-//sleep(1);
-//SET_TRACE
+			delete ptr;
 			return;
 		}
 	}
 	if(lock) plugin_gui_lock->unlock();
-SET_TRACE
-}
 
-void MWindow::delete_plugin(PluginServer *plugin)
-{
-	dead_plugin_lock->lock("MWindow::delete_plugin");
-	dead_plugins->append(plugin);
-	dead_plugin_lock->unlock();
 }
 
 void MWindow::hide_plugins()
 {
-	plugin_gui_lock->lock("MWindow::hide_plugins 1");
-	while(plugin_guis->size())
-	{
-		PluginServer *ptr = plugin_guis->get(0);
-		plugin_guis->remove(ptr);
-		plugin_gui_lock->unlock();
-// Last command executed in client side close
-// Schedule for deletion
-		ptr->hide_gui();
-		delete_plugin(ptr);
-		plugin_gui_lock->lock("MWindow::hide_plugins 2");
-	}
+	plugin_gui_lock->lock("MWindow::hide_plugins");
+	plugin_guis->remove_all_objects();
 	plugin_gui_lock->unlock();
-
-	hide_keyframe_guis();
-}
-
-void MWindow::hide_keyframe_guis()
-{
-	keyframe_gui_lock->lock("MWindow::hide_keyframe_guis");
-	for(int i = 0; i < keyframe_threads->size(); i++)
-	{
-		keyframe_threads->get(i)->close_window();
-	}
-	keyframe_gui_lock->unlock();
-}
-
-void MWindow::hide_keyframe_gui(Plugin *plugin)
-{
-	keyframe_gui_lock->lock("MWindow::hide_keyframe_gui");
-	for(int i = 0; i < keyframe_threads->size(); i++)
-	{
-		if(keyframe_threads->get(i)->plugin = plugin)
-		{
-			keyframe_threads->get(i)->close_window();
-			break;
-		}
-	}
-	keyframe_gui_lock->unlock();
 }
 
-void MWindow::update_keyframe_guis()
-{
-// Send new configuration to keyframe GUI's
-	keyframe_gui_lock->lock("MWindow::update_plugin_guis");
-	for(int i = 0; i < keyframe_threads->size(); i++)
-	{
-		KeyFrameThread *ptr = keyframe_threads->get(i);
-		if(edl->tracks->plugin_exists(ptr->plugin))
-			ptr->update_gui(1);
-		else
-		{
-			ptr->close_window();
-		}
-	}
-	keyframe_gui_lock->unlock();
-}
-
-void MWindow::update_plugin_guis(int do_keyframe_guis)
+void MWindow::update_plugin_guis()
 {
-// Send new configuration to plugin GUI's
 	plugin_gui_lock->lock("MWindow::update_plugin_guis");
 
-	for(int i = 0; i < plugin_guis->size(); i++)
+	for(int i = 0; i < plugin_guis->total; i++)
 	{
-		PluginServer *ptr = plugin_guis->get(i);
-		if(edl->tracks->plugin_exists(ptr->plugin))
-			ptr->update_gui();
-		else
-		{
-// Schedule for deletion if no plugin
-			plugin_guis->remove_number(i);
-			i--;
-			
-			ptr->hide_gui();
-			delete_plugin(ptr);
-		}
+		plugin_guis->values[i]->update_gui();
 	}
 	plugin_gui_lock->unlock();
-
-	if(do_keyframe_guis) update_keyframe_guis();
 }
 
 int MWindow::plugin_gui_open(Plugin *plugin)
@@ -1857,7 +1747,6 @@
 
 void MWindow::update_plugin_states()
 {
-SET_TRACE
 	plugin_gui_lock->lock("MWindow::update_plugin_states");
 	for(int i = 0; i < plugin_guis->total; i++)
 	{
@@ -1961,6 +1850,13 @@
 	new_edl->insert_asset(new_asset, 0, 0, labels);
 //printf("MWindow::asset_to_edl 3\n");
 
+// Align cursor on frames:: clip the new_edl to the minimum of the last joint frame.
+	if(edl->session->cursor_on_frames)
+	{
+		double edl_length = new_edl->tracks->total_length_framealigned(edl->session->frame_rate);
+		new_edl->tracks->clear(edl_length, new_edl->tracks->total_length() + 100, 1);
+		new_edl->tracks->loaded_lengths_to_tracklengths(1);
+	}
 
 
 
@@ -1985,11 +1881,8 @@
 
 
 	gui->update(1, 1, 1, 1, 1, 1, 1);
-	gui->unlock_window();
 
-	cwindow->gui->lock_window("MWindow::update_project 1");
 	cwindow->update(0, 0, 1, 1, 1);
-	cwindow->gui->unlock_window();
 
 
 	if(load_mode == LOAD_REPLACE ||
@@ -1999,28 +1892,19 @@
 	}
 	else
 	{
-		vwindow->gui->lock_window("MWindow::update_project");
 		vwindow->update(1);
-		vwindow->gui->unlock_window();
 	}
 
-	cwindow->gui->lock_window("MWindow::update_project 2");
+	cwindow->gui->lock_window("Mwindow::update_project");
 	cwindow->gui->slider->set_position();
 	cwindow->gui->timebar->update(1, 1);
 	cwindow->gui->unlock_window();
-
 	cwindow->playback_engine->que->send_command(CURRENT_FRAME, 
 		CHANGE_ALL,
 		edl,
 		1);
 
-	awindow->gui->lock_window("MWindow::update_project");
-	awindow->gui->update_assets();
-	awindow->gui->flush();
-	awindow->gui->unlock_window();
-
-
-	gui->lock_window("MWindow::update_project");
+	awindow->gui->async_update_assets();
 	gui->flush();
 }
 
@@ -2028,6 +1912,7 @@
 void MWindow::rebuild_indices()
 {
 	char source_filename[BCTEXTLEN], index_filename[BCTEXTLEN];
+
 	for(int i = 0; i < session->drag_assets->total; i++)
 	{
 //printf("MWindow::rebuild_indices 1 %s\n", session->drag_assets->values[i]->path);
@@ -2149,11 +2034,10 @@
 		}
 	}
 	
-	if(push_undo) undo->update_undo_before();
 	edl->remove_from_project(session->drag_assets);
 	edl->remove_from_project(session->drag_clips);
 	save_backup();
-	if(push_undo) undo->update_undo_after(_("remove assets"), LOAD_ALL);
+	if(push_undo) undo->update_undo(_("remove assets"), LOAD_ALL);
 	restart_brender();
 
 	gui->lock_window("MWindow::remove_assets_from_project 3");
@@ -2166,10 +2050,7 @@
 		0);
 	gui->unlock_window();
 
-	awindow->gui->lock_window("MWindow::remove_assets_from_project 4");
-	awindow->gui->update_assets();
-	awindow->gui->flush();
-	awindow->gui->unlock_window();
+	awindow->gui->async_update_assets();
 
 // Removes from playback here
 	sync_parameters(CHANGE_ALL);
@@ -2321,7 +2202,7 @@
 }
 
 
-int MWindow::set_filename(const char *filename)
+int MWindow::set_filename(char *filename)
 {
 	strcpy(session->filename, filename);
 	if(gui)
