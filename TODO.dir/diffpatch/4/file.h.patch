--- cinecutie/file.h	2008-08-10 22:24:08.000000000 +0200
+++ /home/user/cinecutie/cinecutie/file.h	2010-02-19 22:19:11.948570683 +0100
@@ -32,6 +32,7 @@
 #include "filethread.inc"
 #include "filexml.inc"
 #include "formatwindow.inc"
+#include "formattools.h"
 #include "framecache.inc"
 #include "guicast.h"
 #include "mutex.inc"
@@ -39,6 +40,7 @@
 #include "preferences.inc"
 #include "resample.inc"
 #include "vframe.inc"
+#include "packagingengine.h"
 
 // ======================================= include file types here
 
@@ -53,12 +55,9 @@
 
 // Get attributes for various file formats.
 // The dither parameter is carried over from recording, where dither is done at the device.
-	int get_options(BC_WindowBase *parent_window, 
-		ArrayList<PluginServer*> *plugindb, 
-		Asset *asset,
+	int get_options(FormatTools *format, 
 		int audio_options,
-		int video_options,
-		char *locked_compressor);
+		int video_options);
 
 	int raise_window();
 // Close parameter window
@@ -168,7 +167,7 @@
 // is the length in floats from the offset.
 // advances file pointer
 // return 1 if failed
-	int read_samples(double *buffer, int64_t len, int64_t base_samplerate);
+	int read_samples(double *buffer, int64_t len, int64_t base_samplerate, float *buffer_float = 0);
 
 
 // set layer for video read
@@ -212,17 +211,17 @@
 	static int supports_video(ArrayList<PluginServer*> *plugindb, char *format);   // returns 1 if the format supports video or audio
 	static int supports_audio(ArrayList<PluginServer*> *plugindb, char *format);
 // Get the extension for the filename
-	static const char* get_tag(int format);
+	static char* get_tag(int format);
 	static int supports_video(int format);   // returns 1 if the format supports video or audio
 	static int supports_audio(int format);
 	static int strtoformat(char *format);
-	static const char* formattostr(int format);
+	static char* formattostr(int format);
 	static int strtoformat(ArrayList<PluginServer*> *plugindb, char *format);
-	static const char* formattostr(ArrayList<PluginServer*> *plugindb, int format);
+	static char* formattostr(ArrayList<PluginServer*> *plugindb, int format);
 	static int strtobits(char *bits);
-	static const char* bitstostr(int bits);
+	static char* bitstostr(int bits);
 	static int str_to_byteorder(char *string);
-	static const char* byteorder_to_str(int byte_order);
+	static char* byteorder_to_str(int byte_order);
 	int bytes_per_sample(int bits); // Convert the bit descriptor into a byte count.
 
 	Asset *asset;    // Copy of asset since File outlives EDL
@@ -235,6 +234,7 @@
 
 // Resampling engine
 	Resample *resample;
+	Resample_float *resample_float;
 
 // Lock writes while recording video and audio.
 // A binary lock won't do.  We need a FIFO lock.
@@ -254,18 +254,19 @@
 	int current_channel;
 	int current_layer;
 
-// Position information normalized to project rates
+// Position information normalized
 	int64_t normalized_sample;
 	int64_t normalized_sample_rate;
 	Preferences *preferences;
 
+	static PackagingEngine *new_packaging_engine(Asset *asset);
 
 private:
 	void reset_parameters();
 
 	int getting_options;
 	BC_WindowBase *format_window;
-	Condition *format_completion;
+	Mutex *format_completion;
 	FrameCache *frame_cache;
 // Copy read frames to the cache
 	int use_cache;
