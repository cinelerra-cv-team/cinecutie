--- cinecutie/filebase.h	2008-07-21 21:14:01.000000000 +0200
+++ /home/user/cinecutie/cinecutie/filebase.h	2010-02-19 22:19:11.948570683 +0100
@@ -35,9 +35,6 @@
 
 #include <sys/types.h>
 
-// Number of samples saved before the current read position
-#define HISTORY_MAX 0x10000
-
 // inherited by every file interpreter
 class FileBase
 {
@@ -84,7 +81,7 @@
 
 // Subclass should call this to add the base class allocation.
 // Only used in read mode.
-	virtual int64_t get_memory_usage();
+	virtual int64_t get_memory_usage() { return 0; };
 
 	virtual int write_samples(double **buffer, 
 		int64_t len) { return 0; };
@@ -95,6 +92,10 @@
 // Doubles are used to allow resampling
 	virtual int read_samples(double *buffer, int64_t len) { return 0; };
 
+
+	virtual int prefer_samples_float() {return 0;};
+	virtual int read_samples_float(float *buffer, int64_t len) { return 0; };
+
 	virtual int read_frame(VFrame *frame) { return 1; };
 
 // Return either the argument or another colormodel which read_frame should
@@ -104,23 +105,6 @@
 	virtual int can_copy_from(Edit *edit, int64_t position) { return 0; }; 
 	virtual int get_render_strategy(ArrayList<int>* render_strategies) { return VRENDER_VPIXEL; };
 
-// Manages an audio history buffer
-	void update_pcm_history(int64_t len);
-// Returns history_start + history_size
-	int64_t get_history_sample();
-// contiguous float
-	void append_history(float **new_data, int len);
-// Interleaved short
-	void append_history(short *new_data, int len);
-	void read_history(double *dst,
-		int64_t start_sample, 
-		int channel,
-		int64_t len);
-	void allocate_history(int len);
-
-// For static functions to access it
-	Asset *asset;
-
 protected:
 // Return 1 if the render_strategy is present on the list.
 	static int search_render_strategies(ArrayList<int>* render_strategies, int render_strategy);
@@ -163,12 +147,14 @@
 // allocate a buffer for translating video to VFrame
 	int get_video_buffer(unsigned char **buffer, int depth); // video
 	int get_row_pointers(unsigned char *buffer, unsigned char ***pointers, int depth);
-	static int match4(const char *in, const char *out);   // match 4 bytes for a quicktime type
+	static int match4(char *in, char *out);   // match 4 bytes for a quicktime type
 
 	int64_t ima4_samples_to_bytes(int64_t samples, int channels);
 	int64_t ima4_bytes_to_samples(int64_t bytes, int channels);
 
+	char *audio_buffer_in, *audio_buffer_out;    // for raw audio reads and writes
 	float *float_buffer;          // for floating point feathering
+	unsigned char *video_buffer_in, *video_buffer_out;
 	unsigned char **row_pointers_in, **row_pointers_out;
 	int64_t prev_buffer_position;  // for audio determines if reading raw data is necessary
 	int64_t prev_frame_position;   // for video determines if reading raw video data is necessary
@@ -176,29 +162,17 @@
 	int64_t prev_len;
 	int prev_track;
 	int prev_layer;
+	Asset *asset;
 	int wr, rd;
 	int dither;
 	int internal_byte_order;
 	File *file;
 
-// ================================= Audio compression
-	double **pcm_history;
-	int64_t history_allocated;
-	int64_t history_size;
-	int64_t history_start;
-	int history_channels;
-// Range to decode to fill history buffer.  Maintained by FileBase.
-	int64_t decode_start;
-	int64_t decode_len;
-// End of last decoded sample.  Maintained by user for seeking.
-	int64_t decode_end;
-
-
 private:
 
 
 
-
+// ================================= Audio compression
 // ULAW
 	float ulawtofloat(char ulaw);
 	char floattoulaw(float value);
