--- cinecutie/tracksedit.C	2008-07-21 21:14:01.000000000 +0200
+++ /home/user/cinecutie/cinecutie/tracksedit.C	2010-02-19 22:19:12.008571675 +0100
@@ -36,7 +36,6 @@
 #include "mainsession.h"
 #include "pluginserver.h"
 #include "pluginset.h"
-#include "plugin.h"
 #include "timebar.h"
 #include "trackcanvas.h"
 #include "tracks.h"
@@ -84,114 +83,7 @@
 	}
 }
 
-void Tracks::clear_transitions(double start, double end)
-{
-	for(Track *current_track = first; 
-		current_track; 
-		current_track = current_track->next)
-	{
-		if(current_track->record)
-		{
-			int64_t start_units = current_track->to_units(start, 0);
-			int64_t end_units = current_track->to_units(end, 0);
-
-			for(Edit *current_edit = current_track->edits->first;
-				current_edit;
-				current_edit = current_edit->next)
-			{
-				if(current_edit->startproject >= start_units &&
-					current_edit->startproject < end_units &&
-					current_edit->transition)
-				{
-					current_edit->detach_transition();
-				}
-			}
-		}
-	}
-}
-
-void Tracks::set_transition_length(double start, double end, double length)
-{
-	for(Track *current_track = first; 
-		current_track; 
-		current_track = current_track->next)
-	{
-		if(current_track->record)
-		{
-			int64_t start_units = current_track->to_units(start, 0);
-			int64_t end_units = current_track->to_units(end, 0);
-
-			for(Edit *current_edit = current_track->edits->first;
-				current_edit;
-				current_edit = current_edit->next)
-			{
-				if(current_edit->startproject >= start_units &&
-					current_edit->startproject < end_units &&
-					current_edit->transition)
-				{
-					current_edit->transition->length = 
-						current_track->to_units(length, 1);
-				}
-			}
-		}
-	}
-}
-
-void Tracks::set_transition_length(Transition *transition, double length)
-{
-// Must verify existence of transition
-	int done = 0;
-	if(!transition) return;
-	for(Track *current_track = first; 
-		current_track && !done; 
-		current_track = current_track->next)
-	{
-		for(Edit *current_edit = current_track->edits->first;
-			current_edit && !done;
-			current_edit = current_edit->next)
-		{
-			if(current_edit->transition == transition)
-			{
-				transition->length = current_track->to_units(length, 1);
-				done = 1;
-			}
-		}
-	}
-}
-
-void Tracks::paste_transitions(double start, double end, int track_type, char* title)
-{
-	for(Track *current_track = first; 
-		current_track; 
-		current_track = current_track->next)
-	{
-		if(current_track->record && current_track->data_type == track_type)
-		{
-			int64_t start_units = current_track->to_units(start, 0);
-			int64_t end_units = current_track->to_units(end, 0);
-
-			for(Edit *current_edit = current_track->edits->first;
-				current_edit;
-				current_edit = current_edit->next)
-			{
-				if(current_edit->startproject > 0 &&
-					((end_units > start_units &&
-					current_edit->startproject >= start_units &&
-					current_edit->startproject < end_units) ||
-					(end_units == start_units &&
-					current_edit->startproject <= start_units &&
-					current_edit->startproject + current_edit->length > start_units)))
-				{
-					current_edit->insert_transition(title);
-				}
-			}
-		}
-	}
-}
-
-void Tracks::set_automation_mode(double selectionstart, 
-	double selectionend,
-	int mode)
+void Tracks::straighten_automation(double selectionstart, double selectionend)
 {
 	Track* current_track;
 
@@ -199,9 +91,8 @@
 	{
 		if(current_track->record)
 		{
-			current_track->set_automation_mode(selectionstart, 
-				selectionend,
-				mode); 
+			current_track->straighten_automation(selectionstart, 
+				selectionend); 
 		}
 	}
 }
@@ -279,11 +170,11 @@
 	return 0;
 }
 
-// int Tracks::copy_default_keyframe(FileXML *file)
-// {
-// 	copy_automation(0, 0, file, 1, 0);
-// 	return 0;
-// }
+int Tracks::copy_default_keyframe(FileXML *file)
+{
+	copy_automation(0, 0, file, 1, 0);
+	return 0;
+}
 
 int Tracks::delete_tracks()
 {
@@ -312,7 +203,8 @@
 	Track *track,
 	double position,
 	int edit_labels,  // Ignored
-	int edit_plugins)  // Ignored
+	int edit_plugins,  // Ignored
+	int behaviour)
 {
 //printf("Tracks::move_edits 1\n");
 	for(Track *dest_track = track; dest_track; dest_track = dest_track->next)
@@ -360,60 +252,109 @@
 //printf("Tracks::move_edits 2 %s %s %d\n", source_track->title, dest_track->title, source_edit->length);
 			if(source_edit)
 			{
-// Copy keyframes
-				FileXML temp;
-				AutoConf temp_autoconf;
 				int64_t position_i = source_track->to_units(position, 0);
 // Source edit changes
 				int64_t source_length = source_edit->length;
+				int64_t source_startproject = source_edit->startproject;
 
-				temp_autoconf.set_all(1);
+				if (behaviour == 0)
+				{
+				// This works like this: CUT edit, INSERT edit at final position, keyframes also follow
+				// FIXME: there should be a GUI way to tell whenever user also wants to move autos or not
+// Copy keyframes
+					FileXML temp;
+					AutoConf temp_autoconf;
 
-				source_track->automation->copy(source_edit->startproject, 
-					source_edit->startproject + source_edit->length, 
-					&temp, 
-					0,
-					1);
-				temp.terminate_string();
-				temp.rewind();
-// Insert new keyframes
-//printf("Tracks::move_edits 2 %d %p\n", result->startproject, result->asset);
-				source_track->automation->clear(source_edit->startproject,
-					source_edit->startproject + source_edit->length, 
-					&temp_autoconf,
-					1);
-				int64_t position_a = position_i;
-				if (dest_track == source_track)
-                {
-                    if (position_a > source_edit->startproject)
-                            position_a -= source_length;
-                }	        
+					temp_autoconf.set_all(1);
 
-				dest_track->automation->paste_silence(position_a, 
-					position_a + source_length);
-				while(!temp.read_tag())
-					dest_track->automation->paste(position_a, 
-						source_length, 
-						1.0, 
+					source_track->automation->copy(source_edit->startproject, 
+						source_edit->startproject + source_edit->length, 
 						&temp, 
 						0,
-						1,
-						&temp_autoconf);
-
+						0);
+					temp.terminate_string();
+					temp.rewind();
+// Insert new keyframes
+//printf("Tracks::move_edits 2 %d %p\n", result->startproject, result->asset);
+					source_track->automation->clear(source_edit->startproject,
+						source_edit->startproject + source_edit->length, 
+						&temp_autoconf,
+						1);
+					int64_t position_a = position_i;
+					if (dest_track == source_track)
+					{
+						if (position_a > source_edit->startproject)
+							position_a -= source_length;
+					}	        
 
+					dest_track->automation->paste_silence(position_a, 
+						position_a + source_length);
+					while(!temp.read_tag())
+						dest_track->automation->paste(position_a, 
+							source_length, 
+							1.0, 
+							&temp, 
+							0,
+							&temp_autoconf);
 
 // Insert new edit
-				Edit *dest_edit = dest_track->edits->shift(position_i, 
-					source_length);
-				Edit *result = dest_track->edits->insert_before(dest_edit, 
-					new Edit(edl, dest_track));
-				result->copy_from(source_edit);
-				result->startproject = position_i;
-				result->length = source_length;
+					Edit *dest_edit = dest_track->edits->shift(position_i, 
+						source_length);
+					Edit *result = dest_track->edits->insert_before(dest_edit, 
+						dest_track->edits->create_edit());
+					result->copy_from(source_edit);
+					result->startproject = position_i;
+					result->length = source_length;
 
 // Clear source
-				source_track->edits->clear(source_edit->startproject, 
-					source_edit->startproject + source_length);
+					source_track->edits->clear(source_edit->startproject, 
+						source_edit->startproject + source_length);
+
+	/*
+//this is outline for future thinking how it is supposed to be done trough C&P mechanisms
+					temp.reset_tag();
+					source_track->cut(source_edit->startproject, 
+						source_edit->startproject + source_edit->length, 
+						&temp, 
+						NULL);
+					temp.terminate_string();
+					temp.rewind();
+					dest_track->paste_silence(position_a, 
+						position_a + source_length,
+						edit_plugins);
+					while(!temp.read_tag())
+						dest_track->paste(position_a,          // MISSING PIECE OF FUNCTIONALITY 
+							source_length, 
+							1.0, 
+							&temp, 
+							0,
+							&temp_autoconf);
+	*/
+
+
+				} else
+				if (behaviour == 1)
+				// ONLY edit is moved, all other edits stay where they are
+				{
+					// Copy edit to temp, delete the edit, insert the edit
+					Edit *temp_edit = dest_track->edits->create_edit(); 
+					temp_edit->copy_from(source_edit);
+					// we call the edits directly since we do not want to move keyframes or anything else
+					source_track->edits->clear(source_startproject, 
+						source_startproject + source_length);
+					source_track->edits->paste_silence(source_startproject, 
+						source_startproject + source_length); 
+
+					dest_track->edits->clear(position_i, 
+						position_i + source_length);
+					Edit *dest_edit = dest_track->edits->shift(position_i,  source_length);
+					Edit *result = dest_track->edits->insert_before(dest_edit, 
+						dest_track->edits->create_edit());
+					result->copy_from(temp_edit);
+					result->startproject = position_i;
+					result->length = source_length;
+					delete temp_edit;
+				}
 				source_track->optimize();
 				dest_track->optimize();
 			}
@@ -450,27 +391,8 @@
 	else
 // Create a new plugin set
 	{
-		double length = 0;
-		double start = 0;
-		if(edl->local_session->get_selectionend() > 
-			edl->local_session->get_selectionstart())
-		{
-			start = edl->local_session->get_selectionstart();
-			length = edl->local_session->get_selectionend() - 
-				start;
-		}
-		else
-		if(dest_track->get_length() > 0)
-		{
-			start = 0;
-			length = dest_track->get_length();
-		}
-		else
-		{
-			start = 0;
-			length = dest_track->from_units(plugin->length);
-		}
-
+		double start = dest_track->from_units(dest_position);
+		double length = dest_track->from_units(plugin->length);
 
 		result = dest_track->insert_effect("", 
 				&plugin->shared_location, 
@@ -479,8 +401,8 @@
 				start,
 				length,
 				plugin->plugin_type);
-	}
 
+	}
 
 
 	result->copy_from(plugin);
@@ -494,6 +416,7 @@
 }
 
 
+
 int Tracks::concatenate_tracks(int edit_plugins)
 {
 	Track *output_track, *first_output_track, *input_track;
@@ -535,8 +458,7 @@
 				output_track->insert_track(input_track, 
 					output_start, 
 					0,
-					edit_plugins,
-					0);
+					edit_plugins);
 
 // Get next source and destination
 				for(input_track = input_track->next; 
@@ -603,7 +525,7 @@
 	double end, 
 	int all, 
 	FileXML *file, 
-	const char *output_path)
+	char *output_path)
 {
 // nothing selected
 	if(start == end && !all) return 1;
@@ -733,10 +655,25 @@
 	}
 }
 
+void Tracks::loaded_lengths_to_tracklengths(int includerecordtracks)
+{
+	Track *current_track;
+	
+	for(current_track = first; 
+	    current_track; 
+	    current_track = current_track->next)
+	{
+		if(current_track->record || includerecordtracks) 
+		{
+// Reset the loaded_length value. (the last edit should always be a silence going to infinityish)
+			current_track->edits->loaded_length = current_track->edits->last->startproject;
+		}
+	}
+}
+
 void Tracks::paste_automation(double selectionstart, 
 	FileXML *file,
-	int default_only,
-	int active_only)
+	int default_only)
 {
 	Track* current_atrack = 0;
 	Track* current_vtrack = 0;
@@ -796,8 +733,7 @@
 								frame_rate,
 								sample_rate,
 								file,
-								default_only,
-								active_only);
+								default_only);
 						}
 					}
 					else
@@ -822,8 +758,7 @@
 								frame_rate,
 								sample_rate,
 								file,
-								default_only,
-								active_only);
+								default_only);
 						}
 					}
 				}
@@ -832,11 +767,11 @@
 	}
 }
 
-// int Tracks::paste_default_keyframe(FileXML *file)
-// {
-// 	paste_automation(0, file, 1, 0);
-// 	return 0;
-// }
+int Tracks::paste_default_keyframe(FileXML *file)
+{
+	paste_automation(0, file, 1);
+	return 0;
+}
 
 void Tracks::paste_transition(PluginServer *server, Edit *dest_edit)
 {
